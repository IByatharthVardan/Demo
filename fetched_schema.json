{
    "13542": {
        "description": "Classify a document as an email if it shows typical email structure and language. \n\nStrictly check for the file extension, it should be \".eml\" or \".msg\" only.\n\nLook for:\nHeader fields usually found at the beginning of emails, such as:\nFrom, To, Subject, Cc, Date, or Sent.\nEmail-specific language, especially near the end of the document:\nClosings like \u201cBest regards\u201d, \u201cKind regards\u201d, \u201cThanks\u201d, \u201cSincerely\u201d, \u201cWarm regards\u201d, or similar phrases followed by a name.\nInformal or conversational tone often used in emails, including greetings like:\n\u201cHi [Name]\u201d, \u201cHello\u201d, \u201cDear [Name]\u201d.\nOptional metadata or footer elements:\nEmail signatures, disclaimers, or \u201cPlease consider the environment\u2026\u201d type footers.\nClassify the document as \"email\" only if at least two of the above characteristics are present",
        "fields": {
            "193401": {
                "data_type": "TEXT",
                "description": "Extract the Target Price \u2014 the premium or price the client or broker expects to pay for the insurance policy. sometimes it is implied from previous year\u2019s premium.\nIf no relevant price reference is available, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Extract only the final target premium value.\nIf no valid target premium value is found, return \"\".\nDo not include any label text like \"target premium\" or \"client is looking for\".\nReturn only the clean value."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Target Price@1"
                            }
                        ],
                        "function_id": 17068,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Target Price",
                "position": 0,
                "prompt": "Step 1 \u2013 Identify Base Premium:\nLook for phrases like \u201crenewal terms received\u201d, \u201ctarget at the moment\u201d, \u201cwe would like terms\u201d, \u201clooking for a quote\u201d \u2192 mark as Target_Premium.\n\nstrictly Ignore values with \u201clast year was\u201d, \u201cexpiry premium\u201d,\"last year paid\", \u201ccurrently paying\u201d unless a % change is also mentioned.\n\nIf % change (e.g., \u201c10% increase\u201d) is mentioned with a past premium \u2192 calculate: base \u00b1 % change in Step3\n\nIf two premiums from different insurers \u2192 use the lower one.\nIf no valid target \u2192 return \" \".\n\nStep 2 \u2013 Adjust for IPT:\nIf \u201cincluding IPT\u201d \u2192 divide by 1.12.\nIf \u201c+ IPT\u201d, \u201cexcluding IPT\u201d, or \u201cplus IPT\u201d \u2192 use as-is.\nIgnore commission.\n\nStep 3 \u2013 Apply % Change:\nIf phrases like \u201c10% increase\u201d or \"additional premium\" or \u201cindication is\u2026\u201d appear \u2192 apply change.\n\nOutput:\nCalculated Target Premium: \u00a3[value]\n\nlets think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193402": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYou are working with the subject line and body of an email related to a submission. Your task is to extract the **Agency Enquiry Reference**, also referred to as **Quote Ref**, **Quote Reference**, or **RFQ**.\n\nThis reference number may appear:\n- In the subject line (e.g. \"Quote Ref: 746134380\")\n- In the body of the email (e.g. \"Please use RFQ - 156802033 for your response\")\n\nLook for patterns like:\n- \"Quote Ref\"\n- \"Quote Reference\"\n- \"QuoteRef\"\n- \"RFQ\"\n- \"Ref\"\n\nExtract the full text containing the reference, including any prefix like \"RFQ -\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Extract only the clean Agency Enquiry Reference value.\n\nKeep the full reference if it is in a format like:\n\n\"RFQ - 156802033\"\n\n\"746134380\"\n\n\"[Quote Ref: 746134380]\"\n\nRemove any surrounding labels, brackets, or filler text.\nReturn only the clean reference string. If no valid reference is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Agency Enquiry Reference",
                "position": 1,
                "prompt": "You are working with the subject line and body of an email related to a submission. Your task is to extract the Agency Enquiry Reference, also known as Quote Ref, Quote Reference, RFQ, or Ref. It is a unique numeric or alphanumeric ID provided by the broker to track the quote.\n\nLook for below similar phrases:\nQuote Ref: 745134320\nRFQ-156802033\nRef 947152\nExtract the full expression, including the prefix (e.g., \"RFQ-156802033\" or \"Quote \nRef: 746134380\").\n\nExclude:\nUnlabeled strings like Q009258247-1169877\nSystem IDs starting with Q00, P00\nPlain numbers with no label\nIf multiple references are present, return all. If none, return an empty string \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193403": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Broker Deadline**, also referred to as **Target Date**, **Quote Required By**, or simply **Deadline**, from the email subject or body.\n\nLook for expressions such as:\n- \"Quote required by 10th January 2025\"\n- \"Deadline: 10th January 2025\"\n- \"Target date 10th January 2025\"\n\nIdentify phrases indicating a deadline and extract the associated date that follows.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return only date without extra information"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Broker Deadline@1"
                            }
                        ],
                        "function_id": 17069,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Broker Deadline",
                "position": 2,
                "prompt": "Extract the Broker Deadline from the email content.\u2028This refers to the date by which a quote is expected from the insurer.\n\nInstructions\nStep 1: Search for relevant deadline phrases\nIdentify dates associated with the following phrases:\nQuote required by\nDeadline\nTarget date\nQuote deadline\nQuote expected by\nNeeded by\nTerms no later than\n\nStep 2: Handle date formats\nIf day, month, and year are present \u2192 return in dd/mm/yyyy format.\u2028Example: \u201cQuote required by 10 January 2025\u201d \u2192 10/01/2025\nIf only day and month are present (no year) \u2192 return in dd/mm format.\u2028Example: \u201cQuote expected by 19 Jan\u201d \u2192 19/01\nDo not infer the year from the email\u2019s received date.\n\nStep 3: Exclude irrelevant dates\nIgnore dates associated with:\nPolicy renewal\nEffective\nExpiry\nDue on\n\nOutput Format\nBroker Deadline Date : <deadline date or \"\">\nFull date: Broker Deadline Date : 10/01/2025\nPartial date: Broker Deadline Date : 10/01\nNo valid date: Broker Deadline Date : \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193404": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17070,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Product",
                "position": 3,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193405": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Insured Name**, which may also be referred to as:\n\n- Policyholder\n- Client Name\n- Full Client Name\n- Trading Name\n- Company Name\n\nThe insured name typically refers to the legal entity or business applying for cover. It can appear in the email subject or body and is usually a company or trading name.\n\nExamples:\n- \"ABC (Holdings) Ltd\"\n- \"XYZ Holdings\"\n\nLook for phrases such as:\n- \"Client Name: ABC (Holdings) Ltd\"\n- \"Company: XYZ Holdings\"\n- \"Policyholder \u2013 ABC Ltd\"\n\nExtract only the entity name that represents the client or policyholder.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Return only the clean **Insured Name**.\n\n- Preserve full legal or trading names as written, such as:\n  - \"ABC (Holdings) Ltd\"\n  - \"XYZ Holdings\"\n- Remove any preceding labels such as \"Client Name:\", \"Company:\", or \"Policyholder \u2013\"\n- Remove any trailing punctuation or filler text\n\nIf no insured name is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Insured",
                "position": 4,
                "prompt": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Insured Name**, It often appears on the top of the email or in the **Subject:** line. which may also be referred to as:\n\n- Policyholder\n- Client Name\n- Full Client Name\n- Trading Name\n- Company Name\n\nThe insured name typically refers to the legal entity or business applying for cover. It can appear in the email subject or body and is usually a company or trading name.\n\nExamples:\n- Subject: ABC Holdings Ltd  \u2192 Extract ABC Holdings Ltd\n- Subject: [EXTERNAL] XYZ Holdings \u2192Extract XYZ Holdings\n\nLook for phrases such as:\n- \"Client Name: ABC (Holdings) Ltd\"\n- \"Company: XYZ Holdings\"\n- \"Policyholder \u2013 ABC Ltd\"\n\nExtract only the entity name that represents the client or policyholder.\n\nOutput Format:\n{\n   \"Insured Name\" : \"<extracted insured name>\"\n}",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193406": {
                "data_type": "TEXT",
                "description": "Find and return the business description or trade of the insured. This is usually a short phrase describing what the company does \u2014 like haulage, construction, taxi service, or logistics",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean **Business Description**.\n\n- Preserve the complete business activity description as written.\n- Remove any preceding labels such as \"Trade:\", \"Business Description:\", or \"Nature of Business:\"\n- Remove trailing punctuation, line breaks, or filler text.\n\nIf no business description is found, return \"\""
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Business Description",
                "position": 5,
                "prompt": "Extract the Business Description of the company from the docuemnt.\nLook for text following keywords or titles such as:\n\nOccupation\nBusiness\nBusiness Description\nNature of Business\nTrade\n\nOnly extract the content that describes the core business activity or operations. Strictly do not include the insured name, Name of Insured, contact info, address, or unrelated labels as business description .\n\nIf no relevant information is found, return:\nBusiness Description: \"\"\n\nIf found, return in this format:\nBusiness Description: \"<extracted text>\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193407": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Agency Name**, also referred to as the **Broker Name**, from the email content. This is the name of the brokerage firm or intermediary who has sent the submission.\n\nThis name is typically found in:\n- The email signature\n- The sender\u2019s details in the body\n- Footer or sign-off sections of the email\n\nCommon patterns:\n- \"Kind regards, John Smith, Butterworth Spengler\"\n- \"Thomas Carroll \u2013 Fleet Division\"\n- \"Best, Rachel | Broker at XYZ Brokers\"\n\nExtract only the name of the broker agency, not the individual contact person.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean **Agency Name** or **Broker Name**.\n\nIf no agency or broker name is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Agency Name",
                "position": 10,
                "prompt": "Extract the complete Broker or Agency Name from the email content. This is the name of the brokerage firm or intermediary that sent the submission.\n\nLook for the name in:\n\nEmail signature or sign-off lines (e.g., \u201cKind regards, John \u2013 ABC Brokers\u201d)\n\nSender\u2019s details in body (e.g., \u201c| Broker at XYZ Insurance Services\u201d)\n\nFooter/legal lines\n\nAlways extract the full official name, including suffixes like Ltd, LLP, & Co., Insurance Group, etc.\n\nIf it says \u201ca part of\u201d or \u201csubsidiary of\u201d a group, extract the parent agency name.\n\nIgnore person names, internal teams (e.g., \u201cFleet Division\u201d), or job titles.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193408": {
                "data_type": "TEXT",
                "description": "Extract the Companies House Reference of the insured, an alphanumeric code up to 8 characters, often referred to as \"Company registration number\" or \"Company No.\" Return only the value. If not found, return \"N/A\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the final output company registration number of the insured, otherwise return an empty string: \"\" without any additional text."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Company House Reference Party",
                "position": 6,
                "prompt": "You are expert in analysing vehicle insurance data. Your task is to extract the **company registration** number of the insured/client from the Email body.\n\nInstructions:\n\nStep-1 : Identify the Insured/client.\n\nStep-2 : Extract the company registration number of the insured/client extracted from step-1, which is typically 8 characters long but can be fewer.\n\nStep-3 : Look for key phrases indicating a registration number, such as:\n\n\u201cCompany Number\u201d\n\n\u201cCompany Registration Number\u201d\n\n\u201cRegistered Number\u201d\n\nor any similar variation\n\nExclusions & Constraints:\n\nStep-4 : Do not extract the company number found in the broker's details or footer.\n\nStep-5 : Only extract the number if it refers specifically to the insured/client.\n\nStep-6 : If no such registration number is found for the client, return an empty string: \"\".\n\nLet's think step by step.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193409": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Date Established** for the insured. This may also be referred to as:\n\n- \"Insured \u2013 Date Established\"\n- \"Year Business Established\"\n- \"Established\"\n- \"Date of Incorporation\"\n- \"Trading Since\"\n\nThis information typically appears in the body of the email, submission form, or company profile section.\n\nLook for phrases like:\n- \"Date established: 15th March 2010\"\n- \"Established in 2005\"\n- \"Trading since January 1998\"\n- \"Incorporated on 07/06/2003\"\n\nExtract the full date or year that indicates when the insured began operations.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are an expert in document analysis and date extraction.\nYour task is to extract and normalize a date from the given text.\nInstructions:\nInterpret all date formats strictly as day/month/year (DD/MM/YYYY), regardless of how the date appears in the text. The first number is always the day, second is the month, third is the year.\nNormalize and return the date in the format: DD/MM/YYYY (zero-padded).\nIf only a year is present (e.g. \"2020\"), return it as 01/01/YYYY.\nIf a month and year are present (e.g. \"March 2020\" or \"03/2020\"), return it as 01/MM/YYYY.\nIf a full day, month, and year are present, return the exact date in DD/MM/YYYY format.\nReturn only the extracted value (no label or explanation in output).\nIf no valid establishment date is found, return exactly: \"\" (empty string, without quotes).\nExamples:\nExample 1:\nText: The business was founded in 2021.\nOutput: 01/01/2021\nExample 2:\nText: Established: March 2020.\nOutput: 01/03/2020\nExample 3:\nText: Policy effective from 5/11/2023 for one year.\nOutput: 05/11/2023\nExample 4:\nText: Driver's licence issue date: 14-6-90, valid for 10 years.\nOutput: 14/06/1990\nExample 5:\nText: Vehicle registration expires on 01.12.2025.\nOutput: 01/12/2025\nExample 6:\nText: Renewal date: \"\"\nOutput: \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Date Established",
                "position": 7,
                "prompt": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Date Established** for the insured. This may also be referred to as:\n\n- \"Insured \u2013 Date Established\"\n- \"Year Business Established\"\n- \"Established\"\n- \"Date of Incorporation\"\n- \"Trading Since\"\n\nThis information typically appears in the body of the email, submission form, or company profile section.\n\nLook for phrases like:\n- \"Date established: 15th March 2010\"\n- \"Established in 2005\"\n- \"Trading since January 1998\"\n- \"Incorporated on 07/06/2003\"\n\nExtract the full date or year that indicates when the insured began operations.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193410": {
                "data_type": "TEXT",
                "description": "Extract the Party Address (also known as the Insured \u2013 Correspondence Address) from the document.\n\nInstructions:\n\nThis is the physical or mailing address of the insured entity.\n\nIt may appear in the email body, contact details section, or signature block.\n\nLook for lines or phrases like:\n\"Correspondence Address: 8 Griffin Road\"\n\"Insured Address \u2013 1 Main Street\"\n\"Address: Head Office \u2013 22 King Street\"\n\nIf multiple addresses are found, prioritise the one labeled as \"Head Office\" or similar (e.g., \u201cHO Address\u201d).\n\nExtract the complete line(s) representing the address.\n\nIgnore unrelated addresses (e.g., branch, broker, or claimant addresses).\n\nOutput:\n\nReturn the full Party Address as a string. If no valid address is found, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Clean and return **only the address details**. This means:\n- Preserve the physical address lines.\n- Format it as a single clean string separated by commas.\n- If no valid address is present, return \"\"."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Party Address",
                "position": 8,
                "prompt": "Extract the full insured party\u2019s address from the given text.\n\nThe insured is the client or policyholder, not the insurer or the broker/intermediary.\n\nOnly return addresses clearly associated with the insured party\u2019s name (e.g., Hewer Group Ltd, Multi Turn Ltd, etc.).\n\nDo not return any address linked to brokers, agents, or insurers (e.g., Gallagher, AJG, UBT, AXA, Marsh, etc.).\n\nIf multiple addresses appear, return the one labeled \"Head Office\", \"HO Address\", or \"Registered Office\", if available.\n\nReturn the full address exactly as it appears in the document without omitting or reformatting any part, as a single string.\n\nIf no valid insured-related address is found, return \"\".",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193411": {
                "data_type": "TEXT",
                "description": "Extract the value associated with \"Holding Broker\" from the given text. Only return the value if it is explicitly labeled as \"Holding Broker\" (case-insensitive). Do not infer or guess the broker name if the label is not clearly mentioned. Return \"N/A\" if \"Holding Broker\" is not found",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "ADVANCED",
                "name": "Holding Broker",
                "position": 12,
                "prompt": "Your task is to extract the Holding Broker from the given text.\n\nOnly extract the value if the term \"Holding Broker\" is explicitly mentioned (case-insensitive).\n\nAccept direct patterns such as:\n\n\"Holding Broker: [Name]\"\n\"We are the holding broker\"\n\"Acting as the holding broker\"\n\"[Name] is the holding broker\"\n\nDo not infer or assume the broker name based on context, sender domain, or other parties mentioned in the text.\n\nIf the statement is like \u201cWe are the holding broker,\u201d return the organization or person making the statement only if they are clearly identified nearby (e.g., in a signature block).\n\nIf the term \"Holding Broker\" is not present, or the associated name is unclear, return an empty string \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193412": {
                "data_type": "TEXT",
                "description": "Extract just the Inception Date \u2014 the date the insurance policy is set to begin.\nIt may also be referred to as \"Effective Date\", \"Start Date\", or \"Incepts On\".\nDo not return the Renewal Date.\nIf no relevant start date is found, return \"N/A\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Check Format: If date is already in the dd/mm/yyyy format, return it as is.\nStandardize Date: If the date is in a different valid format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy. return the cleaned date without any quotes\nInvalid Dates: If date is missing, empty, or not a valid date, return an empty string \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Incepts On",
                "position": 13,
                "prompt": "From the provided reference text, extract the Inception Date of the insurance policy.\n\nTreat the following labels as valid indicators of inception (case-insensitive):\nInception Date, Policy Inception Date, Effective Date, Start Date, Period of Insurance, Renewal Date, Renewal On,**RNL **, Incepts On, **due**, **Due Date**, **Renewal Due**, **Presentation Due**, **Renewal Presentation due**\n\nExtract a date only if it appears alongside one of these valid labels.\n\nIf the date includes day, month, and year, return it in DD/MM/YYYY format.\n\nIf the date includes only day and month, append the year from the email sent date and return in DD/MM/YYYY format.\n\nDo not extract any date based solely on the email sent date.\n\nIf no valid label or date is present, return an empty string: \"\".\n\nOutput only the extracted date \u2014 no extra text, quotes, or explanations.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193413": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            }
                        ],
                        "function_id": 17071,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Expires On",
                "position": 14,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193414": {
                "data_type": "TEXT",
                "description": "Extract the Main Cover Type from the input.\nThis refers to the level of motor insurance cover requested or provided (e.g., \"Comprehensive\", \"Third Party Only\", \"TPFT\").\nIf no valid cover type is found, return \"N/A\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean **Main Cover Type**.\nIf no cover type is found, return \"\""
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type@1"
                            }
                        ],
                        "function_id": 17072,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type",
                "position": 15,
                "prompt": "Extract the Main Cover Type from the document. This refers to the level of motor insurance cover requested or provided.\n\nInstructions:\n\nLook for mentions of possible cover types which includes:\n\"Comprehensive\"(\"Comp\"),  \"Third Party Only\"(\"TPO\"), \"TPFT\" (\"Third Party, Fire & Theft\"), \"Laid Up Accidental Damage and Theft\"(Laid Up ADFT) or \"Laid Up Fire and Theft\"(\"Laid Up FT\").\n\nIdentify all occurrences of these terms throughout the document.\nExtract the most frequently occurring cover type.\n\nIf no valid cover type is found, return \"\".\n\nReturn only the exact cover type value, no extra text or explanation.\n\nOutput format:\n\nMain Cover Type: \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193415": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "insured_address: {{ \\ Party Address \\}}\n\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\n\nIf no post code is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Risk Postcode",
                "position": 16,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193416": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Today_date",
                                "value": "Today date"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Details",
                                "value": "Driver Details"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "driver_details: {{ \\ Driver Details \\}}\n\ntoday_date: {{ \\ Today date \\}}\n\n\nThe driver_details table contains a column 'Driver Name' and 'Licence Date'.\n\nCalculate each driver's licence tenure in complete years using 'Licence Date' and today_date.\n\nIf 'Licence Date' is missing or empty in a row, return that row with the Licence Tenure as empty.\n\nReturn the final output as a table with two columns: 'Driver Name' , \u2018Licence Tenure'"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Driver Licence Tenure@0"
                            }
                        ],
                        "function_id": 17073,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Licence Tenure",
                "position": 26,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193417": {
                "data_type": "TEXT",
                "description": "Extract the Agency Address from the provided text.\n\nDefinition:\n\nThe Agency Address refers to the address of the insurance broker, intermediary, or agent responsible for managing or placing the insurance policy.\n\nThis address is typically associated with organisations such as Gallagher, UBT, Arthur J. Gallagher, etc.\n\nInstructions:\n\nLook for addresses that are directly linked to broker personnel (e.g., account managers, account directors, insurance advisors) or company names known to be brokers/intermediaries.\n\nExclude any addresses related to the insured party (e.g., the policyholder or client like Hewer Group Ltd or Multi Turn Ltd).\n\nReturn the complete line(s) representing the address, usually found near the broker's name, company name, or email signature.\n\nIf multiple broker addresses are present, select the one associated with the contact sending or managing the case.\n\nIf no agency/broker address is identified, return \"N/A\".\n\nOutput:\n\nA single string containing the agency\u2019s physical address, or \"N/A\" if not found.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Clean and return **only the address details**. This means:\n- Preserve the physical address lines.\n- Format it as a single clean string separated by commas.\n- If no valid address is present, return \"\"."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Agency address",
                "position": 9,
                "prompt": "You are an expert in Insurance underwriting. Your task is to extract the correct Agency address from the OCR-processed Email.\n\nFollow the given instructions before extracting the address.\n\nInstructions:\n\n1. The Agency Address refers to the address of the insurance broker, intermediary, or agent responsible for managing or placing the insurance policy.This address is typically associated with organisations such as Gallagher, UBT, Arthur J. Gallagher, etc.\n\n2. Look for addresses that are directly linked to broker personnel (e.g., account managers, account directors, insurance advisors) or company names known to be brokers/intermediaries.\n\n3. Exclude any addresses related to the insured party (e.g., the policyholder or client like Hewer Group Ltd or Multi Turn Ltd).\n\n4. Return the complete line(s) representing the address, usually found near the broker's name, company name, or email signature.\n\n5. If multiple broker addresses are present, select the one associated with the contact sending or managing the case.\n\n6. Return the complete physical address exactly as it is displayed in the document, without omitting or reformatting any part.\n\n7. If no agency/broker address is identified, return \"\".\n\nOutput Format:\n\nA single string containing the agency\u2019s **physical address**, or \"\" if not found.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193418": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            }
                        ],
                        "function_id": 17074,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Effective From",
                "position": 17,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193419": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Expires_On",
                                "value": "Expires On"
                            }
                        ],
                        "function_id": 17075,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Effective To",
                "position": 18,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193420": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Is_Holding_Broker_Details",
                                "value": "Is Holding Broker Details"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Is_Holding_Broker_From_Context",
                                "value": "Is Holding Broker From Context"
                            }
                        ],
                        "function_id": 17076,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Is Holding Broker",
                "position": 21,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193421": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17077,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Transaction Type",
                "position": 22,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193422": {
                "data_type": "TEXT",
                "description": "Extract the Agency Contact \u2014 this is the name of the person who sent the email or prepared the Broker Presentation.\n\nInstructions:\n\nLook for the sender\u2019s name in the email body, especially near the signature section at the end of the email.\n\nIf the name is mentioned in the Broker Presentation, usually on the first or last page, extract it from there.\n\nReturn only the full name of the person (e.g., John Smith).\n\nDo not return any email addresses, phone numbers, or job titles.\n\nIf no name is found, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "DEFAULT",
                "name": "Agency Contact",
                "position": 11,
                "prompt": "Extract the Agency Contact \u2014 this is the name of the person who sent the original enquiry from the agency (broker/intermediary) to the insurer.\n\nInstructions:\n\nLook for the first email in the thread that is sent from a broker or intermediary (not the insurer).\n\nIdentify the sender\u2019s full name from that email, typically found near the signature block (e.g., at the bottom).\n\nReturn only the sender\u2019s full name .\n\nDo not return email addresses, phone numbers, or job titles.\n\nIf no agency contact name is found, return \"\".",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193423": {
                "data_type": "TEXT",
                "description": "Task : Extract all driver-specific details from the Email body.\n\nFor each driver, extract the following fields. If a field is missing or not clearly present, use an empty string '':\n\nDriver Name \u2013 The full name of the driver.\nDriver DOB \u2013 The date of birth of the driver.\nLicence Date \u2013 The date when the driver obtained their license.\nConviction code \u2013 The conviction code(s), if any, associated with this driver(For example 'SP30', 'IN10' etc).\nDriver claim \u2013 Claim information related to this driver, if any.\n\nInstructions:\n--> Ensure that data is correctly attributed to the corresponding driver.\n--> If driver name is not available, eliminate that row.\n\nReturn the tabular format output as specified below without any additional text.\nExample Output format:\n[\n  [\"Driver Name\", \"Driver DOB\u201d, \"Licence Date\", \"Conviction code\", \"Driver Claims\"],\n  [\"<Driver Name>\", \"<Driver DOB>\", \"<Licence Date>\", \"<Conviction Code>\", \"<Driver Claims>\"],\n]\n\nLet's think step by step.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Driver Details@0"
                            }
                        ],
                        "function_id": 17078,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Driver Details",
                "position": 24,
                "prompt": "Task : Extract all driver-specific details from the Email body.\n\nFor each driver, extract the following fields. If a field is missing or not clearly present, use an empty string '':\n\nDriver Name \u2013 The full name of the driver(For example : \"Williams\").\nDriver DOB \u2013 The date of birth of the driver.\nLicence Date \u2013 The date when the driver obtained their license.\nConviction code \u2013 The conviction code(s), if any, associated with this driver(For example 'SP30', 'IN10' etc).\nDriver claim \u2013 Claim information related to this driver, if any.\n\nInstructions:\nEnsure that data is correctly attributed to the corresponding driver.\nIf driver name is not available, eliminate that row.\nDate Normalization Rules (for both DOB and Licence Date):\nIf the date is in dd/mm/yyyy format, keep it as is.\nIf only year \u2192 01/01/yyyy\nIf month+year \u2192 01/mm/yyyy\n\nOutput all dates as dd/mm/yyyy\nReturn the tabular format output as specified below without any additional text.\nExample Output format:\n[ [\"Driver Name\", \"Driver DOB\u201d, \"Licence Date\", \"Conviction Code\", \"Driver Claims\"], [\"<Driver Name>\", \"<Driver DOB>\", \"<Licence Date>\", \"<Conviction Code>\", \"<Driver Claims>\"] ]\n\nLet's think step by step.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193424": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Today_date",
                                "value": "Today date"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Details",
                                "value": "Driver Details"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "driver_details:{{ \\ Driver Details \\ }}\ntoday_date: {{ \\ Today date \\ }}\nthe driver_details table contains a column 'Driver Name' and 'Driver DOB'. \ncalculate each driver age in complete years using 'Driver DOB' and today_date\nif Driver DOB is missing or empty in a row return that row with the age as empty\nreturn final output as a table with two columns: 'Driver Name' , 'Age'"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Driver Age@0"
                            }
                        ],
                        "function_id": 17079,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Age",
                "position": 25,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193425": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17080,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Today date",
                "position": 23,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193426": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Data_Merged",
                                "value": "Driver Data Merged"
                            }
                        ],
                        "function_id": 17081,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Drive Type",
                "position": 28,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193427": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Details",
                                "value": "Driver Details"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Age",
                                "value": "Driver Age"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Licence_Tenure",
                                "value": "Driver Licence Tenure"
                            }
                        ],
                        "function_id": 17082,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Data Merged",
                "position": 27,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193428": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Data_Merged",
                                "value": "Driver Data Merged"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Drive_Type",
                                "value": "Drive Type"
                            }
                        ],
                        "function_id": 17083,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Party Table",
                "position": 29,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193429": {
                "data_type": "TEXT",
                "description": "Extract the Excess Type for Accident Damage, such as ADFT or ADFTWS.\nLook for values labeled under \"Excess Type\" or near the Accident Damage section.\nIf no such value is found, return \"N/A\".\n\nOutput:\nReturn either ADFT, ADFTWS, or \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type Accident Damage",
                "position": 31,
                "prompt": "Extract the Excess Type for All Damage, typically labeled as AD, ADFT, or ADFTWS.\n\nInstructions:\n\nLook for values labeled under or near \"Excess Type\", \"All Damage\", \"AD\", \"ADFT\", \"ADFTWS\".\nIf no such value is found, return an empty string \"\".\n\nOutput Format:\nExcess Value: \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193430": {
                "data_type": "TEXT",
                "description": "Extract the Excess Type for Accident Damage generally referred as AD or ADFT or ADFTWS. Look for values labeled under \"Excess Type\" .\nIf no such value is found, return \"N/A\".\n\nOutput:\nReturn excess value if not found retrun \"\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type Fire",
                "position": 30,
                "prompt": "Extract the Excess Type for Fire, typically labeled under fire-related sections.\n\nInstructions:\n\nLook for values labeled under or near \"Fire Excess\", \"Excess Type - Fire\", \"ADFT\", \"ADFTWS\", \"ADF&F\", \"AD&FT\" or similar fire-related descriptions.\n\nIf no such value is found, return an empty string \"\".\n\nOutput Format:\nExcess Value: \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193431": {
                "data_type": "TEXT",
                "description": "Extract the values labeled under \"Excess Type\" for Fire Excess, also referred to as **Excess** or **ADFT** or **ADFTWS**. If no such value is found, return \"N/A\".\n\nOutput:\nReturn excess value if not found retrun \"\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type Theft",
                "position": 32,
                "prompt": "Extract the Excess Type for Theft, typically labeled under theft-related sections.\n\nInstructions:\n\nLook for values labeled under \"Theft Excess\", \"Excess Type - Theft\", \"Theft\", \"ADFT\", \"ADF&T\", \"AD&FT\" or related terms.\nIf no such value is found, return an empty string \"\".\n\nOutput Format:\nExcess Value: \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193432": {
                "data_type": "TEXT",
                "description": "Extract the values labeled under \"Excess Type\" for Fire Excess, also referred to as **Excess** or **ADFT** or **ADFTWS**. If no such value is found, return \"N/A\".\n\nOutput:\nReturn excess value if not found retrun \"\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type WS",
                "position": 33,
                "prompt": "Extract the Excess Type for Windscreen, typically labeled under windscreen-related sections.\n\nInstructions:\n\nLook for values labeled under or near \"Windscreen Excess\", \"Excess Type - Windscreen\", \"Windscreen\", \"ADFTWS\" , \"WS Excess\" or similar terms.\n\nIf no such value is found, return an empty string \"\".\n\nOutput Format:\nExcess Value: \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193433": {
                "data_type": "TEXT",
                "description": "**Vehicle Registration** - This column should contain the registration number (license plate) of each vehicle (e.g., \"AB12 XYZ\", \"XYZ 1234\").",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Return only the extracted data in a list of lists format like below:\n[[\"Vehicle Registration\", \"Cover Vehicle\"], [\"AB12 XYZ\", \"TPO\"], [\"XY99 ZZZ\", \"\"]]\nDo not include explanations, comments, or headings.\nDo not wrap the output in markdown or quote blocks.\n\nIf no valid data is found, return an empty list: [].\n\nAll unrelated or irrelevant content must be excluded from the output."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Vehicle Schedule Data@1"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Effective_From",
                                "value": "Effective From"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Effective_To",
                                "value": "Effective To"
                            }
                        ],
                        "function_id": 17084,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Vehicle Schedule Data",
                "position": 35,
                "prompt": "Your task is to extract a table with two columns: \"Vehicle Registration\" (e.g., \"AB12 XYZ\", \"KL01AB1234\") and \"Cover Vehicle\" (e.g., \"TPO\", \"TPFT\", \"Comprehensive\", \"Comp\").\n\nStep1: Identify valid vehicle registration numbers and their associated cover types.\n\nStep2: Convert all vehicle registration numbers to uppercase.\n\nStep3: If a cover type is not found for a valid registration, include the registration number with an empty string.\n\nStep4: Ignore any entries without valid registration numbers and exclude irrelevant text (e.g., disclaimers or general notes).\n\nOutput Format:\n\n[ [\"Vehicle Registration\", \"Cover Vehicle\"], [\"AB12 XYZ\", \"TPO\"],]\nIf no valid rows found, return [] only.\n\nLet's think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193434": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17085,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Business Category",
                "position": 34,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193435": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Table",
                                "value": "Vehicle Schedule Table"
                            }
                        ],
                        "function_id": 17086,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Vehicle Count From Table",
                "position": 40,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193436": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Number_of_Notifiable_Vehicles",
                                "value": "Vehicle Count From Table"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Target_Price",
                                "value": "Target Price"
                            }
                        ],
                        "function_id": 17087,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Offering Type",
                "position": 42,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193437": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Data",
                                "value": "Vehicle Schedule Data"
                            }
                        ],
                        "function_id": 17088,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Unique_Values_Cover_Basis",
                "position": 36,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193438": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Unique__Values__Cover__Basis",
                                "value": "Unique_Values_Cover_Basis"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "For each value in the list {{\\ Unique_Values_Cover_Basis \\}}, generate a dictionary mapping where each value is normalised to one of the standard cover basis categories. You may receive values in full form (e.g., \"Third Party, Fire and Theft\"), as acronyms (e.g., \"TPFT\", \"TPO\", \"Comp\"), or as variations of known phrases (e.g., \"Comprehensive Cover\", \"Laid Up - Fire &amp; Theft\"). Use the following mapping rules: \"Third Party, Fire and Theft\" or similar \u2192 TPFT, \"Comprehensive\" or similar \u2192 Comp, \"Third Party Only\" or similar \u2192 TPO, \"Laid Up (Accidental Damage, Fire, and Theft)\" or similar \u2192 Laid Up (ADFT), \"Laid Up (Fire and Theft)\" , LUFT or similar \u2192 Laid up (FT Only). Direct acronyms like TPO, TPFT, Comp should map to themselves  exclude LUFT, Since LUFT -&gt; Laid up (FT Only). If a value is irrelevant or does not match any known category, map it to an empty string \"\" Return the output as a dictionary like this: {\u201coriginal value\u201d: mapped category, }"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Cover Basis Mapping@0"
                            }
                        ],
                        "function_id": 17089,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Cover Basis Mapping",
                "position": 37,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193439": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Cover_Basis_Mapping",
                                "value": "Cover Basis Mapping"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Unique__Values__Cover__Basis",
                                "value": "Unique_Values_Cover_Basis"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Data",
                                "value": "Vehicle Schedule Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Effective_From",
                                "value": "Effective From"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Effective_To",
                                "value": "Effective To"
                            }
                        ],
                        "function_id": 17090,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Vehicle Schedule Table",
                "position": 38,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193440": {
                "data_type": "TEXT",
                "description": "Extract the number of vehicles mentioned in the Email.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the vehicle count, otherwise return \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Vehicle Count From Email",
                "position": 39,
                "prompt": "You are an expert at processing vehicle insurance Emails.\n\nYour task is to extract and return the numerical value for number of vehicles explicitly mentioned in the email. Look for phrases such as:\n\n\"Number of vehicles in MID\", \"Number of vehicles in vehicle schedule\", \"Total vehicles listed\", \"Vehicles submitted to MID\",\nor any similar phrasing indicating a specific count of vehicles.\n\nDo not calculate or count vehicle entries manually. Only extract the number if it is clearly and explicitly stated in close proximity to these phrases.\n\nIf no explicit count is mentioned, return \"\".\n\nLet's think step by step.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193441": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Count_From_Email",
                                "value": "Vehicle Count From Email"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Count_From_Table",
                                "value": "Vehicle Count From Table"
                            }
                        ],
                        "function_id": 17091,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Number of Notifiable Vehicles",
                "position": 41,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193442": {
                "data_type": "TEXT",
                "description": "From the provided email content, extract the Agency Code.\n\nThe Agency Code is a 7 digit numeric value.\n\nIt is commonly found in the **email subject** line, often after a hyphen (-) or embedded between other reference numbers.\n\nLook for patterns like:\n[Galelio Number]-[AgencyCode]-[Submission Name]\n\nIt is the second numeric value in a hyphen-separated subject string.\n\nExtract only the numeric Agency Code.\nIf no agency code is found, return an empty string \"\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean **Agency Code**.\n\nIf no Agency Code is found, return \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Agency Code",
                "position": 43,
                "prompt": "Extract the Agency Code from the provided email subject line.\n\nThe Agency Code is a 7-digit numeric value.\n\nIt is commonly found in the email subject.\n\nThe expected format is:\n\n[Galileo Number] \u2013 [Agency Code] \u2013 [Submission Name]\n\nExample:\nQ009258247 - 1169877 - FW EXTERNAL New Motor Fleet Enquiry\n\nSeparators may vary (e.g., hyphens, dashes, or spaces), but the Agency Code is typically the second 7-digit number in the sequence.\n\nExtract the 7-digit number that appears between the Galileo Number and the submission description.\n\nIf no valid Agency Code is found, return an empty string \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193443": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Main_Cover_Type",
                                "value": "Main Cover Type"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Main_cover_type : {{ \\ Main Cover Type \\ }}\n\nValid Normalized Types:\n\n1) COMP \u2192 includes: \"Comp\", \"COMP\", \"Comprehensive\", \"Comprehensive Cover\"\n\n2) TPFT \u2192 includes: \"TPFT\", \"Third Party Fire and Theft\", \"Third Party, Fire and Theft\", \"Third Party Fire &amp; Theft\"\n\n3) TPO \u2192 includes: \"TPO\", \"Third Party Only\", \"Third Party\"\n\n4) Laid up (ADFT) \u2192 includes: \"Laid Up (Accidental Damage, Fire, and Theft)\", \"Laid Up ADFT\", \"Laid-Up ADFT\"\n\n5) Laid up (FT Only) \u2192 includes: \"Laid Up (Fire and Theft)\", \"LUFT\", \"Laid-Up FT\"\n\nInstructions:\n\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\n\nIf matched, return the normalized type exactly as listed above.\n\nIf no valid match, return \"\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type Mapped@0"
                            }
                        ],
                        "function_id": 17092,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type Mapped",
                "position": 44,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193444": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Line_1",
                                "value": "Party Address"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17093,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 2",
                "position": 47,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193445": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17094,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 3",
                "position": 48,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193446": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17095,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Country",
                "position": 49,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193447": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17096,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address State",
                "position": 50,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193448": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17097,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address City",
                "position": 51,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193449": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17098,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Postcode",
                "position": 52,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193450": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17099,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 1",
                "position": 46,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193451": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are an intelligent address extraction assistant.\n\nGiven a full address string {{ \\ Party Address \\}}, extract the following components:\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\nAddress Line 2: Estate, locality, landmark, or additional location detail\nAddress Line 3: Optional detail like block, zone, village, or area\nCity: Town or city name\nState: The state, province, or region\nCountry: Country name\nPostcode: postal code (UK format)\n\nExtraction Rules:\nDo not merge unrelated fields across lines\nDo not confuse postcode with city/state.\nReturn empty strings if any field is missing for that component \n{\n  \"Address Line 1\": \"\",\n  \"Address Line 2\": \"\",\n  \"Address Line 3\": \"\",\n  \"City\": \"\",\n  \"State\": \"\",\n  \"Country\": \"\",\n  \"Postcode\": \"\"\n}"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Party Address Details@0"
                            }
                        ],
                        "function_id": 17100,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Details",
                "position": 45,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193452": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17101,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Trade Descriptions",
                "position": 53,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193453": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Business_Description",
                                "value": "Business Description"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Trade_Descriptions",
                                "value": "Trade Descriptions"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are a domain expert in classifying business descriptions.\n\nYou are given:\n\nTrades_List: { \\ Trade Descriptions \\} \nBusiness_Description: { \\ Business Description \\}\n\nInstructions:\nFor the business description provided:\nCompare it against both the trade names and their aliases in Trades_List.\nDetermine the closest and similar matching **trade**.\nIf no suitable match is found, return \"Fleet - Unclassified\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "AXA Trade Description@0"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Business_Description",
                                "value": "Business Description"
                            }
                        ],
                        "function_id": 17102,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "AXA Trade Description@1"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Trade_Descriptions",
                                "value": "Trade Descriptions"
                            }
                        ],
                        "function_id": 17103,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "AXA Trade Description",
                "position": 54,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193454": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Agency_Name",
                                "value": "Agency Name"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Holding_Broker",
                                "value": "Holding Broker"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "holding_broker: \\ Holding Broker \\\nagency_name: \\ Agency Name \\\n\nComparare `holding_broker` and `agency_name` to determine if they represent the same organization.\n\nRules:\n1. If `holding_broker` is an empty string, return: {\"holding_broker\": \"\", \"basis\": \"Holding broker is empty\"}.\n\n2.If the two names refer to the same or a similar entity \u2014 for example, when they differ only by abbreviations, suffix variations (e.g., \"Ltd\" vs \"Limited\", \"Corp\" vs \"Corporation\"), or extra generic words (e.g., \"Group\", \"Financial\") \u2014 return:\n{\"holding_broker\": \"Yes\", \"basis\": \"Names are similar after normalization\"}\n\n3. If they are different entities, return: {\"holding_broker\": \"No\", \"basis\": \"Names are different after normalization\"}.\n\nSteps:\n- Normalize both names: lowercase, remove legal suffixes (like ltd, corp, inc), and special characters.\n- Then compare using fuzzy similarity or normalized string match.\n\nReturn output strictly in JSON format with keys:\n- `holding_broker`: \"Yes\", \"No\", or \"\"\n- `basis`: explanation of the decision"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Is Holding Broker Details",
                "position": 19,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193455": {
                "data_type": "TEXT",
                "description": "You are given an email content. Identify if the Broker is the Holding Broker using the steps  below. \nReturn only a JSON result in this format:\n{\n  \"holding_broker\": \"<Yes | No | Blank>\",\n  \"source_text\": \"<matched phrase or explanation>\"\n}\n\nStep 1 \u2013 If the email contains (case-insensitive):\n\t\u2022\t\"we hold\"\n\t\u2022\t\"we hold with\"\n\t\u2022\t\"we currently hold\"\n\t\u2022\t\"we are the holding broker\"\n\t\u2022\t\"risk we hold\"\u2028Return:\n{ \"holding_broker\": \"Yes\", \"source_text\": \"<matched phrase>\" }\n\nStep 2 \u2013 If the email contains (case-insensitive):\n\t\u2022\t\"we are attacking this risk\"\n\t\u2022\t\"we are attacking this one\"\n\t\u2022\t\"we are not the holding broker\"\u2028Return:\n{ \"holding_broker\": \"No\", \"source_text\": \"<matched phrase>\" }\n\nStep 3 \u2013 If no match:\u2028Return:\n{ \"holding_broker\": \"\", \"source_text\": \"No identifiable holding broker in statement\" }\n\nLet's think step by step.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the final json output without any additional text."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Is Holding Broker From Context",
                "position": 20,
                "prompt": "You are given an email content. Identify if the Broker is the Holding Broker using the steps  below. \n\nStep 1 \u2013 If the email contains (case insensitive, exact match required):\n\t\u2022\t\"we hold\"\n\t\u2022\t\"we hold with\"\n\t\u2022\t\"we currently hold\" but not fleet, insure\n\t\u2022\t\"we are the holding broker\"\n\t\u2022\t\"risk we hold\" but not by other broker\n\t\u2022\t\"existing client\u201d\n\t\u2022\t\"our client\u201d\n\t\u2022\t\"client of ours\u201d\u2028Return:\n{ \"holding_broker\": \"Yes\", \"source_text\": \"<matched phrase>\" }\n\nStep 2 \u2013 If the email contains (case insensitive, exact match required):\n\t\u2022\t\"we are attacking this risk\"\n\t\u2022\t\"we are attacking this one\"\n\t\u2022\t\"we are not the holding broker\"\n\t\u2022\t\"we hold all lines except fleet\"\u2028Return:\n{ \"holding_broker\": \"No\", \"source_text\": \"<matched phrase>\" }\n\nStep 3 \u2013 If no matches are from Step 1 and Step 2:\u2028Return:\n{ \"holding_broker\": \"\", \"source_text\": \"No identifiable holding broker in statement\" }\n\nLet's think step by step.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            }
        },
        "name": "Email"
    },
    "13543": {
        "description": "",
        "fields": {},
        "name": "Other"
    },
    "13544": {
        "description": "Classify the document as a Broker Presentation if it is a formal, polished report prepared by an insurance broker for underwriting or renewal. It often includes: **Underwriting reports**, \"Fleet rated commercial motor\", \"Motor fleet factfinder\" documents also if they include executive summaries, insured\u2019s business overview, coverage terms, renewal requests, claims history or \u201cClaims Experience,\u201d client details, and general information. Look for professionally formatted tables, structured sections, broker branding, and especially the presence of the word \u201cPresentation\u201d, \"Market Presentation\" or phrases like \u201cPrepared for Underwriters.\u201d\nDo NOT classify as Broker Presentation if the document is a questionnaire or form (e.g., contains multiple questions, blank fields, or checkboxes), is conversational or resembles an email (e.g., \u201cFrom:\u201d, \u201cHi\u201d, \u201cRegards\u201d), or is purely for data collection like Fact Finders.\nEmphasize: Presentation-style, summary reports created by brokers\u2014not informal messages or raw data forms.",
        "fields": {
            "193456": {
                "data_type": "TEXT",
                "description": "Extract the Target Price \u2014 the premium or price the client or broker expects to pay for the insurance policy. sometimes it is implied from previous year\u2019s premium. Just return target price,\nIf no relevant price reference is available, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Extract only the final target premium value.\nIf no valid target premium value is found, return \"\".\nDo not include any label text like \"target premium\" or \"client is looking for\".\nReturn only the clean value."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Target Price@1"
                            }
                        ],
                        "function_id": 17104,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Target Price",
                "position": 0,
                "prompt": "Step 1 \u2013 Identify Base Premium:\nLook for phrases like \u201crenewal terms received\u201d, \u201ctarget at the moment\u201d, \u201cwe would like terms\u201d, \u201clooking for a quote\u201d \u2192 mark as Target_Premium.\n\nstrictly Ignore values with \u201clast year was\u201d, \u201cexpiry premium\u201d,\"last year paid\", \u201ccurrently paying\u201d unless a % change is also mentioned.\n\nIf % change (e.g., \u201c10% increase\u201d) is mentioned with a past premium \u2192 calculate: base \u00b1 % change in Step3\n\nIf two premiums from different insurers \u2192 use the lower one.\nIf no valid target \u2192 return \" \".\n\nStep 2 \u2013 Adjust for IPT:\nIf \u201cincluding IPT\u201d \u2192 divide by 1.12.\nIf \u201c+ IPT\u201d, \u201cexcluding IPT\u201d, or \u201cplus IPT\u201d \u2192 use as-is.\nIgnore commission.\n\nStep 3 \u2013 Apply % Change:\nIf phrases like \u201c10% increase\u201d or \"additional premium\" or \u201cindication is\u2026\u201d appear \u2192 apply change.\n\nOutput:\nCalculated Target Premium: \u00a3[value]\n\nlets think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193457": {
                "data_type": "TEXT",
                "description": "Identify the Agency Enquiry Reference from the broker presentation, which is a code or ID used for tracking the insurance submission. Return only the value. If unavailable, return 'N/A'.",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "DEFAULT",
                "name": "Agency Enquiry Reference",
                "position": 1,
                "prompt": "Task: Extract the Agency Enquiry Reference number from the given document.\n\nFollow these Instructions carefully to extract the Agency Enquiry Reference number:\n\n#Instructions:\n\n1. Read the broker presentation carefully.\n\n2. Look for a value labeled \"Agency Enquiry Reference\" or anything similar (e.g., \"Agency Ref\", \"Enquiry ID\", \"Reference Code\", \"Request for quotation\").\n\n3. This is usually a code or ID used to track the insurance submission.\n\n4. If you find it, extract only the value (not the label or surrounding text).\n\n5. If it\u2019s not available anywhere in the document, return an empty string (\"\").",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193458": {
                "data_type": "TEXT",
                "description": "Identify the Broker Deadline from the broker presentation. This refers to the latest date by which the broker expects a quote or response. Return only the value. If unavailable, return 'N/A'.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return only date without extra information"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Broker Deadline@1"
                            }
                        ],
                        "function_id": 17105,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Broker Deadline",
                "position": 2,
                "prompt": "Extract the Broker Deadline from the email content.\u2028This refers to the date by which a quote is expected from the insurer.\n\nInstructions\nStep 1: Search for relevant deadline phrases\nIdentify dates associated with the following phrases:\nQuote required by\nDeadline\nTarget date\nQuote deadline\nQuote expected by\nNeeded by\nTerms no later than\n\nStep 2: Handle date formats\nIf day, month, and year are present \u2192 return in dd/mm/yyyy format.\u2028Example: \u201cQuote required by 10 January 2025\u201d \u2192 10/01/2025\nIf only day and month are present (no year) \u2192 return in dd/mm format.\u2028Example: \u201cQuote expected by 19 Jan\u201d \u2192 19/01\nDo not infer the year from the email\u2019s received date.\n\nStep 3: Exclude irrelevant dates\nIgnore dates associated with:\nPolicy renewal\nEffective\nExpiry\nDue on\n\nOutput Format\nBroker Deadline Date : <deadline date or \"\">\nFull date: Broker Deadline Date : 10/01/2025\nPartial date: Broker Deadline Date : 10/01\nNo valid date: Broker Deadline Date : \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193459": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17106,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Product",
                "position": 3,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193460": {
                "data_type": "TEXT",
                "description": "Extract the name of the insured, which may be referred to as the policyholder, client name, company name, full client name, or trading name. Return only the name of the person or business insured. If unavailable, return 'N/A'.",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "DEFAULT",
                "name": "Insured",
                "position": 4,
                "prompt": "Extract the name of the insured, which may be referred to as the policyholder, client name, company name, full client name, or trading name. Return only the name of the person or business insured. If unavailable, return ''.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193461": {
                "data_type": "TEXT",
                "description": "Extract the Business Description of the company from the broker presentation. Look for sections titled 'Company Details,' 'General Information,' or similar. Return only the content that explains **Business Description** the company's activities or business nature. If no relevant information is found, return:\nBusiness Description: \"N/A\"\nOtherwise, return in the following format:\nBusiness Description: \"<extracted text>\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean **Business Description**.\n\n- Preserve the complete business activity description as written.\n- Remove any preceding labels such as \"Trade:\", \"Business Description:\", or \"Nature of Business:\"\n- Remove trailing punctuation, line breaks, or filler text.\n\nIf no business description is found, return \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Business Description",
                "position": 5,
                "prompt": "Extract the Business Description of the company from the broker presentation. Look for sections titled **Company Details** , **General Information** or similar. Return only the content that explains **Business Description** or  company's activities or business nature. If no relevant information is found, return:\nBusiness Description: \"\"\nOtherwise, return in the following format:\nBusiness Description: \"<extracted text>\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193462": {
                "data_type": "TEXT",
                "description": "Extract the Agency Name from the broker presentation document.\n\nInstructions:\n\nLook for the name of the brokerage firm or agency responsible for the presentation.\n\nIt is usually found:\n\nOn the cover page, header, or footer of the presentation.\n\nNear the broker contact information or under sections like \u201cOur Team\u201d, \u201cBroker Details\u201d, or \u201cPresented by\u201d.\n\nAlongside the agency logo or in the email signature block if present.\n\nThe agency name is usually a company name (e.g., Marsh Ltd., Gallagher Insurance, Towergate Partnership).\n\nDo not return personal names of broker representatives.\n\nOutput:\nReturn the full Agency Name as a string. If no valid agency name is found, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean **Agency Name** or **Broker Name**.\n\nIf no agency or broker name is found, return \"\"."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Agency Name",
                "position": 6,
                "prompt": "Find the Agency Name in the broker presentation document.\n\nSteps:\n\nStep 1: Look for any prominently displayed branding, logos, or company names on the cover page or header.If an agency name is identified, extract it in the format <Agency Name> : <Value>.\n\nStep 2: If the Agency Name not found in Step 1, identify the  risk management or Insurance brokers or Insurer  that prepared the document. And then Extract Broker name in this format <Broker Name>: <Value>\n\nStep 3: Do not return the client or insured's name.\n\nLet's think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193463": {
                "data_type": "TEXT",
                "description": "Extract the Company House Reference of the insured. This is a unique identifier assigned by Companies House in the UK \u2014 typically an 8-character code, though it can be shorter. Return only value, If no such reference is found , return \"\"N/A\"\"\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the final output company registration number of the insured, otherwise return an empty string: \"\" without any additional text."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Company House Reference Party",
                "position": 7,
                "prompt": "You are expert in analysing vehicle insurance data. Your task is to extract the **company registration** number of the insured/client from the Broker presentation document.\n\nInstructions:\n\nStep-1 : Extract the company registration number of the insured/client, which is typically 8 characters long but can be fewer.\n\nStep-2 : Look for key phrases indicating a registration number, such as:\n\n\u201cCompany Number\u201d\n\n\u201cCompany Registration Number\u201d\n\n\u201cRegistered Number\u201d\n\nor any similar variation\n\nExclusions & Constraints:\n\nStep-3 : Do not extract the company number found in the broker's details or footer.\n\nStep-4 : Only extract the number if it refers specifically to the insured/client.\n\nStep-5 : If no such registration number is found for the client, return an empty string: \"\".\n\nJust return the final output company registration number of the insured, otherwise return an empty string: \"\" without any additional text.\n\nLet's think step by step.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193464": {
                "data_type": "TEXT",
                "description": "Extract the Date Established of the insured \u2014 this refers to the year or full date when the business was founded or incorporated. Return only the value,\nIf the establishment date cannot be found, return \"\"N/A\"\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are an expert in document analysis and date extraction.\nYour task is to extract and normalize a date from the given text.\nInstructions:\nInterpret all date formats strictly as day/month/year (DD/MM/YYYY), regardless of how the date appears in the text. The first number is always the day, second is the month, third is the year.\nNormalize and return the date in the format: DD/MM/YYYY (zero-padded).\nIf only a year is present (e.g. \"2020\"), return it as 01/01/YYYY.\nIf a month and year are present (e.g. \"March 2020\" or \"03/2020\"), return it as 01/MM/YYYY.\nIf a full day, month, and year are present, return the exact date in DD/MM/YYYY format.\nReturn only the extracted value (no label or explanation in output).\nIf no valid establishment date is found, return exactly: \"\" (empty string, without quotes).\nExamples:\nExample 1:\nText: The business was founded in 2021.\nOutput: 01/01/2021\nExample 2:\nText: Established: March 2020.\nOutput: 01/03/2020\nExample 3:\nText: Policy effective from 5/11/2023 for one year.\nOutput: 05/11/2023\nExample 4:\nText: Driver's licence issue date: 14-6-90, valid for 10 years.\nOutput: 14/06/1990\nExample 5:\nText: Vehicle registration expires on 01.12.2025.\nOutput: 01/12/2025\nExample 6:\nText: Renewal date: \"\"\nOutput: \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Date Established",
                "position": 8,
                "prompt": "Extract the Date Established of the insured \u2014 this refers to the year or full date when the business was founded or incorporated. Look for similar phrases such as:\n\nYear business established\nEstablished Year\n\nReturn only the extracted value.\nIf no establishment date is found, return \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193465": {
                "data_type": "TEXT",
                "description": "Extract the Insured Address from the document.\n\nIt is usually found under the Client Details and General Information or Client Profile section.\n\nIgnore other addresses like broker, branch, or claimant addresses.\n\nReturn the full address as one line. If not found, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Clean and return **only the address details**. This means:\n- Preserve the physical address lines.\n- Format it as a single clean string separated by commas.\n- If no valid address is present, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address",
                "position": 9,
                "prompt": "Extract the Party Address (also known as the Insured Address/ Correspondence Address / Trading Address) from the document.\n\nInstructions:\nIt is often found under the below section:\n**Client Details and General Information**, **Client Profile**, **Company Details**\n\nIgnore unrelated addresses (e.g., branch, broker, or claimant addresses).\n\nReturn the complete address exactly as a string from the document, without omitting or reformatting any part.\n\nOutput:\n\nReturn the full Party Address as a string. If no valid address is found, return \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193466": {
                "data_type": "TEXT",
                "description": "Extract the Inception Date \u2014 the date the insurance policy is set to begin.\nIt may also be referred to as \"Effective Date\", \"Start Date\", or \"Incepts On\".\nDo not return the Renewal Date.\nIf no relevant start date is found, return \"N/A\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Check Format: If date is already in the dd/mm/yyyy format, return it as is.\nStandardize Date: If the date is in a different valid format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy. return cleaned date without any extra text and quotations.\nInvalid Dates: If input_date is missing, empty, or not a valid date, return an empty string \"\""
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Incepts On",
                "position": 10,
                "prompt": "The inception date may be referred to (case-insensitive) using the following labels only , followed by a date:\nPolicy Inception Date, Inception Date, Effective Date, Start Date, Period of Insurance, Renewal Date, Renewal On, or Incepts On.\n\nApply the following rules strictly:\n\nDo not extract any general or standalone date \u2014 only extract dates that immediately follow a valid label\n\nIf multiple \"Period of Insurance\" date ranges appear, extract the start date from the range that is nearest to the heading **\"Motor Fleet\"** (or a similar heading). If no such heading is found, default to the latest date range.\n\nIf multiple valid labels are present prioritize the Policy Inception Date.\nExtract only one date per document \u2014 the most relevant based on the above priority.\n\nDo not extract dates labeled as Survey Date, Quotation Date, Deadline Date, Next Renewal Date, Policy Expiry Date, or any general Date without a valid label.\n\nIf the date appears without a year (e.g., only DD/MM), return it in DD/MM format only with out extra text.\n\nIf the date includes day, month, and year, return in DD/MM/YYYY ormat only with out extra text.\n\nIf no valid inception-related date is found, return an empty string: \"\".",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193467": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            }
                        ],
                        "function_id": 17107,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Expires On",
                "position": 11,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193468": {
                "data_type": "TEXT",
                "description": "Extract the Main Cover Type from the input. This refers to the level of motor insurance cover requested or provided (e.g., 'Comprehensive', 'Third Party Only', 'TPFT'). This information is usually found under headers like 'Cover Basis', 'Cover', or similar. Return only the cover type. If no valid cover type is found, return 'N/A'",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "If excess values are given for each vehicle group, return the most common cover type value.\n\nIf excess values are given for different periods, return the most recent period cover value .\n\nIf a single value is extracted (not linked to group or period), return just the cover type ."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type@1"
                            }
                        ],
                        "function_id": 17108,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type",
                "position": 12,
                "prompt": "Extract the Cover basis (also referred to as Cover Type) from the document using the following rules:\n\n**Valid_cover_types** includes: \n- \"Comprehensive(COMP)\" (also treat \"Comp\", \"COMP\", \"Comprehensive\" as equivalent to this)\n- \"Third Party Fire and Theft(TPFT)\" (include variations like \"TPFT\", \"Third Party Fire & Theft\")\n- \"Third Party Only(TPO)\" (include \"TPO\", \"Third Party\")\n- \"Laid up ADFT\"\n- \"Laid up FT\"\n\nIf a \"Claims Experience\" section is found, extract the Cover Type from the most recent period mentioned in that section.\n\u2023 Format: <period range>:<cover type>\n\nIf the section is not found, but cover types are listed for each vehicle group, extract them.\n\u2023 Format: <vehicle group>:<cover type> (comma-separated if multiple)\n\nIf neither is found, but a standalone Cover Type is mentioned (not in a section or group), extract the most recent or most relevant one.\n\u2023 Format: AD Cover:<cover type>\n\nReturn only the final output. No explanations.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193469": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "insured_address: {{ \\ Party Address \\}}\n\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\n\nIf no post code is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Risk Postcode",
                "position": 13,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193470": {
                "data_type": "TEXT",
                "description": "Extract the Accidental Damage Excess value (also referred to as ADFT or AD) from the document using the following rules:\n\nIf a \"Claims Experience\" section is found, extract the Accidental Damage Excess value from the most recent period mentioned in that section.\n\u2023 Format: <period range>:<excess value>\n\nIf the section is not found, but excess values are listed for each vehicle group, extract them.\n\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nIf neither is found, but a standalone Accidental Damage Excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\n\u2023 Format: AD Excess:<excess value>\n\n\nReturn only the final output. No explanations.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "If excess values are given for each vehicle group, return the most common value as:\nExcess Value: <value>\n\nIf excess values are given for different periods, return the most recent period and its value as:\n<period range>:<value>\n\nIf a single excess value is extracted (not linked to group or period), return it directly as:\nExcess Value: <value>"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the numerical value if present, otherwise return \"0\""
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Excess Type Accident Damage",
                "position": 14,
                "prompt": "Extract the Accidental Damage Excess value (also referred to as ADFT or AD) from the document using the following steps: \n\nSteps :\nStep 1: Check for accidental damage excess values, also known as ADFT or AD, which are listed for each vehicle group. Extract them in this format: <vehicle group>:<excess value> (comma-separated if there are multiple).\n\nStep 2: If excess values not found in Step 1, but a standalone Accidental Damage Excess value is mentioned (not in a section or group), extract the most recent or most relevant one in this Format: AD Excess:<excess value>\n\nLet's think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193471": {
                "data_type": "TEXT",
                "description": "Extract the Fire & theft excess (\u00a3)  value (also referred to as ADFT or FT) from the document using the following rules:\n\nIf a \"Claims Experience\" section is found, extract the Fire & theft excess Excess value from the most recent period mentioned in that section.\n\u2023 Format: <period range>:<excess value>\n\nIf the section is not found, but Fire & theft excess values are listed for each vehicle group, extract them.\n\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nIf neither is found, but a standalone Fire & theft excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\n\u2023 Format: FT Excess:<excess value>\n\n\nReturn only the final output. No explanations.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "If excess values are given for each vehicle group, return the most common value as:\nExcess Value: <value>\n\nIf excess values are given for different periods, return the most recent period and its value as:\n<period range>:<value>\n\nIf a single excess value is extracted (not linked to group or period), return it directly as:\nExcess Value: <value>"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the numerical value if present, otherwise return \"0\""
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Excess Type Fire",
                "position": 15,
                "prompt": "Extract the Fire excess (\u00a3) value (also referred to as ADFT or FT) from the document using the following steps: \n\nSteps :\nStep 1: Check for Fire & theft excess values (also referred to as ADFT or FT) which are listed for each vehicle group, extract them in this Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nStep 2:  If excess values not found in Step 1, but a standalone Fire & theft excess value (also referred to as ADFT or FT) is mentioned (not in a section or group), extract the most recent or most relevant one in this Format: FT Excess:<excess value>\n\nLet's think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193472": {
                "data_type": "TEXT",
                "description": "Extract the Theft excess (\u00a3)  value (also referred to as ADFT or FT) from the document using the following rules:\n\nIf a \"Claims Experience\" section is found, extract the Fire & theft excess Excess value from the most recent period mentioned in that section.\n\u2023 Format: <period range>:<excess value>\n\nIf the section is not found, but Fire & Theft excess  values are listed for each vehicle group, extract them.\n\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nIf neither is found, but a standalone Theft Excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\n\u2023 Format: Theft Excess:<excess value>\n\n\nReturn only the final output. No explanations.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "If excess values are given for each vehicle group, return the most common value as:\nExcess Value: <value>\n\nIf excess values are given for different periods, return the most recent period and its value as:\n<period range>:<value>\n\nIf a single excess value is extracted (not linked to group or period), return it directly as:\nExcess Value: <value>"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the numerical value if present, otherwise return \"0\""
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Excess Type Theft",
                "position": 16,
                "prompt": "Extract the Theft excess (\u00a3) value (also referred to as ADFT or FT) from the document using the following steps: \n\nSteps :\nStep 1: Check for Fire & theft excess values (also referred to as ADFT or FT) which are listed for each vehicle group, extract them in this Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nStep 2:  If excess values not found in Step 1, but a standalone Fire & theft excess value (also referred to as ADFT or FT) is mentioned (not in a section or group), extract the most recent or most relevant one in this Format: FT Excess:<excess value>\n\nLet's think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193473": {
                "data_type": "TEXT",
                "description": "Extract the **Windscreen excess (\u00a3)** value (also referred to as ADFTWS or WS) from the document using the following rules:\n\nIf a \"Claims Experience\" section is found, extract the Windscreen excess value from the most recent period mentioned in that section.\n\u2023 Format: <period range>:<excess value>\n\nIf the section is not found, but Windscreen excess values are listed for each vehicle group, extract them.\n\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nIf neither is found, but a standalone Windscreen Excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\n\u2023 Format:WS Excess:<excess value>\n\n\nReturn only the final output. No explanations.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "If excess values are given for each vehicle group, return the most common value as:\nExcess Value: <value>\n\nIf excess values are given for different periods, return the most recent period and its value as:\n<period range>:<value>\n\nIf a single excess value is extracted (not linked to group or period), return it directly as:\nExcess Value: <value>"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the numerical value if present, otherwise return \"0\""
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Excess Type WS",
                "position": 17,
                "prompt": "Extract the **Windscreen excess (\u00a3)** value (also referred to as ADFTWS or WS or Glass Excess) from the document using the following steps:\n\nSteps :\nStep 1: Check for Windscreen excess values (also referred to as ADFTWS or WS or Glass Excess) which are listed for each vehicle group, extract them in this Format: <vehicle group>:<excess value> (comma-separated if multiple)\n\nStep 2:  If excess values not found in Step 1, but a standalone Windscreen Excess value (also referred to as ADFTWS or WS or Glass Excess) is mentioned (not in a section or group), extract the most recent or most relevant one in this Format:WS Excess:<excess value>\n\nLet's think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193474": {
                "data_type": "TEXT",
                "description": "Extract the Agency Address, which refers to the full address of the insurance agency or broker involved in the policy.\nIf no address details are found, return \"N/A\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Clean and return **only the address details**. This means:\n- Preserve the physical address lines.\n- Format it as a single clean string separated by commas.\n- If no valid address is present, return \"\"."
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Agency address",
                "position": 18,
                "prompt": "You are an expert in Insurance underwriting. Your task is to extract the correct Agency Address from the OCR-processed Broker Presentation.\n\nFollow the instructions carefully:\n\n1) The Agency Address refers to the address of the insurance broker, intermediary, or agent responsible for managing or placing the insurance policy.\n\n2) This address is typically associated with organisations such as Gallagher, UBT, Arthur J. Gallagher, etc.\n\n3) Look for addresses that are directly linked to broker personnel (e.g., account managers, account directors, insurance advisors) or company names known to be brokers/intermediaries.\n\n4) Also consider any address that follows the keywords \"Produced by\" or \"Prepared by\" on the first page of the document.\n\n5) Exclude all addresses related to the insured party. For clarity, this includes any address listed as or associated with:\n\nPolicyholder\n\nClient (business or trading)\n\nInsured\n\nCorrespondence\n\nReturn the complete address exactly as it appears in the document, without omitting or reformatting any part.\n\nIf no agency/broker address is identified, return an empty string: \"\"\n\nOutput Format:\nA single string containing the agency\u2019s physical address, or \"\" if not found.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193475": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            }
                        ],
                        "function_id": 17109,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Effective From",
                "position": 19,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193476": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Expires_On",
                                "value": "Expires On"
                            }
                        ],
                        "function_id": 17110,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Effective To",
                "position": 20,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193477": {
                "data_type": "TEXT",
                "description": "Extract the value associated with \"Holding Broker\" from the given text. Only return the value if it is explicitly labeled as \"Holding Broker\" (case-insensitive). Do not infer or guess the broker name if the label is not clearly mentioned. Return \"N/A\" if \"Holding Broker\" is not found",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Holding Broker@0"
                            }
                        ],
                        "function_id": 17111,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Holding Broker",
                "position": 21,
                "prompt": "Task: Extract the value associated with the Holding Broker from the given text.\n\nRules:\n1. Only extract the value if it is explicitly labeled as one of the following (case-insensitive):\n   - \"Holding Broker\"\n   - \"Current Broker\"\n\n2. Return the value exactly as written after the label (e.g., after \"Holding Broker:\").\n\n3. Do not infer, guess, or extract any value unless one of the exact labels above is found.\n\n4. If none of the specified labels are present, return an empty string \"\".\n\n5. Do not Extract Holding Broker from the label like Broker name, Holding Insurers.\n\nOutput format:\n\nAlways return result as JSON:\n\n{\n  \"holding_broker\": \"<name or blank>\",\n  \"source_text\": \"<the phrase that triggered your decision>\"\n}",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193478": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Agency_Name",
                                "value": "Agency Name"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Holding_Broker",
                                "value": "Holding Broker"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "holding_broker: \\ Holding Broker \\\nagency_name: \\ Agency Name \\\n\nComparare `holding_broker` and `agency_name` to determine if they represent the same organization.\n\nRules:\n1. If `holding_broker` is an empty string, return: {\"holding_broker\": \"\", \"basis\": \"Holding broker is empty\"}.\n\n2. If the two names refer to the same or a similar entity \u2014 for example, when they differ only by abbreviations, suffix variations (e.g., \"Ltd\" vs \"Limited\", \"Corp\" vs \"Corporation\"), or extra generic words (e.g., \"Group\", \"Financial\") \u2014 return:\n{\"holding_broker\": \"Yes\", \"basis\": \"Names are similar after normalization\"}\n\n3. If they are different entities, return: {\"holding_broker\": \"No\", \"basis\": \"Names are different after normalization\"}.\n\nSteps:\n- Normalize both names: lowercase, remove legal suffixes (like ltd, corp, inc), and special characters.\n- Then compare using fuzzy similarity or normalized string match.\n\nReturn output strictly in JSON format with keys:\n- `holding_broker`: \"Yes\", \"No\", or \"\"\n- `basis`: explanation of the decision"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Is Holding Broker@0"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Holding_Broker",
                                "value": "Holding Broker"
                            }
                        ],
                        "function_id": 17112,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Is Holding Broker",
                "position": 22,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193479": {
                "data_type": "OBJECT_LIST",
                "description": "Your task is to scan every page of the Broker presentation thoroughly and extract all driver-related details or related terms like Primary Driver, Secondary Driver, Additional Driver, Listed Driver, Young Driver, Convicted Driver etc.\n\nAnalyze the details under all headers sections and extract all the **Driver** related details.\n\nInstructions:\nStep 1: Identify Driver Sections\n-->Analyze the context under each heading and check if driver related information(Ex : Driver names, Driver claims) is present.\nStep 2: Extract the following information for each driver\n-->Driver Name \u2013 Full name of the driver (Ex:'Williams').\n-->Driver Date of Birth (DOB) \u2013 The driver's date of birth in the format it appears.\n-->Driver Licence Date \u2013 Date when the license obtained. This is not the same as \"Date of conviction\".\n-->Driver Claims - Extract the claim for the driver if mentioned.\nStep 3: Match and Group Details\nEnsure that for every driver found, the corresponding Name, DOB, and Licence Date are correctly grouped.\nLet's think step by step.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Driver Details@0"
                            }
                        ],
                        "function_id": 17113,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Driver Details",
                "position": 24,
                "prompt": "Driver Details",
                "prompt_schema": [
                    {
                        "description": "Extract only the valid driver names, do not extract irrelevant text as driver's name. Extract all driver names from the entire document.",
                        "name": "Driver Name"
                    },
                    {
                        "description": "-->If the date is already in dd/mm/yyyy format, keep it as is.\n-->If only the year is provided (e.g., 1990), default to 01/01/yyyy.\n-->If month and year are provided (e.g., March 1990), default to 01/mm/yyyy.\n-->Ensure all output DOBs are returned in dd/mm/yyyy format.",
                        "name": "Driver DOB"
                    },
                    {
                        "description": "1. If the date is already in **dd/mm/yyyy** format, keep it unchanged.\n2. If only the **year** is given (e.g., \"1990\"), return the DOB as **01/01/1990**.\n3. If **month and year** are provided (e.g., \"March 1990\" or \"03/1990\"), return the DOB as **01/03/1990**.\n4. If the date is written in a textual format like \"2nd March 1990\" or \"March 2, 1990\", convert it to **02/03/1990**.\n5. Return all DOBs in **dd/mm/yyyy** format with **leading zeros** for day and month if needed.\n\nExamples:\n- \"1990\" \u2192 \"01/01/1990\"\n- \"March 1990\" \u2192 \"01/03/1990\"\n- \"2nd March 1990\" \u2192 \"02/03/1990\"\n- \"02/03/1990\" \u2192 \"02/03/1990\"\n- \"Mar 1990\" \u2192 \"01/03/1990\"",
                        "name": "Licence Date"
                    },
                    {
                        "description": "Extract all the conviction codes for each driver, such as 'SP-30', 'IN 10', or 'TS10' and give them as a comma separated list.",
                        "name": "Conviction Code"
                    },
                    {
                        "description": "Extract the claim details of the drivers if they are mentioned. Do not consider Reason for referral or notice as Driver claims.",
                        "name": "Driver Claims"
                    }
                ],
                "prompt_type": "basic"
            },
            "193480": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Todays_Date",
                                "value": "Todays Date"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Name_And_Driver_DOB",
                                "value": "Driver Name And Driver DOB"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are given the  \\ Driver Name And Driver DOB \\ table containing two columns: 'Driver Name' and 'Driver DOB'.\n\nYour task is to calculate the age of each driver using the Driver DOB and \\ Todays Date \\\n\nThe age should be calculated in complete years.\nIf Driver DOB is missing, empty, or invalid, the corresponding Age must be left blank (empty string).\n\nReturn the output strictly as a table with exactly two columns:\nOutput Format:\n[[\"Driver Name\", \"Age\"],[],[]]\nStrictly return a **table formatted output** in a structured list of list format as specified above."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Driver Age@0"
                            }
                        ],
                        "function_id": 17114,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Age",
                "position": 26,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193481": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17115,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Todays Date",
                "position": 23,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193482": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Todays_Date",
                                "value": "Todays Date"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Name_And_Licence_Date_Info",
                                "value": "Driver Name And Licence Date Info"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are given the \\ Driver Name And Licence Date Info \\ table containing two columns: 'Driver Name' and 'Driver Licence date'.\n\nYour task is to calculate the Licence tenure of each driver using the \"Licence date\" and \"\\ Todays Date \\\"\n\nThe Licence Tenure should be calculated in complete years.\nIf Licence date is missing, empty, or invalid, the corresponding Licence Tenure must be left blank (empty string).\n\nReturn the output strictly as a table with exactly two columns:\nOutput Format:\n[[\"Driver Name\", \"Licence Tenure\"],[],[]]\nStrictly return a **table formatted output** in a structured list of list format as specified above."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Driver Licence Tenure@0"
                            }
                        ],
                        "function_id": 17116,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Licence Tenure",
                "position": 28,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193483": {
                "data_type": "TEXT",
                "description": "Scan each and every page of the document and extract cover basis type along with the alphanumeric vehicle registration numbers which includes unregistered vehicle numbers as well present under the vehicle group.\n\nOutput Format : \n\nEx : 1) Vehicle group Name : <Vehicle group Name>\n          -- Cover Basis : <Cover Basis Type>\n          -- Registration Numbers : <Alphanumeric                      registration numbers or N/A>",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "ADVANCED",
                "name": "Vehicle Category Info and Registration Numbers",
                "position": 32,
                "prompt": "Your task is to thoroughly scan each and every page of the document and extract structured information for each vehicle group.\n\nEach vehicle group will have:\n\n--> A Vehicle Group Name\n--> A Cover Basis (e.g., Comprehensive, TPO, TPFT, etc.)\n--> One or more Vehicle Registration Numbers, which may include:\n        -->Alphanumeric registration numbers (e.g., \"TN01AB1234\", \"MH12XY9999\")\n        -->Unregistered vehicles (e.g., \u201cUNREGISTERED VEHICLE\u201d, \u201cTBA\u201d, \u201cN/A\u201d, etc.)\n        -->Include Serial/chassis number \n        -->Include the vehicle registration number for excluded drivers.\n--> Keep duplicate Vehicle Registration numbers as well. Do not change the order of Vehicle Registrations\u2014maintain the same order as in the document.\n\nOutput Format : \n\nEx : 1) Vehicle group Name : <Vehicle group Name>\n          -- Cover Basis : <Cover Basis or N/A>\n          -- Registration Numbers : <Alphanumeric registration numbers or N/A>",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193484": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Category_Info_and_Registration_Numbers",
                                "value": "Vehicle Category Info and Registration Numbers"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Extract a table with two columns: ['Vehicle Registration', 'Cover Basis'] from \\ Vehicle Category Info and Registration Numbers \\\n\t1\tFind valid vehicle registration numbers and their cover types.\n\t2\tConvert all vehicle registration numbers to UPPERCASE. Keep Cover Basis as is.\n\t3\tIf cover type is missing for a valid reg number, use an empty string (\"\").\n\t4\tRemove rows where vehicle registration is: \"To be confirmed (TBC)\", \"TO BE ADVISED from\", \"UNREG\" or Similar meaning, or not a vehicle registration number,  \"N/A\", Empty (\"\").\n\t5\tIf 'Cover Basis' is \"N/A\", replace it with an empty string (\"\").\nReturn format:\u2028[[\"Vehicle Registration\", \"Cover Basis\"], [\"AB12 XYZ\", \"TPO\"]]\u2028If no valid rows, return [] only."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Vehicle Registration Numbers And Cover Basis@0"
                            }
                        ],
                        "function_id": 17117,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Vehicle Registration Numbers And Cover Basis",
                "position": 33,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193485": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Age",
                                "value": "Driver Age"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Licence_Tenure",
                                "value": "Driver Licence Tenure"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Details",
                                "value": "Driver Details"
                            }
                        ],
                        "function_id": 17118,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Merged Data",
                "position": 29,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193486": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Merged_Data",
                                "value": "Driver Merged Data"
                            }
                        ],
                        "function_id": 17119,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Type",
                "position": 30,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193487": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Registration_Numbers_And_Cover_Basis",
                                "value": "Vehicle Registration Numbers And Cover Basis"
                            }
                        ],
                        "function_id": 17120,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Unique_Values_Cover_Basis",
                "position": 34,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193488": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Unique__Values__Cover__Basis",
                                "value": "Unique_Values_Cover_Basis"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "For each value in the list {{\\ Unique_Values_Cover_Basis \\}}, generate a dictionary mapping where each value is normalised to one of the standard cover basis categories. You may receive values in full form (e.g., \"Third Party, Fire and Theft\"), as acronyms (e.g., \"TPFT\", \"TPO\", \"Comp\"), or as variations of known phrases (e.g., \"Comprehensive Cover\", \"Laid Up - Fire &amp; Theft\"). Use the following mapping rules: \"Third Party, Fire and Theft\" or similar \u2192 TPFT, \"Comprehensive\" or similar \u2192 Comp, \"Third Party Only\" or similar \u2192 TPO, \"Laid Up (Accidental Damage, Fire, and Theft)\" or similar \u2192 Laid Up (ADFT), \"Laid Up (Fire and Theft)\" , LUFT or similar \u2192 Laid up (FT Only). Direct acronyms like TPO, TPFT, Comp should map to themselves exclude LUFT, Since LUFT -&gt; Laid up (FT Only). If a value is irrelevant or does not match any known category, map it to an empty string \"\" Return the output as a dictionary like this: {\u201coriginal value\u201d: mapped category, }"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Cover Basis Mapping@0"
                            }
                        ],
                        "function_id": 17121,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Cover Basis Mapping",
                "position": 35,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193489": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Registration_Numbers_And_Cover_Basis",
                                "value": "Vehicle Registration Numbers And Cover Basis"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Unique__Values__Cover__Basis",
                                "value": "Unique_Values_Cover_Basis"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Cover_Basis_Mapping",
                                "value": "Cover Basis Mapping"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Effective_From",
                                "value": "Effective From"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Effective_To",
                                "value": "Effective To"
                            }
                        ],
                        "function_id": 17122,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Vehicle Schedule Table",
                "position": 36,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193490": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Table",
                                "value": "Vehicle Schedule Table"
                            }
                        ],
                        "function_id": 17123,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Number of Notifiable Vehicles",
                "position": 37,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193491": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Target_Price",
                                "value": "Target Price"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Number_of_Notifiable_Vehicles",
                                "value": "Number of Notifiable Vehicles"
                            }
                        ],
                        "function_id": 17124,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Offering Type BP",
                "position": 38,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193492": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17125,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Transaction Type",
                "position": 40,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193493": {
                "data_type": "TEXT",
                "description": "Extract the Agency Contact \u2014 this is the name of the person who sent the email.\n\nInstructions:\n\nLook for the sender\u2019s name in the email body, especially near the signature section at the end of the email.\n\nReturn only the full name of the person (e.g., John Smith).\n\nDo not return any email addresses, phone numbers, or job titles.\n\nIf no name is found, return \"N/A\"",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "DEFAULT",
                "name": "Agency Contact",
                "position": 39,
                "prompt": "Extract the Agency Contact \u2014 the name of the person who submitted the broker presentation.\n\nInstructions:\n\nSearch the presentation for the sender\u2019s full name, typically found on the cover page, in a \u201cPrepared by\u201d \u201cContact\u201d, \"presenated by\", \"Produced by\" or \u201cSubmitted by\u201d section, or near the footer/header. Look for labels like Contact, Broker Contact, Point of Contact, or Prepared by.\n\nReturn only the full name (e.g., \"John Smith\" or \"Emma-Jane Clarke\").\n\nIf only a first or last name is present, return it as-is.\n\nIf no valid name is found, return \"\".",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193494": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Merged_Data",
                                "value": "Driver Merged Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Type",
                                "value": "Driver Type"
                            }
                        ],
                        "function_id": 17126,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Party Table",
                "position": 31,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193495": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17127,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Business Category",
                "position": 41,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193496": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Details",
                                "value": "Driver Details"
                            }
                        ],
                        "function_id": 17128,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Name And Driver DOB",
                "position": 25,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193497": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Driver_Details",
                                "value": "Driver Details"
                            }
                        ],
                        "function_id": 17129,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Driver Name And Licence Date Info",
                "position": 27,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193498": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17130,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Country",
                "position": 47,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193499": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17131,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address City",
                "position": 49,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193500": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17132,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address State",
                "position": 48,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193501": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Main_Cover_Type",
                                "value": "Main Cover Type"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Main_cover_type : {{ \\ Main Cover Type \\ }}\n\nValid Normalized Types:\n\n1) COMP \u2192 includes: \"Comp\", \"COMP\", \"Comprehensive\", \"Comprehensive Cover\"\n\n2) TPFT \u2192 includes: \"TPFT\", \"Third Party Fire and Theft\", \"Third Party, Fire and Theft\", \"Third Party Fire &amp; Theft\"\n\n3) TPO \u2192 includes: \"TPO\", \"Third Party Only\", \"Third Party\"\n\n4) Laid up (ADFT) \u2192 includes: \"Laid Up (Accidental Damage, Fire, and Theft)\", \"Laid Up ADFT\", \"Laid-Up ADFT\"\n\n5) Laid up (FT Only) \u2192 includes: \"Laid Up (Fire and Theft)\", \"LUFT\", \"Laid-Up FT\"\n\nInstructions:\n\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\n\nIf matched, return the normalized type exactly as listed above.\n\nIf no valid match, return \"\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type Mapped@0"
                            }
                        ],
                        "function_id": 17133,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type Mapped",
                "position": 42,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193502": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17134,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 2",
                "position": 45,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193503": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17135,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 3",
                "position": 46,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193504": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17136,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Postcode",
                "position": 50,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193505": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17137,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 1",
                "position": 44,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193506": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are an intelligent address extraction assistant.\n\nGiven a full address string {{\\ Party Address \\}}, extract the following components:\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\nAddress Line 2: Estate, locality, landmark, or additional location detail\nAddress Line 3: Optional detail like block, zone, village, or area\nCity: Town or city name\nState: The state, province, or region\nCountry: Country name\nPostcode: postal code (UK format)\n\nExtraction Rules:\nDo not merge unrelated fields across lines\nDo not confuse postcode with city/state.\nReturn empty strings if any field is missing for that component \n{\n  \"Address Line 1\": \"\",\n  \"Address Line 2\": \"\",\n  \"Address Line 3\": \"\",\n  \"City\": \"\",\n  \"State\": \"\",\n  \"Country\": \"\",\n  \"Postcode\": \"\"\n}"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Party Address Details@0"
                            }
                        ],
                        "function_id": 17138,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Details",
                "position": 43,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193507": {
                "data_type": "OBJECT_LIST",
                "description": "Task: Extract Excess Details and Cover Information for each valid Period from the document.\n\nInstructions:\nIdentify and extract rows where Period represents a valid policy period \u2014 typically expressed as either a range of years (e.g., \u201c2020\u20132021\u201d) or a date range (e.g., \u201c01/01/2021 \u2013 31/12/2021\u201d).\n\nField Extraction:\nLook for the following fields (column names may vary slightly):\n* Period\n* Accident Damage (AD) Excess \u2013 may appear as ADFT, ADFTWS, or similar variants\n* Fire Excess  \n* Theft Excess\n* WS Excess - ADFTWS, WS\n* Cover in Period\n\nInclusion Criteria:\n* Include a row only if both Period and Cover in Period are present.\n* Do not exclude rows if any of the excess fields are missing \u2014 for such cases, output those fields as empty strings ('').\n\nData Cleaning:\n* Remove any currency symbols (e.g., \u00a3) from the excess values.\n* Remove any thousands separators (e.g., 1,000 \u2192 1000) if present.",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "ADVANCED",
                "name": "Excess List",
                "position": 51,
                "prompt": "Excess List",
                "prompt_schema": [
                    {
                        "description": "",
                        "name": "Period"
                    },
                    {
                        "description": "If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value. If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value.\n\nIf ADFT is not found, return the AD ( Accident and Damage) excess value.\n\nIf neither is available, return '0'",
                        "name": "AD Excess"
                    },
                    {
                        "description": "If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.  If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value.\n\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\n\nIf neither is available, return '0'",
                        "name": "Fire Excess"
                    },
                    {
                        "description": "If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.      If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value.\n\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\n\nIf neither is available, return '0'",
                        "name": "Theft Excess"
                    },
                    {
                        "description": "Wind screen excess value , If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value. If an WS (wind storm) excess is available, return only that value. If data is not available, return '0'",
                        "name": "WS Excess"
                    },
                    {
                        "description": "The cover type may appear as one of the following:\n\nComprehensive or Comp\nThird Party\nTPO (Third Party Only)\nTPFT (Third Party, Fire and Theft)\n\nReturn the exact label as it appears in the document.\n\nIf multiple cover types are mentioned, return all distinct types.\n\nIf no cover type is found, or if you see some relevent text like \"Not Insured\", return \"\", don't return irrelevent data",
                        "name": "Cover On Policy"
                    }
                ],
                "prompt_type": "basic"
            },
            "193508": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            }
                        ],
                        "function_id": 17139,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Unique Values in Cover On Policy",
                "position": 52,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193509": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Unique_Values_in_Cover_On_Policy",
                                "value": "Unique Values in Cover On Policy"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "For each row in the list {{ \\ Unique Values in Cover On Policy \\ }}, generate a dictionary mapping with the original value mapped to a category based on cover types.\n\n**Valid_cover_types**: \n- \"Comprehensive(COMP)\" (also treat \"Comp\", \"COMP\", \"Comprehensive\" as equivalent to this)\n- \"Third Party Fire and Theft(TPFT)\" (include variations like \"TPFT\", \"Third Party Fire &amp; Theft\")\n- \"Third Party Only(TPO)\" (include \"TPO\", \"Third Party\")\n- \"Laid up ADFT\"\n- \"Laid up FT\"\n- \"Mixed Cover\"\n\n**Mapping Rules**:\n1) If all values in a row (after normalization) are Comprehensive(COMP) \u2192 map to \"All Comprehensive\"\n(This must include variations like \u201cComp\u201d, \u201cCOMP\u201d, \u201cComprehensive\u201d as meaning \"Comprehensive(COMP)\")\n\n2) If all values in a row are Third Party Fire and Theft(TPFT) \u2192 map to \"All Third Party Fire and Theft\"\n\n3) If values are Third Party Only(TPO) \u2192 map to \"All Third Party Only\"\n\n4) If the row contains Comprehensive(COMP) (or its variations) along with other valid cover types \u2192 map to \"Mixed cover including Comprehensive\"\n\n5) If the row contains more than one valid cover type present in Valid_cover_types excluding Comprehensive(COMP) \u2192 map to \"Mixed cover excluding Comprehensive\"\n\n6) If any value in the row is not part of the Valid_cover_types or their known variations, map the entire row to \"\" (empty string). For example, the text \"Insurance company\" is not present in Valid_cover_types, so map it to \"\" (empty string).\n\nExample Output Format :\n\nInput : [\n             \"TPO, TPFT\",\n             \"Comp, TPFT\",\n             \"Comp, Comp\", \n              \"Any Insurance company\"\n             ]\n\nOutput : \n {\n\"TPO, TPFT\": \"Mixed cover excluding Comprehensive\",\n\"Comp, TPFT\": \"Mixed cover including Comprehensive\",\n\"Comp, Comp\": \"All Comprehensive\",\n \"Any Insurance company\": \"\" \n}"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "cover mapping",
                "position": 53,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193510": {
                "data_type": "OBJECT_LIST",
                "description": "Task: Extract insurance data for each valid Period from the CCE document.\n\nInstructions:\nIdentify and extract rows where Period represents a valid policy period \u2014 typically expressed as either a range of years (e.g., \u201c2020\u20132021\u201d) or a date range (e.g., \u201c01/01/2021 \u2013 31/12/2021\u201d).\n\nGuidelines:\nOnly extract rows where Period matches a valid policy period format (year range or date range).\nIgnore summary rows, totals, or headings that don\u2019t match this format.\nSkip rows where the Period is valid but no relevant data is associated (i.e., all required fields are blank, zero, or marked as N/A).\n\nClean numeric fields by:\nRemoving currency symbols (e.g., \u00a3)\nRemoving thousands separators (e.g., commas)\n\nIf a single field in the document combines multiple categories (e.g.:\n\u201cIncurreds - Paid: AD & WS and FT\u201d\n\u201cIncurreds - Outstanding: AD & WS and FT\u201d),\nthen duplicate the value into each corresponding field in the output (e.g., populate both AD & WS and FT fields with the same value).",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "ADVANCED",
                "name": "CCE Data",
                "position": 54,
                "prompt": "CCE Data",
                "prompt_schema": [
                    {
                        "description": "",
                        "name": "Period"
                    },
                    {
                        "description": "",
                        "name": "Vehicle Years Earned"
                    },
                    {
                        "description": "This may be labeled as Total no. of accidents & claims",
                        "name": "Claim Count"
                    },
                    {
                        "description": "These may be labeled under \"Claims paid (incl. payments on o/s claims\" and it is claims paid related to Accidental Damage and Windscreen (AD WS)",
                        "name": "Incurreds Paid AD WS"
                    },
                    {
                        "description": "Extract the claims paid amount related to Fire and Theft (FT) for each year from the CCE table.\n\nIf there is a column labeled \"AD including FT\" or similar, use that value \u2014 it already includes FT.\n\nIf there is a column labeled ADFT (Accidental Damage, Fire & Theft), use that.\n\nIf neither of the above is found, then look for and use the FT value. It might be written as:\nFT\nF&T\nF.&T.\nF&T (in AD).                                                                             \nAD including FT",
                        "name": "Incurreds Paid FT"
                    },
                    {
                        "description": "claims paid related to Third Party (TP), which may appear as TP or \"Claims Paid TP\"",
                        "name": "Incurreds Paid TP"
                    },
                    {
                        "description": "claims outstanding incurred amount related to Non-Owned (NO) claims, Look for column headers labeled as \"NO\", \"No\",  \"Non-Owned\", or similar",
                        "name": "Incurreds Outstanding NO"
                    },
                    {
                        "description": "outstanding claims related to Accidental Damage and Windscreen (AD WS)",
                        "name": "Incurreds Outstanding AD WS"
                    },
                    {
                        "description": "outstanding claims related to Fire and Theft, which may appear as FT or F&T",
                        "name": "Incurreds Outstanding FT"
                    },
                    {
                        "description": "outstanding claims related to Third Party (TP)",
                        "name": "Incurreds Outstanding TP"
                    },
                    {
                        "description": "total incurred amount for each year , which may appear as \"Total Paid and Outstanding\"",
                        "name": "Total Incurred"
                    },
                    {
                        "description": "If the text contains phrases like \"Not Insured with\", leave the insurer value empty for that row.\n\nIf no insurer is mentioned for a given period, use the default insurer mentioned in the header of that page\n\nOtherwise, extract the insurer name mentioned for that period.",
                        "name": "Insurer"
                    }
                ],
                "prompt_type": "basic"
            },
            "193511": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Data",
                                "value": "CCE Data"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "CCE_Data: { \\ CCE Data \\}\u2028\nPolicy_Inception_Date: { \\ Incepts On \\}\n\nEach row in CCE_Data has a **Period** value. It can be a full date range 01/01/2023 - 31/12/2023, a year range 2020-2021 or 05/2020 - 06/2020 or a single year 2020.\n\nIf only years are present, use the day and month from the Policy_Inception_Date to build full dates. if month and year is present use date from the Policy_Inception_date to build full dates.\u2028\nFor example, if Policy_Inception_Date is 15/06/2019 and Period is 2020-2021, the result should be 15/06/2020 and 15/06/2021.\n\nIf only 2020 is given, return 15/06/2020 as the start date and 15/06/2021 (exactly one year ahead as end date) . If the Period has full dates, keep them unchanged.\n\nIf Period is 11/2020 - 10/2021 use the date from the Policy_Inception_Date and result should be 15/11/2020 and 15/10/2021.\n\nIf Period is 24/10/17-23/10/18 then the result should be 24/10/2017 and 24/10/2018\n\nReturn a table with:\u2028Period, Policy Period Start Date, Policy Period End Date, Used Inception Date (Yes/No) \u2014 where \u201cUsed Inception Date\u201d indicates whether the Policy_Inception_Date was used to construct the full dates or not."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Policy Dates@0"
                            }
                        ],
                        "function_id": 17140,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Policy Dates",
                "position": 55,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193512": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Policy_Dates",
                                "value": "Policy Dates"
                            }
                        ],
                        "function_id": 17141,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Period",
                "position": 56,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193513": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "cover_mapping",
                                "value": "cover mapping"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Data",
                                "value": "CCE Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Policy_Dates",
                                "value": "Policy Dates"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Year",
                                "value": "Year"
                            }
                        ],
                        "function_id": 17142,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "CCE Table",
                "position": 58,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193514": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Period",
                                "value": "Period"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "claims_period: {{ \\ Period \\}}\nYou are given a list called claim_periods.\n\nYou are given a list called claim_periods.\nEach item in the list is a period, which may be:\nin full year format like \"31/01/2023\"\nOr in year format like \"2023\"\n\nYour task is:\n1. Extract the **starting year** for each row as mentioned.\n2. Sort the periods by starting year in **descending** order.\n3. Give a **Year** to each period starting from 1 (most recent = 1).\n\nIgnore any periods that don\u2019t contain a valid year.\nReturn the final output as a table with two columns: 'Policy Period Start Date' , 'Year'"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Year",
                "position": 57,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193515": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17143,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Trade Descriptions",
                "position": 59,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193516": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Business_Description",
                                "value": "Business Description"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Trade_Descriptions",
                                "value": "Trade Descriptions"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are a domain expert in classifying business descriptions.\n\nYou are given:\n\nTrades_List: { \\ Trade Descriptions \\} \nBusiness_Description: { \\ Business Description \\}\n\nInstructions:\nFor the business description provided:\nCompare it against both the trade names and their aliases in Trades_List.\nDetermine the closest and similar matching **trade**.\nIf no suitable match is found, return \"Fleet - Unclassified\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "AXA Trade Description@0"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Business_Description",
                                "value": "Business Description"
                            }
                        ],
                        "function_id": 17144,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "AXA Trade Description@1"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Trade_Descriptions",
                                "value": "Trade Descriptions"
                            }
                        ],
                        "function_id": 17145,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "AXA Trade Description",
                "position": 60,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            }
        },
        "name": "Broker Presentation"
    },
    "13545": {
        "description": "The document contains headings like \u201cMotor Fleet Claims Experience\u201d, \u201cMotor Fleet Experience Form\u201d, or \u201cConfirmed Claims Experience\u201d.\n\nIt includes data of Insured, Address of insured, Policy Number.\n\n\nIt includes a summary table with headers like:\n\n**Period**, **Vehicle Years**, **Number of Claims**, **Claims Paid**, **Claims Outstanding**, **Total Paid and Outstanding**",
        "fields": {
            "193517": {
                "data_type": "TEXT",
                "description": "Extract the name of the insured. This could be called policyholder, client name, company name, full client name, or trading name. Just return the name of the person or business that the insurance is for. It often appears near the top of the email or in the subject line",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "DEFAULT",
                "name": "Insured",
                "position": 0,
                "prompt": "Extract the name of the insured. This may appear under fields such as:\nPolicyholder, Insured Name, Name of Insured, Client Name, Company Name, Full Client Name, or Trading Name.\n\nJust return the name of the person or business the insurance is for.\nIf not found, return \"\" with no additional text.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193518": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYour task is to extract the **Business Description**, also referred to as the **Trade**, from the email subject or body. This describes the core nature of the client's business activities.\n\nThe business description often appears after labels like:\n- \"Trade:\"\n- \"Business Description:\"\n- \"Nature of Business:\"\n- \"Client is involved in\"\n- \"Their operations include\"\n\nExample:\n\"The Provision of Construction Services in the Development of General Contracting, Design & Build Contract Management, Maintenance and Refurbishment; Property Owners and Developers, Servicing of own vehicles\"\n\nExtract the full descriptive text that outlines the business operations of the insured.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Just return the value for Business description without any additional text.\n\nIf no business description is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Business Description",
                "position": 1,
                "prompt": "Extract the Business Description of the company from the document.\nLook for text following labels or titles such as:\n\n**Occupation**,\n**Business**\n**Business Description**,\n**Nature of Business**,\n**Trade**\n\nStrictly extract the business description from the provided labels only.\n\nDo not extract the Policyholder name or Insured name as Business description.\n\nIf no relevant information is found, return:\nBusiness Description: \"\"\n\nIf found, return in this format:\nBusiness Description: \"<extracted text>\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193519": {
                "data_type": "TEXT",
                "description": "Extract the Insured\u2019s Address \u2014 the business or registered address of the party being covered.\n\nInstructions:\n\nSearch for address details labeled under headings such as \u201cInsured Address,\u201d \u201cAddress of Insured,\u201d or simply \u201cAddress.\u201d This is typically the location of the insured entity.\n\nReturn the full address as a single string (e.g., \"123 High Street, London, W1A 1AA\").\n\nDo not return any unrelated addresses (e.g., broker address, risk location).\n\nIf multiple addresses are listed, choose the one most clearly linked to the insured party.\n\nIf no valid address is found, return \"\"",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Clean and return **only the address details**. This means:\n- Preserve the physical address lines.\n- Format it as a single clean string separated by commas.\n- If no valid address is present, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address",
                "position": 2,
                "prompt": "Extract the Insured Address \u2014 the business or registered address of the party being covered.\n\nInstructions:\n\nSearch for address details labeled under headings such as \u201cInsured Address,\u201d \u201cAddress of Insured,\u201d or simply \u201cAddress.\u201d This is typically the location of the insured entity.\n\nReturn the full address exactly as it appears in the document, without omitting or reformatting any part. Do not return any unrelated addresses (e.g., broker address, risk location).\n\nIf multiple addresses are listed, choose the one most clearly linked to the insured party.\n\nIf no valid address is found, return \"\" without any additional text",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193520": {
                "data_type": "TEXT",
                "description": "Extract the date labeled as \"Renewal Date\" for the insurance policy. If not found, return \"N/A\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Check Format: If date is already in the dd/mm/yyyy format, return it as is.\nStandardize Date: If the date is in a different format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy.\nInvalid Dates: If input_date is missing, empty, or not a valid date, return an empty string \"\""
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Incepts On@1"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Expiry_Date",
                                "value": "Expiry Date"
                            }
                        ],
                        "function_id": 17146,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Incepts On",
                "position": 4,
                "prompt": "Extract the Renewal Date from the given text using the following rules:\n\nStep 1: Look for \"Renewal Date\" , \"Policy Inception Date\", \"Inception date\"(case-insensitive)\n\u2013 Extract only the date next to these labels.\n\u2013 Accept formats like DD/MM/YYYY, DD-MM-YYYY, or textual (03 March 25 \u2192 03/03/2025)\n\u2013 If the year is two digits (e.g., 25), expand it to 2025\n- If only **Expiry Date** is found (without mention of Renewal), then do not treat it as a Renewal Date. In this case, return \"\".\n\nStep 2: If multiple renewal dates are present, return only the latest one\n\nStep 3: If not found, search for the combined label \"Renewal Date / Expiry Date\"\n\u2013 Extract only the first date as the Renewal Date\n\nStep 4: just return only valid date in dd/mm/yyy format only without extra text, If no valid renewal label is found, return: \"\"\n\n\nLets think step by step",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193521": {
                "data_type": "TEXT",
                "description": "Extract the Main Cover Type from the input.\nThis refers to the level of motor insurance cover requested or provided (e.g., \"\"Comprehensive\"\", \"\"Third Party Only\"\", \"\"TPFT\"\").\nIf no valid cover type is found, return \"\"N/A\"\".",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "If the cover type got multiple values as comma separated, then return the first one, otherwise return the cover type as is without any additional text."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type@1"
                            }
                        ],
                        "function_id": 17147,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Main Cover Type",
                "position": 7,
                "prompt": "Task: Extract the \"Main Cover Type\" from the document.\n\n**Valid cover types include**:\n--> \"Comprehensive\" (also matches: \"COMP\", \"Comp\", \"Comprehensive(COMP)\", etc.)\n--> \"Third Party Only\" (also matches: \"TPO\", \"Third Party\", \"Third Party Only(TPO)\", etc.)\n--> \"Third Party Fire and Theft\" (also matches: \"TPFT\", \"Third Party Fire & Theft\", \"Third Party Fire and Theft(TPFT)\", etc.)\n--> \"Laid Up Accidental Damage and Theft(LU ADFT)\"\n--> \"Laid Up Fire and Theft(LUFT)\"\n--> If the exact term \"Mixed Cover\" appears, treat it as a distinct cover type\n--> Combination of cover types(For eg: \"Comp, TPO\", \"TPO, TPFT\", \"Comp, Comp\", \"TPO,TPFT,Comp\") etc\n\nInstructions:\n1) Identify the most recent year mentioned in the excess amounts table.\n2) Search for the main cover type (motor insurance level) associated with that year.\n3) If the most recent year does not contain a valid cover type, then search for the next most recent year and repeat until a valid cover type is found.\n4) If no valid cover type is found in any year, return \"\".\n\nOutput: Return the cover type or combination of cover type mentioned in the document as is without any additional text. If not found, return: \"\"",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193522": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "insured_address: {{ \\ Party Address \\}}\n\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\n\nIf no post code is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Risk Postcode",
                "position": 8,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193523": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            }
                        ],
                        "function_id": 17148,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Effective From",
                "position": 6,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193524": {
                "data_type": "OBJECT_LIST",
                "description": "Task: Extract Excess Details and Cover Information for each valid Period from the document.\n\nInstructions:\nIdentify and extract rows where Period represents a valid policy period \u2014 typically expressed as either a range of years (e.g., \u201c2020\u20132021\u201d) or a date range (e.g., \u201c01/01/2021 \u2013 31/12/2021\u201d).\n\nField Extraction:\nLook for the following fields (column names may vary slightly):\n* Period\n* Accident Damage (AD) Excess \u2013 may appear as ADFT, ADFTWS, or similar variants\n* Fire Excess\n* Theft Excess\n* Wind Screen (WS) Excess\n* Cover in Period\n\nInclusion Criteria:\n* Include a row only if both Period and Cover in Period are present.\n* Do not exclude rows if any of the excess fields are missing \u2014 for such cases, output those fields as empty strings ('').\n\nData Cleaning:\n* Remove any currency symbols (e.g., \u00a3) from the excess values.\n* Remove any thousands separators (e.g., 1,000 \u2192 1000) if present.",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "ADVANCED",
                "name": "Excess List",
                "position": 9,
                "prompt": "Excess List",
                "prompt_schema": [
                    {
                        "description": "",
                        "name": "Period"
                    },
                    {
                        "description": "Extract only the numeric value. If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value. If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only the numeric value.\n\nIf ADFT is not found, return the AD ( Accident and Damage) excess value.\n\nIf neither is available, return '0'",
                        "name": "AD Excess"
                    },
                    {
                        "description": "If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.  If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only the numeric value.\n\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\n\nIf neither is available, return '0'",
                        "name": "Fire Excess"
                    },
                    {
                        "description": "If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.      If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only the numeric value.\n\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\n\nIf neither is available, return '0'",
                        "name": "Theft Excess"
                    },
                    {
                        "description": "Wind storm excess value , If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value. If an WS (wind storm) excess is available, return only the numeric value. If data is available, return '0'",
                        "name": "WS Excess"
                    },
                    {
                        "description": "Extract only the valid cover type which may appear as one of the following:\n**Comprehensive** or **Comp**\n**Third Party**\n**TPO (Third Party Only)**\n**TPFT (Third Party, Fire and Theft)** or **TPFT**\n\nIf multiple cover types are mentioned, return all distinct types.\nIf no cover type is found, or if you see some relevant text like \"Not Insured\", return \"\", don't return irrelevant data.",
                        "name": "Cover On Policy"
                    }
                ],
                "prompt_type": "basic"
            },
            "193525": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the {{ \\ Excess List \\ }} use the 'Period' column to identify the recent year and return the 'AD Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess Value', showing only the most recent year's value"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type Accident Damage CCE",
                "position": 12,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193526": {
                "data_type": "OBJECT_LIST",
                "description": "Task: Extract insurance data for each valid Period from the CCE document.\n\nInstructions:\nIdentify and extract rows where Period represents a valid policy period \u2014 typically expressed as either a range of years (e.g., \u201c2020\u20132021\u201d, \"2021\", \"23/24\", \"21-22\") or a date range (e.g., \u201c01/01/2021 \u2013 31/12/2021\u201d).\n\nGuidelines:\nOnly extract rows where Period matches a valid policy period format (year range or date range).\nIgnore summary rows, totals, or headings that don\u2019t match this format.\nSkip rows where the Period is valid but no relevant data is associated (i.e., all required fields are blank, zero, or marked as N/A).\n\nClean numeric fields by:\nRemoving currency symbols (e.g., \u00a3)\nRemoving thousands separators (e.g., commas)\n\nIf a single field in the document combines multiple categories (e.g.:\n\u201cIncurreds - Paid: AD & WS and FT\u201d\n\u201cIncurreds - Outstanding: AD & WS and FT\u201d),\nthen duplicate the value into each corresponding field in the output (e.g., populate both AD & WS and FT fields with the same value).",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "ADVANCED",
                "name": "CCE Data",
                "position": 16,
                "prompt": "CCE Data",
                "prompt_schema": [
                    {
                        "description": "'Period' or 'Policy period'",
                        "name": "Period"
                    },
                    {
                        "description": "This refers to vehicle years, not the number of vehicles, it is always a numeric value",
                        "name": "Vehicle Years Earned"
                    },
                    {
                        "description": "This may be labeled as Total no. of accidents & claims",
                        "name": "Claim Count"
                    },
                    {
                        "description": "These may be labeled under \"Claims paid (incl. payments on o/s claims\" and it is claims paid related to Accidental Damage and Windscreen (AD WS)",
                        "name": "Incurreds Paid AD WS"
                    },
                    {
                        "description": "Extract the claims paid amount related to Fire and Theft (FT) for each year from the CCE table.\n\nIf there is a column labeled \"AD including FT\" or similar, use that value \u2014 it already includes FT.\n\nIf there is a column labeled ADFT (Accidental Damage, Fire & Theft), use that.\n\nIf neither of the above is found, then look for and use the FT value. It might be written as:\nFT\nF&T\nF.&T.\nF&T (in AD).                                                                                                                             ADFT&W/S                                                                             \nAD including FT",
                        "name": "Incurreds Paid FT"
                    },
                    {
                        "description": "claims paid related to Third Party (TP)",
                        "name": "Incurreds Paid TP"
                    },
                    {
                        "description": "claims outstanding incurred amount related to Non-Owned (NO) claims, Look for column headers labeled as \"NO\", \"No\",  \"Non-Owned\", or similar",
                        "name": "Incurreds Outstanding NO"
                    },
                    {
                        "description": "outstanding claims related to Accidental Damage and Windscreen (AD WS)",
                        "name": "Incurreds Outstanding AD WS"
                    },
                    {
                        "description": "outstanding claims related to Fire and Theft, which may appear as FT or F&T",
                        "name": "Incurreds Outstanding FT"
                    },
                    {
                        "description": "outstanding claims related to Third Party (TP)",
                        "name": "Incurreds Outstanding TP"
                    },
                    {
                        "description": "total incurred amount for each year",
                        "name": "Total Incurred"
                    },
                    {
                        "description": "If the text contains phrases like \"Not Insured with\", leave the insurer value empty for that row.\n\nIf no insurer is mentioned for a given period, use the default insurer mentioned in the header of that page\n\nOtherwise, extract the insurer name mentioned for that period.",
                        "name": "Insurer"
                    }
                ],
                "prompt_type": "basic"
            },
            "193527": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the ** \\ Excess List \\** use the 'Period' column to identify the recent year and return the recent 'Fire Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess Value', showing only the most recent year's value"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type Fire CCE",
                "position": 13,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193528": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the \\ Excess List \\ use the 'Period' column to identify the recent year and return the 'Theft Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess Value', showing only the most recent year's value"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess Value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type Theft CCE",
                "position": 14,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193529": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the \\ Excess List \\ use the 'Period' column to identify the recent year and return the 'WS Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess value', showing only the most recent year's value"
                    },
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "From the extracted text, return only the clean numeric data associated with **Excess value**.\nIf no Excess Value is found, return \"0\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Excess Type WS CCE",
                "position": 15,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193530": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Data",
                                "value": "CCE Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Table",
                                "value": "CCE Table"
                            }
                        ],
                        "function_id": 17149,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Number Of Years Claims Experience",
                "position": 23,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193531": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Data",
                                "value": "CCE Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Policy_Dates",
                                "value": "Policy Dates"
                            }
                        ],
                        "function_id": 17150,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Period",
                "position": 18,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193532": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17151,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Transaction Type",
                "position": 20,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193533": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Data",
                                "value": "CCE Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Year",
                                "value": "Year"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "cover_mapping",
                                "value": "cover mapping"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Policy_Dates",
                                "value": "Policy Dates"
                            }
                        ],
                        "function_id": 17152,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "CCE Table",
                "position": 22,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193534": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            }
                        ],
                        "function_id": 17153,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Expires On",
                "position": 5,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193535": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Expires_On",
                                "value": "Expires On"
                            }
                        ],
                        "function_id": 17154,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Effective To",
                "position": 21,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193536": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Period",
                                "value": "Period"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "claims_period: {{ \\ Period \\}}\nYou are given a list called claim_periods.\n\nYou are given a list called claim_periods.\nEach item in the list is a period, which may be:\nin full year format like \"31/01/2023\"\nOr in year format like \"2023\"\n\nYour task is:\n1. Extract the **starting year** for each row as mentioned.\n2. Sort the periods by starting year in **descending** order.\n3. Give a **Year** to each period starting from 1 (most recent = 1).\n\nIgnore any periods that don\u2019t contain a valid year.\nReturn the final output as a table with two columns: 'Policy Period Start Date' , 'Year'"
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Year@0"
                            }
                        ],
                        "function_id": 17155,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Year",
                "position": 19,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193537": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17156,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Business Category",
                "position": 24,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193538": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Excess_List",
                                "value": "Excess List"
                            }
                        ],
                        "function_id": 17157,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Unique Values in Cover On Policy",
                "position": 10,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193539": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Unique_Values_in_Cover_On_Policy",
                                "value": "Unique Values in Cover On Policy"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "For each row in the list {{ \\ Unique Values in Cover On Policy \\ }}, generate a dictionary mapping with the original value mapped to a category based on cover types.\n\n**Valid_cover_types**: \n- \"Comprehensive(COMP)\" (also treat \"Comp\", \"COMP\", \"Comprehensive\" as equivalent to this)\n- \"Third Party Fire and Theft(TPFT)\" (include variations like \"TPFT\", \"Third Party Fire &amp; Theft\")\n- \"Third Party Only(TPO)\" (include \"TPO\", \"Third Party\")\n- \"Laid up ADFT\"\n- \"Laid up FT\"\n- \"Mixed Cover\"\n\n**Mapping Rules**:\n1) If all values in a row (after normalization) are Comprehensive(COMP) \u2192 map to \"All Comprehensive\"\n(This must include variations like \u201cComp\u201d, \u201cCOMP\u201d, \u201cComprehensive\u201d as meaning \"Comprehensive(COMP)\")\n\n2) If all values in a row are Third Party Fire and Theft(TPFT) \u2192 map to \"All Third Party Fire and Theft\"\n\n3) If values are Third Party Only(TPO) \u2192 map to \"All Third Party Only\"\n\n4) If the row contains Comprehensive(COMP) (or its variations) along with other valid cover types \u2192 map to \"Mixed cover including Comprehensive\"\n\n5) If the row contains more than one valid cover type present in Valid_cover_types excluding Comprehensive(COMP) \u2192 map to \"Mixed cover excluding Comprehensive\"\n\n6) If any value in the row is not part of the Valid_cover_types or their known variations, map the entire row to \"\" (empty string). For example, the text \"Insurance company\" is not present in Valid_cover_types, so map it to \"\" (empty string).\n\nExample Output Format :\n\nInput : [\n             \"TPO, TPFT\",\n             \"Comp, TPFT\",\n             \"Comp, Comp\", \n              \"Any Insurance company\"\n             ]\n\nOutput : \n {\n\"TPO, TPFT\": \"Mixed cover excluding Comprehensive\",\n\"Comp, TPFT\": \"Mixed cover including Comprehensive\",\n\"Comp, Comp\": \"All Comprehensive\",\n \"Any Insurance company\": \"\" \n}"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "cover mapping",
                "position": 11,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193540": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Main_Cover_Type",
                                "value": "Main Cover Type"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Main_cover_type : {{ \\ Main Cover Type \\ }}\n\nValid Normalized Types:\n\n1) COMP \u2192 includes: \"Comp\", \"COMP\", \"Comprehensive\", \"Comprehensive Cover\"\n\n2) TPFT \u2192 includes: \"TPFT\", \"Third Party Fire and Theft\", \"Third Party, Fire and Theft\", \"Third Party Fire &amp; Theft\"\n\n3) TPO \u2192 includes: \"TPO\", \"Third Party Only\", \"Third Party\"\n\n4) Laid up (ADFT) \u2192 includes: \"Laid Up (Accidental Damage, Fire, and Theft)\", \"Laid Up ADFT\", \"Laid-Up ADFT\"\n\n5) Laid up (FT Only) \u2192 includes: \"Laid Up (Fire and Theft)\", \"LUFT\", \"Laid-Up FT\"\n\nInstructions:\n\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\n\nIf matched, return the normalized type exactly as listed above.\n\nIf no valid match, return \"\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type Mapped@0"
                            }
                        ],
                        "function_id": 17158,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type Mapped",
                "position": 25,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193541": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17159,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 2",
                "position": 28,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193542": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17160,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 3",
                "position": 29,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193543": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17161,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Country",
                "position": 30,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193544": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17162,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address State",
                "position": 31,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193545": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17163,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address City",
                "position": 33,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193546": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17164,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Postcode",
                "position": 32,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193547": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17165,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 1",
                "position": 27,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193548": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are an intelligent address extraction assistant.\n\nGiven a full address string {{ \\ Party Address \\}}, extract the following components:\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\nAddress Line 2: Estate, locality, landmark, or additional location detail\nAddress Line 3: Optional detail like block, zone, village, or area\nCity: Town or city name\nState: The state, province, or region\nCountry: Country name\nPostcode: postal code (UK format)\n\nExtraction Rules:\nDo not merge unrelated fields across lines\nDo not confuse postcode with city/state.\nReturn empty strings if any field is missing for that component \n{\n  \"Address Line 1\": \"\",\n  \"Address Line 2\": \"\",\n  \"Address Line 3\": \"\",\n  \"City\": \"\",\n  \"State\": \"\",\n  \"Country\": \"\",\n  \"Postcode\": \"\"\n}"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Details",
                "position": 26,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193549": {
                "data_type": "TEXT",
                "description": "Step 1: Search for a date that is explicitly labeled just with the keyword **Expiry Date**.\n\u2013 If found, extract only the date value next to it.\n\u2013 Ignore any extra text, prefixes, or suffixes. Return the date in its original format.\n\nStep2 : Strictly do not extract Renewal Date and other dates as expiry date\n\nStep 3: If none of the above labels are found, return \"\".\n\nOutput Format:\nReturn only the date value (e.g., 12/05/2024)\nIf not available based on the rules above, return \"\".\n\nLet's think step by step.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Check Format: If date is already in the dd/mm/yyyy format, return it as is.\nStandardize Date: If the date is in a different format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy.\nInvalid Dates: If input_date is missing, empty, or not a valid date, return an empty string \"\""
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Expiry Date",
                "position": 3,
                "prompt": "Step 1: Search for a date that is explicitly labeled just with the keyword **Expiry Date**.\n\u2013 If found, extract only the date value next to it.\n\u2013 Ignore any extra text, prefixes, or suffixes. Return the date in its original format.\n\nStep2 : Strictly do not extract **Renewal Date** and other dates as expiry date\n\nStep 3: If none of the above labels are found, return \"\".\n\nOutput Format:\nReturn only the date value (e.g., 12/05/2024)\nIf not available based on the rules above, return \"\".\n\nLet's think step by step.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193550": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Incepts_On",
                                "value": "Incepts On"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "CCE_Data",
                                "value": "CCE Data"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "CCE_Data: { \\ CCE Data \\}\u2028\nPolicy_Inception_Date: { \\ Incepts On \\}\n\nEach row in CCE_Data has a **Period** value. It can be a full date range 01/01/2023 - 31/12/2023, a year range 2020-2021 or 05/2020 - 06/2020 or a single year 2020.\n\nIf only years are present, use the day and month from the Policy_Inception_Date to build full dates. if month and year is present use date from the Policy_Inception_date to build full dates.\u2028\nFor example, if Policy_Inception_Date is 15/06/2019 and Period is 2020-2021, the result should be 15/06/2020 and 15/06/2021.\n\nIf only 2020 is given, return 15/06/2020 as the start date and 15/06/2021 (exactly one year ahead as end date) . If the Period has full dates, keep them unchanged.\n\nIf Period is 11/2020 - 10/2021 use the date from the Policy_Inception_Date and result should be 15/11/2020 and 15/10/2021.\n\nIf Period is 24/10/17-23/10/18 then the result should be 24/10/2017 and 24/10/2018\n\nReturn a table with:\u2028Period, Policy Period Start Date, Policy Period End Date, Used Inception Date (Yes/No) \u2014 where \u201cUsed Inception Date\u201d indicates whether the Policy_Inception_Date was used to construct the full dates or not."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Policy Dates@0"
                            }
                        ],
                        "function_id": 17166,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Policy Dates",
                "position": 17,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193551": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17167,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Trade Descriptions",
                "position": 34,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193552": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Business_Description",
                                "value": "Business Description"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Trade_Descriptions",
                                "value": "Trade Descriptions"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are a domain expert in classifying business descriptions.\n\nYou are given:\n\nTrades_List: { \\ Trade Descriptions \\} \nBusiness_Description: { \\ Business Description \\}\n\nInstructions:\nFor the business description provided:\nCompare it against both the trade names and their aliases in Trades_List.\nDetermine the closest and similar matching **trade**.\nIf no suitable match is found, return \"Fleet - Unclassified\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "AXA Trade Description@0"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Business_Description",
                                "value": "Business Description"
                            }
                        ],
                        "function_id": 17168,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "AXA Trade Description@1"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Trade_Descriptions",
                                "value": "Trade Descriptions"
                            }
                        ],
                        "function_id": 17169,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "AXA Trade Description",
                "position": 35,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            }
        },
        "name": "Confirmed Claims Experience"
    },
    "13546": {
        "description": "Classify a document as \u201cVehicle Schedule\u201d if:\n\nThe document lists insured vehicles or motor claims, often under titles such as:\n**Motor Insurance Database (MID) List**,\n**Motor Vehicle List**,\n**Vehicle Schedule**,\n**Motor Fleet Schedule**\n\nAlso check for table headers or repeated row entries that include fields like:\nVehicle Registration Number (Reg No / VRN)\nCover Type\nMake, Model, Usage\n\nIf these patterns are present, classify as:\nDocument Type: Vehicle Schedule",
        "fields": {
            "193553": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance documents.\n\nYou are working with a document classified as a \"Vehicle Schedule\" - this is typically a structured list of vehicles insured under a policy. The document may appear as a spreadsheet, a table within a PDF, or part of a broker submission, and usually includes fields such as registration number, vehicle make/model, type of cover, and other vehicle-specific information.\n\nYour task is to extract the **Insured Name** - the legal name of the company or individual under whose name the vehicle fleet is insured.\n\nThe Insured Name is often found:\n- At the top of the document as a header\n- Near or alongside policy details like \"Policyholder\", \"Insured\", or \"Client Name\"\n- In the document title or footers (e.g., \"Fleet List for XYZ Logistics Ltd.\")\n- In company letterheads or metadata, especially in MID or policy-linked schedules\n\nIf no insured name or relevant phrase is found, return **\"N/A\"**.\n\nIgnore names that appear only in the context of individual drivers, vehicle owners, or claimants - focus on the entity responsible for the policy.\n\nReturn only the Insured Name, even if multiple names or addresses are present.",
                "field_visibility": "VISIBLE",
                "lines": [],
                "model_type": "DEFAULT",
                "name": "Insured",
                "position": 0,
                "prompt": "You are an expert in processing commercial fleet insurance documents.\n\nYou are working with a document classified as a \"Vehicle Schedule\" - this is typically a structured list of vehicles insured under a policy. The document may appear as a spreadsheet, a table within a PDF, or part of a broker submission, and usually includes fields such as registration number, vehicle make/model, type of cover, and other vehicle-specific information.\n\nYour task is to extract the **Insured Name** - the legal name of the company or individual under whose name the vehicle fleet is insured.\n\nThe Insured Name is often found:\n- At the top of the document as a header\n- Near or alongside policy details like \"Policyholder\", \"Insured\", or \"Client Name\"\n- In the document title or footers (e.g., \"Fleet List for XYZ Logistics Ltd.\")\n- In company letterheads or metadata, especially in MID or policy-linked schedules\n\nIf no insured name or relevant phrase is found, return \"\"\n\nIgnore names that appear only in the context of individual drivers, vehicle owners, or claimants - focus on the entity responsible for the policy.\n\nReturn only the Insured Name, even if multiple names or addresses are present.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193554": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance submissions.\n\nYou are working with a document classified as a \"Vehicle Schedule\". While the main content focuses on listing insured vehicles, these documents often contain metadata such as the name and address of the insured party.\n\nYour task is to extract the **Party Address** - the full address of the insured entity (also referred to as the policyholder or client).\n\nThe address may appear:\n- Near the top of the document, under labels such as \"Address\", \"Client Address\", \"Insured Address\", or as part of a header block\n- Below or next to the Insured Name\n- In a section containing policy or administrative details\n- In a footer or cover page, if the schedule is part of a larger submission\n\nThe address typically includes:\n- Street name and number\n- City or locality\n- Postcode (or ZIP code)\n- Country (optional)\n\nIf no address can be reliably located, return the value: **\"N/A\"**.\n\nDo not extract email addresses, website URLs, or claim-related contact information. Return only the physical or postal address associated with the insured party.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Clean and return **only the address details**. This means:\n- Preserve the physical address lines.\n- Format it as a single clean string separated by commas.\n- If no valid address is present, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address",
                "position": 1,
                "prompt": "You are an expert in processing commercial fleet insurance submissions.\n\nYou are working with a document classified as a \"Vehicle Schedule\". While the main content focuses on listing insured vehicles, these documents often contain metadata such as the name and address of the insured party.\n\nYour task is to extract the **Party Address** - the full address of the insured entity (also referred to as the policyholder or client).\n\nThe address may appear:\n- Near the top of the document, under labels such as \"Address\", \"Client Address\", \"Insured Address\", or as part of a header block\n- Below or next to the Insured Name\n- In a section containing policy or administrative details\n- In a footer or cover page, if the schedule is part of a larger submission\n\nThe address typically includes:\n- Street name and number\n- City or locality\n- Postcode (or ZIP code)\n- Country (optional)\n\nReturn the complete address exactly as it is displayed in the document, without omitting, reformatting, or adding any explanation.\n\nIf no address can be reliably located, return \"\"\n\nDo not extract email addresses, website URLs, or claim-related contact information. Return only the physical or postal address associated with the insured party.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193555": {
                "data_type": "TEXT",
                "description": "You are an expert in processing commercial fleet insurance documents.\n\nYou are working with a document classified as a \"Vehicle Schedule\", which contains a list of insured vehicles and their details.\n\nYour task is to extract the **Cover Type** based on the most frequently occurring value in the relevant column.\n\nCover Type will be found in a column labelled something like:\n- \"Cover\"\n- \"Type of Cover\"\n- \"Coverage\"\n\nFrom this column, identify the most commonly listed cover type and return only that value. If not mentioned, return N/A\n\nOnly the following values are acceptable:\n- Comprehensive  \n- Third party  \n- TPO  \n- TPFT  \n\nNormalise variations as needed (e.g., \"Third Party\" \u2192 \"Third party\").\n\nDo not return multiple values. Return only the single most frequent valid cover type from the list above.",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type@0"
                            }
                        ],
                        "function_id": 17170,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type",
                "position": 2,
                "prompt": "You are an expert in processing commercial fleet insurance documents.\n\nYou are working with a document classified as a \"Vehicle Schedule\", which contains a list of insured vehicles and their details.\n\nYour task is to extract the **Cover Type** based on the most frequently occurring value in the relevant column.\n\nCover Type will be found in a column labelled something like:\n- \"Cover\"\n- \"Type of Cover\"\n- \"Coverage\"\n\nFrom this column, identify the most commonly listed cover type and return only that value. If not mentioned, return \"\"\n\nOnly the following values are acceptable:\n- Comprehensive (Comp)  \n- Third party Only (TPO)\n- TPFT (Third Party Fire and Theft)\n- LUFT (Laid Up - Fire and Theft)\n- LU ADFT (Laid Up - Accidental damage, fire and theft)\n\nNormalise variations as needed (e.g., \"Third Party\" \u2192 \"Third party\").\n\nDo not return multiple values. Return only the single most frequent valid cover type from the list above.",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193556": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "insured_address: {{ \\ Party Address \\ }}\n\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\n\nIf no post code is found, return \"\"."
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Risk Postcode",
                "position": 3,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193557": {
                "data_type": "TEXT",
                "description": "You are working with a Vehicle Schedule document from a commercial fleet insurance submission. Extract a structured table with the following two columns:\n\nCover Vehicle \u2013 Extract cover type (e.g., \"TPO\", \"COMP\", \"Comprehensive\") only if found under relevant headers like Cover, Cover Type, etc.\n\nVehicle Registration \u2013 Extract registration number (e.g., \"AB12 XYZ\") only if found under headers like Vehicle Reg, Registration, Reg, Registration Number, Vehicle Registration Number, etc.\n\nIdentify relevant columns before extracting\u2014do not infer or guess values. If a relevant column or data is missing for a vehicle, set that field as \"N/A\". Ignore all unrelated attributes.\n\nReturn the output only as a list of lists in tabular format as shown below. If no valid data is found, return \"N/A\" only.\n\nOutput Format:\n[[\"Cover Vehicle\", \"Vehicle Registration\"], [],]",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Vehicle Schedule Data@0"
                            }
                        ],
                        "function_id": 17171,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Vehicle Schedule Data",
                "position": 6,
                "prompt": "Scan and Extract a structured table with the following two columns:\n\t\u2022\tCover Vehicle \u2013 Extract the cover type (e.g., \"TPO\", \"COMP\", \"Comprehensive\") only if found under relevant headers like Cover, Cover Type, etc. Remove unnecessary brackets if any from Cover Vehicle.\n\t\u25e6\tIf a cover type is mentioned at the top or bottom (e.g., under \"Cover\" or \"Cover Type\") and applies to all vehicles, use that value for all vehicles unless overridden in the rows.\n\t\u2022\tVehicle Registration \u2013 Extract the registration number (e.g., \"AB12 XYZ\",\"C120674\") only if found under headers like **Serial No/ID Etc**, Chassis Number, Vehicle Reg, etc. (Registration numbers are always alphanumeric).\n\t\u25e6\tInclude Serial No and Chassis Number values as Vehicle Registration if found, even if no Cover Vehicle is available. In such cases, keep Cover Vehicle as an empty string \"\".\nImportant Rules:\n\t1\tStrictly do not extract irrelevant data like product names or unrelated fields.\n\t2\tKeep duplicate Vehicle Registration numbers as well.\n\t3\tDo not change the order of Vehicle Registrations\u2014maintain the same order as in the document.\n\t4\tIdentify relevant columns before extracting\u2014do not infer or guess values.\n\t5\tIf a relevant column or data is missing for a vehicle, set that field as \"\".\n\t6\tIgnore all unrelated attributes or values.\n\t7\tDrop rows from extraction if they do not contain a valid registration number.\nReturn Format:\nReturn the final answer only as a list of lists in the following structure, without any additional explanation or text:\n\n[[\"Cover Vehicle\", \"Vehicle Registration\"], [\"Comp\", \"KV79XOC\"], [\"Comp\", \"VV59XPF\"], [\"\", \"SN123456\"], [\"\", \"CH987654\"]]",
                "prompt_schema": null,
                "prompt_type": "advanced"
            },
            "193558": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17172,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Business Category",
                "position": 4,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193559": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17173,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "ADVANCED",
                "name": "Transaction Type",
                "position": 5,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193560": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Data",
                                "value": "Vehicle Schedule Data"
                            }
                        ],
                        "function_id": 17174,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Unique_Values_Cover_Basis",
                "position": 7,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193561": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Data",
                                "value": "Vehicle Schedule Data"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Unique__Values__Cover__Basis",
                                "value": "Unique_Values_Cover_Basis"
                            },
                            {
                                "data_type": "FIELD",
                                "name": "Cover_Basis_Mapping",
                                "value": "Cover Basis Mapping"
                            }
                        ],
                        "function_id": 17175,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Vehicle Schedule Table",
                "position": 9,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193562": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Vehicle_Schedule_Table",
                                "value": "Vehicle Schedule Table"
                            }
                        ],
                        "function_id": 17176,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Number of Notifiable Vehicles",
                "position": 10,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193563": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Number_of_Notifiable_Vehicles",
                                "value": "Number of Notifiable Vehicles"
                            }
                        ],
                        "function_id": 17177,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Offering Type VST",
                "position": 11,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193564": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Unique__Values__Cover__Basis",
                                "value": "Unique_Values_Cover_Basis"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "For each value in the list {{\\ Unique_Values_Cover_Basis \\}}, generate a dictionary mapping where each value is normalised to one of the standard cover basis categories. You may receive values in full form (e.g., \"Third Party, Fire and Theft\"), as acronyms (e.g., \"TPFT\", \"TPO\", \"Comp\"), or as variations of known phrases (e.g., \"Comprehensive Cover\", \"Laid Up - Fire &amp; Theft\"). Use the following mapping rules: \"Third Party, Fire and Theft\" or similar \u2192 TPFT, \"Comprehensive\" or similar \u2192 Comp, \"Third Party Only\" or similar \u2192 TPO, \"Laid Up (Accidental Damage, Fire, and Theft)\" or similar \u2192 Laid Up (ADFT), \"Laid Up (Fire and Theft)\" , LUFT or similar \u2192 Laid up (FT Only). Direct acronyms like TPO, TPFT, Comp should map to themselves exclude LUFT, Since LUFT -&gt; Laid up (FT Only). If a value is irrelevant or does not match any known category, map it to an empty string \"\" Return the output as a dictionary like this: {\u201coriginal value\u201d: mapped category, }"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Cover Basis Mapping",
                "position": 8,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193565": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Main_Cover_Type",
                                "value": "Main Cover Type"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "Main_cover_type : {{ \\ Main Cover Type \\ }}\n\nValid Normalized Types:\n\n1) COMP \u2192 includes: \"Comp\", \"COMP\", \"Comprehensive\", \"Comprehensive Cover\"\n\n2) TPFT \u2192 includes: \"TPFT\", \"Third Party Fire and Theft\", \"Third Party, Fire and Theft\", \"Third Party Fire &amp; Theft\"\n\n3) TPO \u2192 includes: \"TPO\", \"Third Party Only\", \"Third Party\"\n\n4) Laid up (ADFT) \u2192 includes: \"Laid Up (Accidental Damage, Fire, and Theft)\", \"Laid Up ADFT\", \"Laid-Up ADFT\"\n\n5) Laid up (FT Only) \u2192 includes: \"Laid Up (Fire and Theft)\", \"LUFT\", \"Laid-Up FT\"\n\nInstructions:\n\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\n\nIf matched, return the normalized type exactly as listed above.\n\nIf no valid match, return \"\"."
                    },
                    {
                        "function_args": [
                            {
                                "data_type": "LINE",
                                "name": "previous_line",
                                "value": "Main Cover Type Mapped@0"
                            }
                        ],
                        "function_id": 17178,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Main Cover Type Mapped",
                "position": 12,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            },
            "193566": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17179,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 2",
                "position": 15,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193567": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17180,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 3",
                "position": 16,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193568": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17181,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Country",
                "position": 17,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193569": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17182,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address State",
                "position": 18,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193570": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17183,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address City",
                "position": 19,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193571": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17184,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Postcode",
                "position": 20,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193572": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address_Details",
                                "value": "Party Address Details"
                            }
                        ],
                        "function_id": 17185,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Line 1",
                "position": 14,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            },
            "193573": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [
                            {
                                "data_type": "FIELD",
                                "name": "Party_Address",
                                "value": "Party Address"
                            }
                        ],
                        "function_id": null,
                        "line_type": "PROMPT",
                        "native_fn_name": null,
                        "prompt": "You are an intelligent address extraction assistant.\n\nGiven a full address string {{ \\ Party Address \\ }}, extract the following components:\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\nAddress Line 2: Estate, locality, landmark, or additional location detail\nAddress Line 3: Optional detail like block, zone, village, or area\nCity: Town or city name\nState: The state, province, or region\nCountry: Country name\nPostcode: postal code (UK format)\n\nExtraction Rules:\nDo not merge unrelated fields across lines\nDo not confuse postcode with city/state.\nReturn empty strings if any field is missing for that component \n{\n  \"Address Line 1\": \"\",\n  \"Address Line 2\": \"\",\n  \"Address Line 3\": \"\",\n  \"City\": \"\",\n  \"State\": \"\",\n  \"Country\": \"\",\n  \"Postcode\": \"\"\n}"
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Party Address Details",
                "position": 13,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "derived"
            }
        },
        "name": "Vehicle Schedule"
    },
    "13547": {
        "description": "Classify the document as a Haulage Fact Finder if it is a structured form or questionnaire used to collect information for motor fleet or haulage insurance. These documents typically include Renewal quotations as well.\n\nIf the document consists of keywords such as **Operator**, **Hazardous** or **Trailer** with in the \"Motor fleet fact finder document\", then classify it as **Haulage Fact Finder**.",
        "fields": {
            "193574": {
                "data_type": "TEXT",
                "description": "",
                "field_visibility": "VISIBLE",
                "lines": [
                    {
                        "function_args": [],
                        "function_id": 17186,
                        "line_type": "UDF",
                        "native_fn_name": null,
                        "prompt": null
                    }
                ],
                "model_type": "DEFAULT",
                "name": "Haulage Fact Finder received",
                "position": 0,
                "prompt": "",
                "prompt_schema": null,
                "prompt_type": "udf"
            }
        },
        "name": "Haulage Fact Finder"
    },
    "13548": {
        "description": "Classify a document as Claims Listing if it has headers such as **Claims Listing**, **Claims Breakdown**, **Claims Experience Report** which includes headers such as **Claim Number**, **Claim Reference number** \n\nAlso consider any document with just driver details or **Policy schedule** and renewal quotations also.",
        "fields": {},
        "name": "Claims  Listing"
    },
    "last_edited_at": "1756723827000",
    "last_edited_class_at": "1756360109000"
}