{"dev_input": {"input_path": "axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/documents/out/map_records"}, "options": {"provenance_tracking": true, "auto_provenance": false}, "fields": [{"label": "__model_result", "lines": [{"function_id": {"name": "get_raw_extracted_fields", "source": "NATIVE"}, "inputs": [{"arg_name": "INPUT_COL", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "KEYWORD", "data_type_options": ["TEXT"], "value": "INPUT_COL"}, {"arg_name": "fields_to_extract", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "[{\"name\": \"Insured\", \"prompt\": \"Extract the name of the insured. This may appear under fields such as:\\nPolicyholder, Insured Name, Name of Insured, Client Name, Company Name, Full Client Name, or Trading Name.\\n\\nJust return the name of the person or business the insurance is for.\\nIf not found, return \\\"\\\" with no additional text.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the name of the insured. This could be called policyholder, client name, company name, full client name, or trading name. Just return the name of the person or business that the insurance is for. It often appears near the top of the email or in the subject line\", \"model_type\": \"DEFAULT\", \"position\": 0, \"result_data_type\": \"TEXT\"}, {\"name\": \"Business_Description\", \"prompt\": \"Extract the Business Description of the company from the document.\\nLook for text following labels or titles such as:\\n\\n**Occupation**,\\n**Business**\\n**Business Description**,\\n**Nature of Business**,\\n**Trade**\\n\\nStrictly extract the business description from the provided labels only.\\n\\nDo not extract the Policyholder name or Insured name as Business description.\\n\\nIf no relevant information is found, return:\\nBusiness Description: \\\"\\\"\\n\\nIf found, return in this format:\\nBusiness Description: \\\"<extracted text>\\\"\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"You are an expert in processing commercial fleet insurance submissions.\\n\\nYour task is to extract the **Business Description**, also referred to as the **Trade**, from the email subject or body. This describes the core nature of the client's business activities.\\n\\nThe business description often appears after labels like:\\n- \\\"Trade:\\\"\\n- \\\"Business Description:\\\"\\n- \\\"Nature of Business:\\\"\\n- \\\"Client is involved in\\\"\\n- \\\"Their operations include\\\"\\n\\nExample:\\n\\\"The Provision of Construction Services in the Development of General Contracting, Design & Build Contract Management, Maintenance and Refurbishment; Property Owners and Developers, Servicing of own vehicles\\\"\\n\\nExtract the full descriptive text that outlines the business operations of the insured.\", \"model_type\": \"DEFAULT\", \"position\": 1, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address\", \"prompt\": \"Extract the Insured Address \\u2014 the business or registered address of the party being covered.\\n\\nInstructions:\\n\\nSearch for address details labeled under headings such as \\u201cInsured Address,\\u201d \\u201cAddress of Insured,\\u201d or simply \\u201cAddress.\\u201d This is typically the location of the insured entity.\\n\\nReturn the full address exactly as it appears in the document, without omitting or reformatting any part. Do not return any unrelated addresses (e.g., broker address, risk location).\\n\\nIf multiple addresses are listed, choose the one most clearly linked to the insured party.\\n\\nIf no valid address is found, return \\\"\\\" without any additional text\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Insured\\u2019s Address \\u2014 the business or registered address of the party being covered.\\n\\nInstructions:\\n\\nSearch for address details labeled under headings such as \\u201cInsured Address,\\u201d \\u201cAddress of Insured,\\u201d or simply \\u201cAddress.\\u201d This is typically the location of the insured entity.\\n\\nReturn the full address as a single string (e.g., \\\"123 High Street, London, W1A 1AA\\\").\\n\\nDo not return any unrelated addresses (e.g., broker address, risk location).\\n\\nIf multiple addresses are listed, choose the one most clearly linked to the insured party.\\n\\nIf no valid address is found, return \\\"\\\"\", \"model_type\": \"DEFAULT\", \"position\": 2, \"result_data_type\": \"TEXT\"}, {\"name\": \"Incepts_On\", \"prompt\": \"Extract the Renewal Date from the given text using the following rules:\\n\\nStep 1: Look for \\\"Renewal Date\\\" , \\\"Policy Inception Date\\\", \\\"Inception date\\\"(case-insensitive)\\n\\u2013 Extract only the date next to these labels.\\n\\u2013 Accept formats like DD/MM/YYYY, DD-MM-YYYY, or textual (03 March 25 \\u2192 03/03/2025)\\n\\u2013 If the year is two digits (e.g., 25), expand it to 2025\\n- If only **Expiry Date** is found (without mention of Renewal), then do not treat it as a Renewal Date. In this case, return \\\"\\\".\\n\\nStep 2: If multiple renewal dates are present, return only the latest one\\n\\nStep 3: If not found, search for the combined label \\\"Renewal Date / Expiry Date\\\"\\n\\u2013 Extract only the first date as the Renewal Date\\n\\nStep 4: just return only valid date in dd/mm/yyy format only without extra text, If no valid renewal label is found, return: \\\"\\\"\\n\\n\\nLets think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the date labeled as \\\"Renewal Date\\\" for the insurance policy. If not found, return \\\"N/A\\\".\", \"model_type\": \"DEFAULT\", \"position\": 4, \"result_data_type\": \"TEXT\"}, {\"name\": \"Main_Cover_Type\", \"prompt\": \"Task: Extract the \\\"Main Cover Type\\\" from the document.\\n\\n**Valid cover types include**:\\n--> \\\"Comprehensive\\\" (also matches: \\\"COMP\\\", \\\"Comp\\\", \\\"Comprehensive(COMP)\\\", etc.)\\n--> \\\"Third Party Only\\\" (also matches: \\\"TPO\\\", \\\"Third Party\\\", \\\"Third Party Only(TPO)\\\", etc.)\\n--> \\\"Third Party Fire and Theft\\\" (also matches: \\\"TPFT\\\", \\\"Third Party Fire & Theft\\\", \\\"Third Party Fire and Theft(TPFT)\\\", etc.)\\n--> \\\"Laid Up Accidental Damage and Theft(LU ADFT)\\\"\\n--> \\\"Laid Up Fire and Theft(LUFT)\\\"\\n--> If the exact term \\\"Mixed Cover\\\" appears, treat it as a distinct cover type\\n--> Combination of cover types(For eg: \\\"Comp, TPO\\\", \\\"TPO, TPFT\\\", \\\"Comp, Comp\\\", \\\"TPO,TPFT,Comp\\\") etc\\n\\nInstructions:\\n1) Identify the most recent year mentioned in the excess amounts table.\\n2) Search for the main cover type (motor insurance level) associated with that year.\\n3) If the most recent year does not contain a valid cover type, then search for the next most recent year and repeat until a valid cover type is found.\\n4) If no valid cover type is found in any year, return \\\"\\\".\\n\\nOutput: Return the cover type or combination of cover type mentioned in the document as is without any additional text. If not found, return: \\\"\\\"\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Main Cover Type from the input.\\nThis refers to the level of motor insurance cover requested or provided (e.g., \\\"\\\"Comprehensive\\\"\\\", \\\"\\\"Third Party Only\\\"\\\", \\\"\\\"TPFT\\\"\\\").\\nIf no valid cover type is found, return \\\"\\\"N/A\\\"\\\".\", \"model_type\": \"ADVANCED\", \"position\": 7, \"result_data_type\": \"TEXT\"}, {\"name\": \"Risk_Postcode\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 8, \"result_data_type\": \"TEXT\"}, {\"name\": \"Effective_From\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"ADVANCED\", \"position\": 6, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_List\", \"prompt\": \"Excess List\", \"prompt_type\": \"basic\", \"values\": {}, \"data_type\": \"OBJECT_LIST\", \"prompt_schema\": [{\"name\": \"Period\", \"description\": \"\"}, {\"name\": \"AD Excess\", \"description\": \"Extract only the numeric value. If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value. If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only the numeric value.\\n\\nIf ADFT is not found, return the AD ( Accident and Damage) excess value.\\n\\nIf neither is available, return '0'\"}, {\"name\": \"Fire Excess\", \"description\": \"If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.  If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only the numeric value.\\n\\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\\n\\nIf neither is available, return '0'\"}, {\"name\": \"Theft Excess\", \"description\": \"If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.      If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only the numeric value.\\n\\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\\n\\nIf neither is available, return '0'\"}, {\"name\": \"WS Excess\", \"description\": \"Wind storm excess value , If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value. If an WS (wind storm) excess is available, return only the numeric value. If data is available, return '0'\"}, {\"name\": \"Cover On Policy\", \"description\": \"Extract only the valid cover type which may appear as one of the following:\\n**Comprehensive** or **Comp**\\n**Third Party**\\n**TPO (Third Party Only)**\\n**TPFT (Third Party, Fire and Theft)** or **TPFT**\\n\\nIf multiple cover types are mentioned, return all distinct types.\\nIf no cover type is found, or if you see some relevant text like \\\"Not Insured\\\", return \\\"\\\", don't return irrelevant data.\"}], \"description\": \"Task: Extract Excess Details and Cover Information for each valid Period from the document.\\n\\nInstructions:\\nIdentify and extract rows where Period represents a valid policy period \\u2014 typically expressed as either a range of years (e.g., \\u201c2020\\u20132021\\u201d) or a date range (e.g., \\u201c01/01/2021 \\u2013 31/12/2021\\u201d).\\n\\nField Extraction:\\nLook for the following fields (column names may vary slightly):\\n* Period\\n* Accident Damage (AD) Excess \\u2013 may appear as ADFT, ADFTWS, or similar variants\\n* Fire Excess\\n* Theft Excess\\n* Wind Screen (WS) Excess\\n* Cover in Period\\n\\nInclusion Criteria:\\n* Include a row only if both Period and Cover in Period are present.\\n* Do not exclude rows if any of the excess fields are missing \\u2014 for such cases, output those fields as empty strings ('').\\n\\nData Cleaning:\\n* Remove any currency symbols (e.g., \\u00a3) from the excess values.\\n* Remove any thousands separators (e.g., 1,000 \\u2192 1000) if present.\", \"model_type\": \"ADVANCED\", \"position\": 9, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_Accident_Damage_CCE\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 12, \"result_data_type\": \"TEXT\"}, {\"name\": \"CCE_Data\", \"prompt\": \"CCE Data\", \"prompt_type\": \"basic\", \"values\": {}, \"data_type\": \"OBJECT_LIST\", \"prompt_schema\": [{\"name\": \"Period\", \"description\": \"'Period' or 'Policy period'\"}, {\"name\": \"Vehicle Years Earned\", \"description\": \"This refers to vehicle years, not the number of vehicles, it is always a numeric value\"}, {\"name\": \"Claim Count\", \"description\": \"This may be labeled as Total no. of accidents & claims\"}, {\"name\": \"Incurreds Paid AD WS\", \"description\": \"These may be labeled under \\\"Claims paid (incl. payments on o/s claims\\\" and it is claims paid related to Accidental Damage and Windscreen (AD WS)\"}, {\"name\": \"Incurreds Paid FT\", \"description\": \"Extract the claims paid amount related to Fire and Theft (FT) for each year from the CCE table.\\n\\nIf there is a column labeled \\\"AD including FT\\\" or similar, use that value \\u2014 it already includes FT.\\n\\nIf there is a column labeled ADFT (Accidental Damage, Fire & Theft), use that.\\n\\nIf neither of the above is found, then look for and use the FT value. It might be written as:\\nFT\\nF&T\\nF.&T.\\nF&T (in AD).                                                                                                                             ADFT&W/S                                                                             \\nAD including FT\"}, {\"name\": \"Incurreds Paid TP\", \"description\": \"claims paid related to Third Party (TP)\"}, {\"name\": \"Incurreds Outstanding NO\", \"description\": \"claims outstanding incurred amount related to Non-Owned (NO) claims, Look for column headers labeled as \\\"NO\\\", \\\"No\\\",  \\\"Non-Owned\\\", or similar\"}, {\"name\": \"Incurreds Outstanding AD WS\", \"description\": \"outstanding claims related to Accidental Damage and Windscreen (AD WS)\"}, {\"name\": \"Incurreds Outstanding FT\", \"description\": \"outstanding claims related to Fire and Theft, which may appear as FT or F&T\"}, {\"name\": \"Incurreds Outstanding TP\", \"description\": \"outstanding claims related to Third Party (TP)\"}, {\"name\": \"Total Incurred\", \"description\": \"total incurred amount for each year\"}, {\"name\": \"Insurer\", \"description\": \"If the text contains phrases like \\\"Not Insured with\\\", leave the insurer value empty for that row.\\n\\nIf no insurer is mentioned for a given period, use the default insurer mentioned in the header of that page\\n\\nOtherwise, extract the insurer name mentioned for that period.\"}], \"description\": \"Task: Extract insurance data for each valid Period from the CCE document.\\n\\nInstructions:\\nIdentify and extract rows where Period represents a valid policy period \\u2014 typically expressed as either a range of years (e.g., \\u201c2020\\u20132021\\u201d, \\\"2021\\\", \\\"23/24\\\", \\\"21-22\\\") or a date range (e.g., \\u201c01/01/2021 \\u2013 31/12/2021\\u201d).\\n\\nGuidelines:\\nOnly extract rows where Period matches a valid policy period format (year range or date range).\\nIgnore summary rows, totals, or headings that don\\u2019t match this format.\\nSkip rows where the Period is valid but no relevant data is associated (i.e., all required fields are blank, zero, or marked as N/A).\\n\\nClean numeric fields by:\\nRemoving currency symbols (e.g., \\u00a3)\\nRemoving thousands separators (e.g., commas)\\n\\nIf a single field in the document combines multiple categories (e.g.:\\n\\u201cIncurreds - Paid: AD & WS and FT\\u201d\\n\\u201cIncurreds - Outstanding: AD & WS and FT\\u201d),\\nthen duplicate the value into each corresponding field in the output (e.g., populate both AD & WS and FT fields with the same value).\", \"model_type\": \"ADVANCED\", \"position\": 16, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_Fire_CCE\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 13, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_Theft_CCE\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 14, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_WS_CCE\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 15, \"result_data_type\": \"TEXT\"}, {\"name\": \"Number_Of_Years_Claims_Experience\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 23, \"result_data_type\": \"TEXT\"}, {\"name\": \"Period\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 18, \"result_data_type\": \"TEXT\"}, {\"name\": \"Transaction_Type\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 20, \"result_data_type\": \"TEXT\"}, {\"name\": \"CCE_Table\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 22, \"result_data_type\": \"TEXT\"}, {\"name\": \"Expires_On\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 5, \"result_data_type\": \"TEXT\"}, {\"name\": \"Effective_To\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 21, \"result_data_type\": \"TEXT\"}, {\"name\": \"Year\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 19, \"result_data_type\": \"TEXT\"}, {\"name\": \"Business_Category\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 24, \"result_data_type\": \"TEXT\"}, {\"name\": \"Unique_Values_in_Cover_On_Policy\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 10, \"result_data_type\": \"TEXT\"}, {\"name\": \"cover_mapping\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 11, \"result_data_type\": \"TEXT\"}, {\"name\": \"Main_Cover_Type_Mapped\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 25, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_2\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 28, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_3\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 29, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Country\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 30, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_State\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 31, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_City\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 33, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Postcode\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 32, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_1\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 27, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Details\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 26, \"result_data_type\": \"TEXT\"}, {\"name\": \"Expiry_Date\", \"prompt\": \"Step 1: Search for a date that is explicitly labeled just with the keyword **Expiry Date**.\\n\\u2013 If found, extract only the date value next to it.\\n\\u2013 Ignore any extra text, prefixes, or suffixes. Return the date in its original format.\\n\\nStep2 : Strictly do not extract **Renewal Date** and other dates as expiry date\\n\\nStep 3: If none of the above labels are found, return \\\"\\\".\\n\\nOutput Format:\\nReturn only the date value (e.g., 12/05/2024)\\nIf not available based on the rules above, return \\\"\\\".\\n\\nLet's think step by step.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Step 1: Search for a date that is explicitly labeled just with the keyword **Expiry Date**.\\n\\u2013 If found, extract only the date value next to it.\\n\\u2013 Ignore any extra text, prefixes, or suffixes. Return the date in its original format.\\n\\nStep2 : Strictly do not extract Renewal Date and other dates as expiry date\\n\\nStep 3: If none of the above labels are found, return \\\"\\\".\\n\\nOutput Format:\\nReturn only the date value (e.g., 12/05/2024)\\nIf not available based on the rules above, return \\\"\\\".\\n\\nLet's think step by step.\", \"model_type\": \"DEFAULT\", \"position\": 3, \"result_data_type\": \"TEXT\"}, {\"name\": \"Policy_Dates\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 17, \"result_data_type\": \"TEXT\"}, {\"name\": \"Trade_Descriptions\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 34, \"result_data_type\": \"TEXT\"}, {\"name\": \"AXA_Trade_Description\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 35, \"result_data_type\": \"TEXT\"}]"}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}]}]}, {"label": "Insured", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Insured\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Business_Description", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Business_Description\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return the value for Business description without any additional text.\\n\\nIf no business description is found, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Business_Description@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Party_Address\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Clean and return **only the address details**. This means:\\n- Preserve the physical address lines.\\n- Format it as a single clean string separated by commas.\\n- If no valid address is present, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Party_Address@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Expiry_Date", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Expiry_Date\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Check Format: If date is already in the dd/mm/yyyy format, return it as is.\\nStandardize Date: If the date is in a different format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy.\\nInvalid Dates: If input_date is missing, empty, or not a valid date, return an empty string \\\"\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Expiry_Date@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Incepts_On", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Incepts_On\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Check Format: If date is already in the dd/mm/yyyy format, return it as is.\\nStandardize Date: If the date is in a different format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy.\\nInvalid Dates: If input_date is missing, empty, or not a valid date, return an empty string \\\"\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Incepts_On@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/ad781ae0-f5fb-419c-b067-f09faf073bb3.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Incepts_On@1\"},{\"name\":\"Expiry_Date\",\"data_type\":\"FIELD\",\"value\":\"Expiry_Date\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17146\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef form_inception_date_with_expiry_date(previous_line, Expiry_Date, context = {}, keys = {}, **kwargs):\\n\\tfrom datetime import datetime, timedelta\\n\\t\\n\\tdef get_new_date(incepts_on, expiry_date):\\n\\t    # If both are empty, return ''\\n\\t    if not incepts_on and not expiry_date:\\n\\t        return ''\\n\\t    \\n\\t    # Convert to datetime objects if not empty\\n\\t    expiry_dt = datetime.strptime(expiry_date, \\\"%d/%m/%Y\\\") if expiry_date else ''\\n\\t    incepts_dt = datetime.strptime(incepts_on, \\\"%d/%m/%Y\\\") if incepts_on else ''\\n\\t    \\n\\t    # 1) If Incepts On is empty, return Expiry Date + 1 day\\n\\t    if not incepts_on:\\n\\t        return (expiry_dt + timedelta(days=1)).strftime(\\\"%d/%m/%Y\\\")\\n\\t    \\n\\t    # 2) If Incepts On and Expiry Date are the same, return Incepts On\\n\\t    if expiry_date and incepts_dt == expiry_dt:\\n\\t        return incepts_on\\n\\t    \\n\\t    # 3) If Incepts On is non-empty, return Incepts On\\n\\t    return incepts_on\\n\\t\\n\\ttry:\\n\\t    # previous_line = str(previous_line)\\n\\t    # Expiry_Date = str(Expiry_Date)\\n\\t    \\n\\t    previous_line = previous_line.replace('\\\"\\\"', '')\\n\\t    Expiry_Date = Expiry_Date.replace('\\\"\\\"', '')\\n\\t\\n\\t    result = get_new_date(previous_line, Expiry_Date)\\n\\t    \\n\\t    return result\\n\\texcept Exception as e:\\n\\t    print(e)\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"form_inception_date_with_expiry_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Incepts_On@1\"},{\"data_type\":\"FIELD\",\"value\":\"Expiry_Date\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Expires_On", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/42633144-f74d-4061-a4ac-76ecf81c5629.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Incepts_On\",\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17153\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(Incepts_On, context = {}, keys = {}, **kwargs):\\n\\tfrom datetime import datetime, timedelta\\n\\t\\n\\tdef add_one_year_minus_one_day(date_str):\\n\\t    # Parse the input date (DD/MM/YYYY)\\n\\t    input_date = datetime.strptime(date_str, \\\"%d/%m/%Y\\\")\\n\\t    try:\\n\\t        # Try to add one year directly\\n\\t        one_year_later = input_date.replace(year=input_date.year + 1)\\n\\t    except ValueError:\\n\\t        # Handle Feb 29 (leap year issue) and other invalid dates\\n\\t        temp_date = input_date + (datetime(input_date.year + 1, 3, 1) - datetime(input_date.year, 3, 1))\\n\\t        one_year_later = temp_date\\n\\t    # Subtract one day\\n\\t    final_date = one_year_later - timedelta(days=1)\\n\\t    # Return formatted date as DD/MM/YYYY with leading zeros\\n\\t    return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t\\n\\ttry:\\n\\t    expiry_date = add_one_year_minus_one_day(Incepts_On)\\n\\t    return expiry_date\\n\\texcept Exception as e:\\n\\t    return \\\"\\\"\\n\\t\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Effective_From", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/8056d654-03d5-4c26-a9b5-abfd4a9c3ef5.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Incepts_On\",\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17148\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_inception_date(Incepts_On, context = {}, keys = {}, **kwargs):\\n\\tif Incepts_On :\\n\\t  return Incepts_On\\n\\telse:\\n\\t  return ''\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_inception_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Main_Cover_Type", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Main_Cover_Type\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"If the cover type got multiple values as comma separated, then return the first one, otherwise return the cover type as is without any additional text.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Main_Cover_Type@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/aa061384-f9de-4b55-88b9-d708db07954e.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type@1\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17147\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_cover_type(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\tdef contains_only_quotes(s):\\n\\t  return all(c in {'\\\"', \\\"'\\\"} for c in s)\\n\\t\\n\\tprevious_line = previous_line.strip()\\n\\tif previous_line:\\n\\t  if contains_only_quotes(previous_line):\\n\\t    print('1')\\n\\t    return 'Comp'\\n\\t  else :\\n\\t    print('2')\\n\\t    return previous_line\\n\\tprint('3')\\n\\treturn 'Comp'\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_cover_type\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type@1\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Risk_Postcode", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"insured_address: {{ \\\\ Party Address \\\\}}\\n\\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\\n\\nIf no post code is found, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Party_Address\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Party_Address\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_List", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Excess_List\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Unique_Values_in_Cover_On_Policy", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/27f2ae79-e1fb-4d95-a90d-04339f0b3387.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Excess_List\",\"data_type\":\"FIELD\",\"value\":\"Excess_List\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17157\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_unique_values_from_cover_vehicle(Excess_List, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t\\n\\t\\n\\ttable = json.loads(Excess_List)\\n\\t\\n\\tif Excess_List in ['',None,'N/A', '[]', []]:\\n\\t  return \\\"None\\\"\\n\\t\\n\\tExcess_List = convert_to_dataframe(table)\\n\\tunique_vals = Excess_List['Cover On Policy'].unique().tolist()\\n\\tunique_vals = [each_val for each_val in unique_vals if each_val not in ['N/A', \\\"\\\", None, \\\"null\\\"]]\\n\\tif unique_vals:\\n\\t    return unique_vals\\n\\telse:\\n\\t    return \\\"None\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_unique_values_from_cover_vehicle\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Excess_List\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "cover_mapping", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"For each row in the list {{ \\\\ Unique Values in Cover On Policy \\\\ }}, generate a dictionary mapping with the original value mapped to a category based on cover types.\\n\\n**Valid_cover_types**: \\n- \\\"Comprehensive(COMP)\\\" (also treat \\\"Comp\\\", \\\"COMP\\\", \\\"Comprehensive\\\" as equivalent to this)\\n- \\\"Third Party Fire and Theft(TPFT)\\\" (include variations like \\\"TPFT\\\", \\\"Third Party Fire &amp; Theft\\\")\\n- \\\"Third Party Only(TPO)\\\" (include \\\"TPO\\\", \\\"Third Party\\\")\\n- \\\"Laid up ADFT\\\"\\n- \\\"Laid up FT\\\"\\n- \\\"Mixed Cover\\\"\\n\\n**Mapping Rules**:\\n1) If all values in a row (after normalization) are Comprehensive(COMP) \\u2192 map to \\\"All Comprehensive\\\"\\n(This must include variations like \\u201cComp\\u201d, \\u201cCOMP\\u201d, \\u201cComprehensive\\u201d as meaning \\\"Comprehensive(COMP)\\\")\\n\\n2) If all values in a row are Third Party Fire and Theft(TPFT) \\u2192 map to \\\"All Third Party Fire and Theft\\\"\\n\\n3) If values are Third Party Only(TPO) \\u2192 map to \\\"All Third Party Only\\\"\\n\\n4) If the row contains Comprehensive(COMP) (or its variations) along with other valid cover types \\u2192 map to \\\"Mixed cover including Comprehensive\\\"\\n\\n5) If the row contains more than one valid cover type present in Valid_cover_types excluding Comprehensive(COMP) \\u2192 map to \\\"Mixed cover excluding Comprehensive\\\"\\n\\n6) If any value in the row is not part of the Valid_cover_types or their known variations, map the entire row to \\\"\\\" (empty string). For example, the text \\\"Insurance company\\\" is not present in Valid_cover_types, so map it to \\\"\\\" (empty string).\\n\\nExample Output Format :\\n\\nInput : [\\n             \\\"TPO, TPFT\\\",\\n             \\\"Comp, TPFT\\\",\\n             \\\"Comp, Comp\\\", \\n              \\\"Any Insurance company\\\"\\n             ]\\n\\nOutput : \\n {\\n\\\"TPO, TPFT\\\": \\\"Mixed cover excluding Comprehensive\\\",\\n\\\"Comp, TPFT\\\": \\\"Mixed cover including Comprehensive\\\",\\n\\\"Comp, Comp\\\": \\\"All Comprehensive\\\",\\n \\\"Any Insurance company\\\": \\\"\\\" \\n}\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Unique_Values_in_Cover_On_Policy\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Unique_Values_in_Cover_On_Policy\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_Accident_Damage_CCE", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the {{ \\\\ Excess List \\\\ }} use the 'Period' column to identify the recent year and return the 'AD Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess Value', showing only the most recent year's value\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"OBJECT_LIST\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Excess_List\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Excess_List\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"OBJECT_LIST\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the extracted text, return only the clean numeric data associated with **Excess Value**.\\nIf no Excess Value is found, return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Accident_Damage_CCE@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_Fire_CCE", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the ** \\\\ Excess List \\\\** use the 'Period' column to identify the recent year and return the recent 'Fire Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess Value', showing only the most recent year's value\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"OBJECT_LIST\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Excess_List\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Excess_List\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"OBJECT_LIST\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the extracted text, return only the clean numeric data associated with **Excess Value**.\\nIf no Excess Value is found, return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Fire_CCE@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_Theft_CCE", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the \\\\ Excess List \\\\ use the 'Period' column to identify the recent year and return the 'Theft Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess Value', showing only the most recent year's value\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"OBJECT_LIST\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Excess_List\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Excess_List\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"OBJECT_LIST\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the extracted text, return only the clean numeric data associated with **Excess Value**.\\nIf no Excess Value is found, return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Theft_CCE@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_WS_CCE", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the \\\\ Excess List \\\\ use the 'Period' column to identify the recent year and return the 'WS Excess' value corresponding to it. The final output should be a well-formatted table with two columns: 'Period' column which is extactly there in the table and 'Excess value', showing only the most recent year's value\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"OBJECT_LIST\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Excess_List\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Excess_List\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"OBJECT_LIST\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the extracted text, return only the clean numeric data associated with **Excess value**.\\nIf no Excess Value is found, return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_WS_CCE@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "CCE_Data", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"CCE_Data\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Policy_Dates", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"CCE_Data: { \\\\ CCE Data \\\\}\\u2028\\nPolicy_Inception_Date: { \\\\ Incepts On \\\\}\\n\\nEach row in CCE_Data has a **Period** value. It can be a full date range 01/01/2023 - 31/12/2023, a year range 2020-2021 or 05/2020 - 06/2020 or a single year 2020.\\n\\nIf only years are present, use the day and month from the Policy_Inception_Date to build full dates. if month and year is present use date from the Policy_Inception_date to build full dates.\\u2028\\nFor example, if Policy_Inception_Date is 15/06/2019 and Period is 2020-2021, the result should be 15/06/2020 and 15/06/2021.\\n\\nIf only 2020 is given, return 15/06/2020 as the start date and 15/06/2021 (exactly one year ahead as end date) . If the Period has full dates, keep them unchanged.\\n\\nIf Period is 11/2020 - 10/2021 use the date from the Policy_Inception_Date and result should be 15/11/2020 and 15/10/2021.\\n\\nIf Period is 24/10/17-23/10/18 then the result should be 24/10/2017 and 24/10/2018\\n\\nReturn a table with:\\u2028Period, Policy Period Start Date, Policy Period End Date, Used Inception Date (Yes/No) \\u2014 where \\u201cUsed Inception Date\\u201d indicates whether the Policy_Inception_Date was used to construct the full dates or not.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"OBJECT_LIST\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Incepts_On\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"CCE_Data\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Incepts_On\"}, {\"data_type\": \"FIELD\", \"value\": \"CCE_Data\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"OBJECT_LIST\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/ed218f77-4497-4f08-90b9-007c58b5d653.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Policy_Dates@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17166\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef business_logic_for_policy_inception_date(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\tfrom datetime import datetime, timedelta\\n\\t\\n\\t# Custom function\\n\\tdef add_one_year_minus_one_day(date_str):\\n\\t    try:\\n\\t        input_date = datetime.strptime(date_str, \\\"%d/%m/%Y\\\")\\n\\t        try:\\n\\t            one_year_later = input_date.replace(year=input_date.year + 1)\\n\\t        except ValueError:\\n\\t            temp_date = input_date + (datetime(input_date.year + 1, 3, 1) - datetime(input_date.year, 3, 1))\\n\\t            one_year_later = temp_date\\n\\t        final_date = one_year_later - timedelta(days=1)\\n\\t        return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t    except Exception as e:\\n\\t        print(e)\\n\\t        return ''\\n\\t\\n\\t\\n\\tdef convert_to_df(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assu  med as header\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\t\\n\\t\\n\\ttry:\\n\\t    previous_line = eval(previous_line)\\n\\t    dates_df = convert_to_df(previous_line)\\n\\texcept:\\n\\t  try:\\n\\t      previous_line = json.loads(previous_line)\\n\\t      dates_df = convert_to_df(previous_line)\\n\\t  except:\\n\\t      return previous_line\\n\\t\\n\\ttry:\\n\\t\\n\\t    # Iterate row-wise\\n\\t    for index, row in dates_df.iterrows():\\n\\t        start_date = row['Policy Period Start Date']\\n\\t        \\n\\t        # Only update Policy Period End Date if Used Inception Date is 'Yes'\\n\\t        if str(row.get('Used Inception Date', '')).strip().lower() == 'yes':\\n\\t            dates_df.at[index, 'Policy Period End Date'] = add_one_year_minus_one_day(start_date)\\n\\t            print(\\\"Applied for \\\", row[\\\"Period\\\"])\\n\\t\\n\\t    # Clean up Period column after the loop\\n\\t    dates_df['Period'] = dates_df['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t\\n\\t    # Convert to list format for output\\n\\t    final_df = [dates_df.columns.tolist()] + dates_df.values.tolist()\\n\\t    return final_df\\n\\t\\n\\t    # print(dates_df.columns)\\n\\t    # Iterate row-wise\\n\\t    # for index, row in dates_df.iterrows():\\n\\t    #     start_date = row['Policy Period Start Date']\\n\\t    #     dates_df.at[index, 'Policy Period End Date'] = add_one_year_minus_one_day(start_date)\\n\\t    #     dates_df['Period'] = dates_df['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t\\n\\t    #     final_df = [dates_df.columns.tolist()] + dates_df.values.tolist()\\n\\t    # return final_df\\n\\t\\n\\texcept:\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"business_logic_for_policy_inception_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Policy_Dates@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Period", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/63bffd27-74c9-4931-9633-a97487e35650.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"CCE_Data\",\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"name\":\"Policy_Dates\",\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17150\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_period_list(CCE_Data, Policy_Dates, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\t\\n\\tdef convert_to_df(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assu  med as header\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\t\\n\\ttry:\\n\\t    try:\\n\\t        Policy_Dates = eval(Policy_Dates)    \\n\\t    except:\\n\\t        Policy_Dates = json.loads(Policy_Dates)   \\n\\t\\n\\t    Policy_Dates = convert_to_df(Policy_Dates)\\n\\t    Policy_Dates = Policy_Dates.astype(str)\\n\\t    print(Policy_Dates.columns)\\n\\t    CCE_Policy_start_dates_List = Policy_Dates[['Policy Period Start Date']].values.tolist()\\n\\t    filtered_vals = [each_val for each_val in CCE_Policy_start_dates_List if each_val not in [\\\"N/A\\\",\\\"\\\",None,\\\"null\\\"]]\\n\\t    if len(filtered_vals)>=1:\\n\\t      return [[\\\"Policy Period Start Date\\\"]] + CCE_Policy_start_dates_List\\n\\t    else:\\n\\t      CCE_Period_List = Policy_Dates[['Period']].values.tolist()\\n\\t      return [\\\"Policy Period Start Date\\\"] + [CCE_Period_List]\\n\\texcept Exception as e:\\n\\t    print(e)\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_period_list\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Year", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"claims_period: {{ \\\\ Period \\\\}}\\nYou are given a list called claim_periods.\\n\\nYou are given a list called claim_periods.\\nEach item in the list is a period, which may be:\\nin full year format like \\\"31/01/2023\\\"\\nOr in year format like \\\"2023\\\"\\n\\nYour task is:\\n1. Extract the **starting year** for each row as mentioned.\\n2. Sort the periods by starting year in **descending** order.\\n3. Give a **Year** to each period starting from 1 (most recent = 1).\\n\\nIgnore any periods that don\\u2019t contain a valid year.\\nReturn the final output as a table with two columns: 'Policy Period Start Date' , 'Year'\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Period\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Period\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/a3e52338-cea1-4b4c-9853-cdefea183906.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Year@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17155\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef refine_result(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\t\\n\\tdef convert_to_df(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assu  med as header\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\t\\n\\tcolumns_order = [\\\"Policy Period Start Date\\\", \\\"Year\\\"]\\n\\t\\n\\tprint(previous_line)\\n\\ttry:\\n\\t    if previous_line in [\\\"N/A\\\", \\\"[]\\\", \\\"\\\",  None, \\\"null\\\"]:\\n\\t      return [columns_order]\\n\\t    try:\\n\\t        df = eval(previous_line)    \\n\\t    except:\\n\\t        df = json.loads(previous_line)   \\n\\t\\n\\t    df = convert_to_df(df)\\n\\t    df = df.astype(str)\\n\\t    if len(df.columns.tolist()) > 0:\\n\\t        return [df.columns.tolist()] + df.values.tolist()\\n\\t    else:\\n\\t        return [columns_order]\\n\\texcept Exception as e:\\n\\t    print(e)\\n\\t    return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"refine_result\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Year@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Transaction_Type", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/be13889c-b9d8-4b1e-911a-71aeaa1ab396.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17151\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_transaction_type(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"New Business\\\"\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_transaction_type\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Effective_To", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/0127a7f4-acb8-4d46-97a0-4afb22dc69a0.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Expires_On\",\"data_type\":\"FIELD\",\"value\":\"Expires_On\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17154\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_expiry_date(Expires_On, context = {}, keys = {}, **kwargs):\\n\\treturn Expires_On\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_expiry_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Expires_On\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "CCE_Table", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/50ff88af-5163-44be-9002-073fd2b3b72a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Excess_List\",\"data_type\":\"FIELD\",\"value\":\"Excess_List\"},{\"name\":\"CCE_Data\",\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"name\":\"Year\",\"data_type\":\"FIELD\",\"value\":\"Year\"},{\"name\":\"cover_mapping\",\"data_type\":\"FIELD\",\"value\":\"cover_mapping\"},{\"name\":\"Policy_Dates\",\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17152\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef form_CCE_table(Excess_List, CCE_Data, Year, cover_mapping, Policy_Dates, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\timport numpy as np\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assumed as header\\n\\t            # print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\ttry:\\n\\t  try:\\n\\t      Excess_List = json.loads(Excess_List)\\n\\t      Excess_List = convert_to_dataframe(Excess_List)\\n\\t      if \\\"Period\\\" in Excess_List.columns:\\n\\t          Excess_List[\\\"Period\\\"] = Excess_List[\\\"Period\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      \\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t  try:\\n\\t      CCE_Data = json.loads(CCE_Data)\\n\\t      CCE_Data = convert_to_dataframe(CCE_Data)\\n\\t      if \\\"Period\\\" in CCE_Data.columns:\\n\\t          CCE_Data[\\\"Period\\\"] = CCE_Data[\\\"Period\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      \\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t  try:\\n\\t      Policy_Dates = json.loads(Policy_Dates)\\n\\t      Policy_Dates = convert_to_dataframe(Policy_Dates)\\n\\t      if \\\"Period\\\" in Policy_Dates.columns:\\n\\t          Policy_Dates[\\\"Period\\\"] = Policy_Dates[\\\"Period\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      if \\\"Policy Period Start Date\\\" in Policy_Dates.columns:\\n\\t          Policy_Dates[\\\"Policy Period Start Date\\\"] = Policy_Dates[\\\"Policy Period Start Date\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      \\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t\\n\\t  # try:\\n\\t  #     Insurer_Data = json.loads(Insurer_Data)\\n\\t  #     Insurer_Data = convert_to_dataframe(Insurer_Data)\\n\\t  # except Exception as e:\\n\\t  #     print(e)\\n\\t\\n\\t  try:\\n\\t      Year = json.loads(Year)\\n\\t      Year = convert_to_dataframe(Year)\\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t\\n\\t\\n\\t  ## Merging the data to form final CCE table\\n\\t  try:\\n\\t      CCE_Data['Period'] = CCE_Data['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t      Excess_List['Period'] = Excess_List['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t      merged_df1 = pd.merge(CCE_Data, Excess_List,  on='Period', how='inner')\\n\\t  except:\\n\\t      merged_df1 = CCE_Data.copy()\\n\\t      \\n\\t      print(\\\"Exception in merging claims info\\\")\\n\\t  \\n\\t  # print(merged_df1)\\n\\t  \\n\\t  # merged_df = [merged_df1.columns.tolist()] + merged_df1.values.tolist()\\n\\t  # return merged_df\\n\\t  \\n\\t  try:\\n\\t      merged_df2 = pd.merge(merged_df1, Policy_Dates,  on='Period', how='inner')\\n\\t  except Exception as e:\\n\\t      merged_df2 = merged_df1.copy()\\n\\t      print(\\\"Exception in merging policy info\\\")\\n\\t\\n\\t  \\n\\t\\n\\t  # merged_df = [merged_df2.columns.tolist()] + merged_df2.values.tolist()\\n\\t  # return merged_df\\n\\t  \\n\\t  # print(merged_df2['Period'])\\n\\t  # print(Insurer_Data['Period'])\\n\\t  \\n\\t  # try:\\n\\t  #     merged_df3 = pd.merge(merged_df2, Insurer_Data,  on='Period', how='inner')\\n\\t  # except:\\n\\t  #     merged_df3 = merged_df2.copy()\\n\\t  #     print(\\\"Exception in merging all details\\\")\\n\\t\\n\\t  \\n\\t  try:    \\n\\t      merged_df = pd.merge(merged_df2, Year,  on='Policy Period Start Date', how='inner')\\n\\t  except:\\n\\t      merged_df = merged_df2.copy()\\n\\t      print(\\\"Exception in merging Year info\\\")\\n\\t\\n\\t  try:\\n\\t      merged_df = merged_df.sort_values(\\n\\t      by=\\\"Policy Period Start Date\\\",  # replace with your actual column name\\n\\t      ascending=False\\n\\t      )\\n\\t  except:\\n\\t      merged_df = merged_df.copy()\\n\\t\\n\\t  try:\\n\\t      # Assign rank (1 = most recent, increasing for older dates)\\n\\t      merged_df[\\\"Year\\\"] = merged_df[\\\"Policy Period Start Date\\\"].rank(\\n\\t          method=\\\"dense\\\", ascending=False\\n\\t      ).astype(int)\\n\\t  except:\\n\\t      merged_df = merged_df.copy()\\n\\t\\n\\t\\n\\t  try:\\n\\t      merged_df = merged_df.sort_values(\\n\\t      by=\\\"Policy Period Start Date\\\",  # replace with your actual column name\\n\\t      ascending=True\\n\\t      )\\n\\t  except:\\n\\t      merged_df = merged_df.copy()\\n\\t\\n\\t  \\n\\t\\n\\t\\n\\t  \\n\\t  try:\\n\\t    cover_mapping = json.loads(cover_mapping)\\n\\t    merged_df['Cover on Policy - Mapped'] = merged_df['Cover On Policy'].map(cover_mapping)\\n\\t  except Exception as e:\\n\\t    print(e)\\n\\t    merged_df = merged_df.copy()\\n\\t\\n\\t  rename_dict = {\\n\\t      'AD Excess': 'Excess: AD',\\n\\t      'Theft Excess': 'Excess: Theft',\\n\\t      'Fire Excess': 'Excess: Fire',\\n\\t      'WS Excess': 'Excess: WS',\\n\\t      'Cover On Policy': 'Cover on Policy',\\n\\t      'Vehicle Years Earned': 'Vehicle Years Earned',\\n\\t      'Claim Count': 'Claim Count: All',\\n\\t      # 'no of claims windscreen': 'Claim Count: WS',\\n\\t      'Incurreds Paid AD WS': 'Incurreds - Paid: AD&WS',\\n\\t      'Incurreds Paid FT': 'Incurreds - Paid: FT',\\n\\t      'Incurreds Paid TP': 'Incurreds - Paid: TP',\\n\\t      'Incurreds Outstanding AD WS': 'Incurreds - Outstanding: AD&WS',\\n\\t      'Incurreds Outstanding FT': 'Incurreds - Outstanding: FT',\\n\\t      'Incurreds Outstanding TP': 'Incurreds - Outstanding: TP',\\n\\t      'Total Incurred': 'Total Incurred Paid +  Outstanding',\\n\\t      'Policy Period Start Date': 'Policy Year Start Date',\\n\\t      'Policy Period End Date': 'Policy Year End Date'\\n\\t  }\\n\\t\\n\\t  safe_rename_dict = {k: v for k, v in rename_dict.items() if k in merged_df.columns}\\n\\t\\n\\t  merged_df.rename(columns=safe_rename_dict, inplace=True)\\n\\t\\n\\t  try:\\n\\t      merged_df['Claim Count: WS'] = ''\\n\\t  except Exception as e:\\n\\t    print(e)\\n\\t  \\n\\t\\n\\t  columns_order = [ 'Year', 'Policy Year Start Date', \\\\\\n\\t                'Policy Year End Date', \\n\\t                'Insurer', \\n\\t                'Excess: AD',\\\\\\n\\t                'Excess: Fire', \\\\\\n\\t                'Excess: Theft', \\\\\\n\\t                'Excess: WS', \\\\\\n\\t                'Cover on Policy', \\\\\\n\\t                'Cover on Policy - Mapped',\\n\\t                 'Vehicle Years Earned', \\n\\t                'Claim Count: All', \\\\\\n\\t                'Claim Count: WS', \\\\\\n\\t                'Incurreds - Paid: AD&WS', \\\\\\n\\t                'Incurreds - Paid: FT', \\\\\\n\\t                'Incurreds - Paid: TP', \\n\\t                'Incurreds - Outstanding: AD&WS', \\\\\\n\\t                'Incurreds - Outstanding: FT' ,\\n\\t                'Incurreds - Outstanding: TP', \\\\\\n\\t                'Total Incurred Paid +  Outstanding']\\n\\t\\n\\t  # existing_columns = [col for col in columns_order if col in merged_df.columns]           \\n\\t               \\n\\t  # print(merged_df.columns)\\n\\t  merged_df.replace('N/A', '', inplace=True)\\n\\t\\n\\t  merged_df = merged_df.replace({None: np.nan, \\\"\\\": np.nan})\\n\\t  merged_df = merged_df.dropna(how='all')\\n\\t  \\n\\t  merged_df = merged_df.fillna('')\\n\\t\\n\\t  # merged_df = merged_df[existing_columns]\\n\\t\\n\\t  for col in columns_order:\\n\\t    if col not in merged_df.columns:\\n\\t      merged_df[col] = '' \\n\\t\\n\\t\\n\\t  if len(merged_df.columns.tolist()) > 0:\\n\\t      merged_df = merged_df[columns_order]\\n\\t      merged_df = [merged_df.columns.tolist()] + merged_df.values.tolist()\\n\\t      return merged_df\\n\\t  else:\\n\\t      return [columns_order]\\n\\texcept Exception as e:\\n\\t  print(e)\\n\\t  return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"form_CCE_table\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Excess_List\"},{\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"data_type\":\"FIELD\",\"value\":\"Year\"},{\"data_type\":\"FIELD\",\"value\":\"cover_mapping\"},{\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Number_Of_Years_Claims_Experience", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/aca56f8b-8e63-4c8d-b852-fdb50c801233.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"CCE_Data\",\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"name\":\"CCE_Table\",\"data_type\":\"FIELD\",\"value\":\"CCE_Table\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17149\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_years_count_from_CCE(CCE_Data, CCE_Table, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport pandas as pd\\n\\timport json\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\t\\n\\ttry:\\n\\t    try:\\n\\t        CCE_Table = eval(CCE_Table)\\n\\t    except:\\n\\t        CCE_Table = json.loads(CCE_Table)\\n\\t    try:\\n\\t        CCE_Table = convert_to_dataframe(CCE_Table)\\n\\t        CCE_Table_rows = CCE_Table.shape[0]\\n\\t        return CCE_Table_rows\\n\\t    except:\\n\\t        return 0\\n\\texcept:\\n\\t    return \\\"Exception in code\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_years_count_from_CCE\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"data_type\":\"FIELD\",\"value\":\"CCE_Table\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Business_Category", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/715dda7c-ee41-4c83-941c-fa9f5fa793c5.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17156\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_business_category(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"Mid Market\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_business_category\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Main_Cover_Type_Mapped", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Main_cover_type : {{ \\\\ Main Cover Type \\\\ }}\\n\\nValid Normalized Types:\\n\\n1) COMP \\u2192 includes: \\\"Comp\\\", \\\"COMP\\\", \\\"Comprehensive\\\", \\\"Comprehensive Cover\\\"\\n\\n2) TPFT \\u2192 includes: \\\"TPFT\\\", \\\"Third Party Fire and Theft\\\", \\\"Third Party, Fire and Theft\\\", \\\"Third Party Fire &amp; Theft\\\"\\n\\n3) TPO \\u2192 includes: \\\"TPO\\\", \\\"Third Party Only\\\", \\\"Third Party\\\"\\n\\n4) Laid up (ADFT) \\u2192 includes: \\\"Laid Up (Accidental Damage, Fire, and Theft)\\\", \\\"Laid Up ADFT\\\", \\\"Laid-Up ADFT\\\"\\n\\n5) Laid up (FT Only) \\u2192 includes: \\\"Laid Up (Fire and Theft)\\\", \\\"LUFT\\\", \\\"Laid-Up FT\\\"\\n\\nInstructions:\\n\\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\\n\\nIf matched, return the normalized type exactly as listed above.\\n\\nIf no valid match, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Main_Cover_Type\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Main_Cover_Type\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/2100afba-56b7-4c65-a46e-e4bcd687e927.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type_Mapped@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17158\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_cover_type_mapped(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\t# return previous_line\\n\\t\\n\\tdef contains_only_quotes(s):\\n\\t  return all(c in {'\\\"', \\\"'\\\"} for c in s)\\n\\t\\n\\tprevious_line = previous_line.strip()\\n\\tif previous_line:\\n\\t  if contains_only_quotes(previous_line):\\n\\t    print('1')\\n\\t    return 'COMP'\\n\\t  else :\\n\\t    print('2')\\n\\t    return previous_line\\n\\tprint('3')\\n\\treturn 'COMP'\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_cover_type_mapped\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type_Mapped@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Details", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are an intelligent address extraction assistant.\\n\\nGiven a full address string {{ \\\\ Party Address \\\\}}, extract the following components:\\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\\nAddress Line 2: Estate, locality, landmark, or additional location detail\\nAddress Line 3: Optional detail like block, zone, village, or area\\nCity: Town or city name\\nState: The state, province, or region\\nCountry: Country name\\nPostcode: postal code (UK format)\\n\\nExtraction Rules:\\nDo not merge unrelated fields across lines\\nDo not confuse postcode with city/state.\\nReturn empty strings if any field is missing for that component \\n{\\n  \\\"Address Line 1\\\": \\\"\\\",\\n  \\\"Address Line 2\\\": \\\"\\\",\\n  \\\"Address Line 3\\\": \\\"\\\",\\n  \\\"City\\\": \\\"\\\",\\n  \\\"State\\\": \\\"\\\",\\n  \\\"Country\\\": \\\"\\\",\\n  \\\"Postcode\\\": \\\"\\\"\\n}\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Party_Address\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Party_Address\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_1", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/3ad831bf-7d05-4fe5-bf20-80ab485cf26a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17165\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line1(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"Line_1\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 1\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line1\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_2", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/41a0e4ed-4974-4ec4-8a9a-f86f0bb2d734.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17159\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line2(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"Line_2\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 2\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line2\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_3", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/e0e9b876-e813-4087-8d5c-4e941390f8d7.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17160\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line3(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"Line_3\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"Address Line 3\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line3\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Country", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/d4fb0f9f-a986-4360-9de0-9cca634d5097.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17161\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"Country\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"Country\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_State", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/fafe17be-052c-480d-815b-bb75b9fa4236.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17162\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"County_State\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"State\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Postcode", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/6e789b2b-ea5c-4a9a-ae6b-75a66af78baf.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17164\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"County_State\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"Postcode\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_City", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/6051f69f-2762-4548-88b2-568ad2dc398a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17163\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t# import json\\n\\t# key = \\\"Town_City\\\"\\n\\t# def extract_first_json_object(text):\\n\\t#   start = text.find('{')\\n\\t#   if start == -1:\\n\\t#     return None\\n\\t#   brace_count = 0\\n\\t#   end = None\\n\\t#   for i in range(start, len(text)):\\n\\t#     if text[i] == '{':\\n\\t#         brace_count += 1\\n\\t#     elif text[i] == '}':\\n\\t#         brace_count -= 1\\n\\t#         if brace_count == 0:\\n\\t#           end = i\\n\\t#           break\\n\\t#   if end is None:\\n\\t#       return None\\n\\t#   return text[start:end+1]\\n\\t\\n\\t\\n\\t# if not Party_Address_Intermediate_Object:\\n\\t#   return None\\n\\t# json_part = extract_first_json_object(Party_Address_Intermediate_Object)\\n\\t# if json_part is None:\\n\\t#   return None\\n\\t# try:\\n\\t#   data = json.loads(json_part)\\n\\t#   value = data.get(key)\\n\\t#   return str(value) if value is not None else None\\n\\t# except json.JSONDecodeError:\\n\\t#   return None\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"City\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Trade_Descriptions", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/3bd30549-1d9d-42fe-831d-0af802ce1c4c.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17167\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(context = {}, keys = {}, **kwargs):\\n\\tdata = [\\n\\t  {\\n\\t    \\\"trade\\\": \\\"General Manufacturing\\\",\\n\\t    \\\"aliases\\\": [\\\"steel\\\", \\\"metal\\\", \\\"samples\\\", \\\"manufacturing of glass\\\", \\\"manufacturing of furniture\\\", \\\"manufacturing\\\", \\\"general manufacturing\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Fleet - Unclassified\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Contractor\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Builders\\\",\\n\\t    \\\"aliases\\\": [\\\"Building Contractors\\\", \\\"house builders\\\", \\\"builders\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Hauliers UK only\\\",\\n\\t    \\\"aliases\\\": [\\\"haulage contractors - uk only\\\", \\\"hauliers uk only\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Electrician\\\",\\n\\t    \\\"aliases\\\": [\\\"Electrical Contractors\\\", \\\"electrical installation\\\", \\\"electrical testing\\\", \\\"electrician\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Plumbing & Heating Engineer\\\",\\n\\t    \\\"aliases\\\": [\\\"plumbing & heating contractors\\\", \\\"gas servicing\\\", \\\"boiler maintenance\\\", \\\"plumber\\\", \\\"heating engineer\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Engineering\\\",\\n\\t    \\\"aliases\\\": [ \\\"engineers\\\", \\\"mechanical engineers\\\", \\\"engineering\\\", \\\"electrical engineers\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Civil engineering\\\",\\n\\t    \\\"aliases\\\": [\\\"civil engineering\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Scaffolding Contractors\\\",\\n\\t    \\\"aliases\\\": [\\\"scaffolders\\\", \\\"scaffolding contractors\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Wholesale (non food and drink)\\\",\\n\\t    \\\"aliases\\\": [\\\"wholesalers of electrical components\\\", \\\"building materials\\\", \\\"wholesale\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Cleaning Contractors\\\",\\n\\t    \\\"aliases\\\": [\\\"domestic cleaners\\\", \\\"office cleaners\\\", \\\"cleaning contractors\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Plant Hire\\\",\\n\\t    \\\"aliases\\\": [\\\"plant hire operator\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Food & Drink Wholesale\\\",\\n\\t    \\\"aliases\\\": [\\\"cash & carry\\\", \\\"beer & wine wholesalers\\\", \\\"food wholesalers\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Retail (non food and drink)\\\",\\n\\t    \\\"aliases\\\": [\\\"department store\\\", \\\"shopping centre\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Property Owners\\\",\\n\\t    \\\"aliases\\\": [\\\"landlords\\\", \\\"commercial property owners\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Telecommunications & IT\\\",\\n\\t    \\\"aliases\\\": [\\\"telecommunications installation\\\", \\\"it installation\\\", \\\"it services\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Double Glazing\\\",\\n\\t    \\\"aliases\\\": [\\\"double glazing manufacture\\\", \\\"double glazing installation\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Landscape Gardener\\\",\\n\\t    \\\"aliases\\\": [\\\"gardening\\\", \\\"landscape gardener\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Other Prof/Sci/Tech\\\",\\n\\t    \\\"aliases\\\": [\\\"laboratory\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Removal Contractor\\\",\\n\\t    \\\"aliases\\\": [\\\"removals and storage\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Security and investigation\\\",\\n\\t    \\\"aliases\\\": [\\\"private detectives\\\", \\\"security guarding\\\", \\\"security services\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Builders Merchant\\\",\\n\\t    \\\"aliases\\\": [\\\"building supplies\\\", \\\"suppliers of aggregates\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Service Engineers\\\",\\n\\t    \\\"aliases\\\": [\\\"mechanical servicing\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Asphalters/Pavers/Engineers\\\",\\n\\t    \\\"aliases\\\": [\\\"road maintenance\\\", \\\"road surfacing\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Flooring and Carpet\\\",\\n\\t    \\\"aliases\\\": [\\\"carpet fitters\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Leisure Industry\\\",\\n\\t    \\\"aliases\\\": [\\\"nightclub\\\", \\\"pub\\\", \\\"leisure centre\\\", \\\"gym\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Social Religious or Charitable\\\",\\n\\t    \\\"aliases\\\": [\\\"charity\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Business Services\\\",\\n\\t    \\\"aliases\\\": [\\\"document storage\\\", \\\"administration\\\", \\\"consultants\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Food & Drink Services\\\",\\n\\t    \\\"aliases\\\": [\\\"food delivery\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Food & Drink Retail\\\",\\n\\t    \\\"aliases\\\": [\\\"restaurant\\\", \\\"pub\\\", \\\"takeaway\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Estate Agent\\\",\\n\\t    \\\"aliases\\\": [\\\"lettings agents\\\", \\\"estate agent\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Furniture Sale and Manufacture\\\",\\n\\t    \\\"aliases\\\": [\\\"furniture retail\\\", \\\"furniture showroom\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Leisure (Hotel, clubs & pubs)\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Shop Fitting\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"NHS Trust\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Import/Export\\\",\\n\\t    \\\"aliases\\\": [\\\"Import\\\", \\\"Export\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Catering\\\",\\n\\t    \\\"aliases\\\": [\\\"licensed catering\\\", \\\"unlicensed catering\\\", \\\"outside catering\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Residential Care\\\",\\n\\t    \\\"aliases\\\": [\\\"care homes\\\", \\\"retirement homes\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Manufacturing Timber/Furniture\\\",\\n\\t    \\\"aliases\\\": [\\\"joinery\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Printers and publishers\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Demolition Contractors\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Housing Association\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Timber Merchant\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Private Ambulance Service\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Hauliers Overseas\\\",\\n\\t    \\\"aliases\\\": [\\\"haulage contractors - overseas\\\", \\\"hauliers overseas\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Textiles & Clothing\\\",\\n\\t    \\\"aliases\\\": [\\\"clothing manufacturing\\\", \\\"textile manufacturing\\\", \\\"clothing retail\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Automotive Industry\\\",\\n\\t    \\\"aliases\\\": [\\\"vehicle manufacturing\\\", \\\"vehicle repairs\\\", \\\"vehicle parts manufacturing\\\", \\\"vehicle parts wholesale\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Pharmaceutical\\\",\\n\\t    \\\"aliases\\\": [\\\"pharmacy\\\", \\\"medical laboratories\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Farmer\\\",\\n\\t    \\\"aliases\\\": [\\\"dairy farmers\\\", \\\"arable farmers\\\", \\\"livestock farmers\\\"]\\n\\t  }\\n\\t]\\n\\t\\n\\treturn data\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "AXA_Trade_Description", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are a domain expert in classifying business descriptions.\\n\\nYou are given:\\n\\nTrades_List: { \\\\ Trade Descriptions \\\\} \\nBusiness_Description: { \\\\ Business Description \\\\}\\n\\nInstructions:\\nFor the business description provided:\\nCompare it against both the trade names and their aliases in Trades_List.\\nDetermine the closest and similar matching **trade**.\\nIf no suitable match is found, return \\\"Fleet - Unclassified\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Business_Description\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"Trade_Descriptions\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Business_Description\"}, {\"data_type\": \"FIELD\", \"value\": \"Trade_Descriptions\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/fb24f475-4b53-4bf5-b775-b792990858e7.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@0\"},{\"name\":\"Business_Description\",\"data_type\":\"FIELD\",\"value\":\"Business_Description\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17168\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef clean(previous_line, Business_Description, context = {}, keys = {}, **kwargs):\\n\\tprint(Business_Description)\\n\\tif Business_Description:\\n\\t  if Business_Description == \\\"\\\":\\n\\t      return \\\"\\\"\\n\\t  else:\\n\\t      return previous_line\\n\\telse:\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"clean\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@0\"},{\"data_type\":\"FIELD\",\"value\":\"Business_Description\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/5c6a4ec4-43a3-4600-b524-44f11810e67d.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@1\"},{\"name\":\"Trade_Descriptions\",\"data_type\":\"FIELD\",\"value\":\"Trade_Descriptions\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17169\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(previous_line, Trade_Descriptions, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tprint(repr(previous_line))\\n\\tif previous_line == '\\\"\\\"' or previous_line == '' or previous_line == \\\"\\\":\\n\\t    return \\\"\\\"\\n\\t\\n\\tif previous_line:\\n\\t\\n\\t  try:\\n\\t      Trade_Descriptions = eval(Trade_Descriptions)\\n\\t  except:\\n\\t      try:\\n\\t          Trade_Descriptions = json.loads(Trade_Descriptions)\\n\\t      except:\\n\\t          # return \\\"Fleet - Unclassified\\\"\\n\\t          return \\\"Fleet - Unclassified\\\"\\n\\t\\n\\t  Trade_Descriptions_ls = [item[\\\"trade\\\"].lower() for item in Trade_Descriptions]\\n\\t    \\n\\t  if previous_line.lower() in Trade_Descriptions_ls:\\n\\t    return previous_line\\n\\t  else:\\n\\t    return \\\"Fleet - Unclassified\\\"\\n\\telse:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@1\"},{\"data_type\":\"FIELD\",\"value\":\"Trade_Descriptions\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}]}