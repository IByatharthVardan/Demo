{"metadata": {"refiner_output_dir": "axauk/dev-si-fleet/fs/Instabase Drive/Production Flow/excel_50_trigger_17_july/aug18/master/output-yv4/s15_apply_refiner", "class_label": "Confirmed Claims Experience", "custom_code_path": "scripts"}, "validation_rules": [{"rule_id": "a8d52b88-2cb5-4750-bd41-c41fdf0e35b7", "rule_name": "Target Price Confidence", "conditions": [{"condition_id": "57b31e6c-6550-4172-849a-a8fb0fca7004", "type": "confidence", "affected_fields": ["Target_Price"], "class_affected_fields": [{"class": "Email", "field": "Target_Price"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "aad500ce-cc49-4b42-8d0e-b1b638dc90b7", "source": "57b31e6c-6550-4172-849a-a8fb0fca7004", "target": null, "result": "pass"}, {"edge_id": "efcf307f-b317-4f5f-95c7-e58761a1c04c", "source": "57b31e6c-6550-4172-849a-a8fb0fca7004", "target": null, "result": "fail"}]}, {"rule_id": "d3b589e2-a0f1-4ca9-a366-e3dab3cdc1c6", "rule_name": "Agency Enquiry Reference Confidence", "conditions": [{"condition_id": "9afc8329-f508-4090-a303-1c9ba5c00507", "type": "confidence", "affected_fields": ["Agency_Enquiry_Reference"], "class_affected_fields": [{"class": "Email", "field": "Agency_Enquiry_Reference"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "bb5918f1-7908-428a-ac0b-1cc4d79a719d", "source": "9afc8329-f508-4090-a303-1c9ba5c00507", "target": null, "result": "pass"}, {"edge_id": "86610205-9679-4813-8f84-4d8851707f90", "source": "9afc8329-f508-4090-a303-1c9ba5c00507", "target": null, "result": "fail"}]}, {"rule_id": "13f0ecd8-d540-4b42-ba24-a21cfbe2fc94", "rule_name": "Insured Confidence", "conditions": [{"condition_id": "282c97a3-e775-47e1-a27d-53cbb34be950", "type": "confidence", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Email", "field": "Insured"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "9d607cce-6ad5-4edd-8b34-3869b9962129", "source": "282c97a3-e775-47e1-a27d-53cbb34be950", "target": null, "result": "pass"}, {"edge_id": "c0c3588d-80cf-4dcc-8e2d-1eed5bb735f7", "source": "282c97a3-e775-47e1-a27d-53cbb34be950", "target": null, "result": "fail"}]}, {"rule_id": "9e709215-b66a-43bb-80d6-ab21f171c297", "rule_name": "Business Description Confidence", "conditions": [{"condition_id": "749058de-ba8f-4f69-b958-45fc0c068c52", "type": "confidence", "affected_fields": ["Business_Description"], "class_affected_fields": [{"class": "Email", "field": "Business_Description"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "c4c3621b-8fe2-4d82-9346-95b654fa63e5", "source": "749058de-ba8f-4f69-b958-45fc0c068c52", "target": null, "result": "pass"}, {"edge_id": "93b86eff-562e-4396-ab61-9010ef9fda16", "source": "749058de-ba8f-4f69-b958-45fc0c068c52", "target": null, "result": "fail"}]}, {"rule_id": "bde58d8f-3c2e-44c8-ba7f-a8b089c2f0d7", "rule_name": "Agency Name Confidence", "conditions": [{"condition_id": "ccb60f0d-568c-4f65-9806-673f9c280a84", "type": "confidence", "affected_fields": ["Agency_Name"], "class_affected_fields": [{"class": "Email", "field": "Agency_Name"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "97ab0040-974e-4728-a9ca-c1fe9dbe3c2d", "source": "ccb60f0d-568c-4f65-9806-673f9c280a84", "target": null, "result": "pass"}, {"edge_id": "0c335508-5b77-4138-9a1f-a056b0366edd", "source": "ccb60f0d-568c-4f65-9806-673f9c280a84", "target": null, "result": "fail"}]}, {"rule_id": "4a3546ed-7ffb-4fcb-ba12-dba4cc2c4b27", "rule_name": "Company House Reference Party Confidence", "conditions": [{"condition_id": "f5eb3040-0d29-49c2-958e-b8e3a9c68403", "type": "confidence", "affected_fields": ["Company_House_Reference_Party"], "class_affected_fields": [{"class": "Email", "field": "Company_House_Reference_Party"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "36f6c72b-780e-4578-b736-56b875d7b19d", "source": "f5eb3040-0d29-49c2-958e-b8e3a9c68403", "target": null, "result": "pass"}, {"edge_id": "1f93f25a-510b-4e8e-9484-2f9d4d08ebf4", "source": "f5eb3040-0d29-49c2-958e-b8e3a9c68403", "target": null, "result": "fail"}]}, {"rule_id": "98245285-8378-4c04-a9d2-ae504c7bbabd", "rule_name": "Date Established Confidence", "conditions": [{"condition_id": "139901f9-f8d7-425f-9caa-53963c4be988", "type": "confidence", "affected_fields": ["Date_Established"], "class_affected_fields": [{"class": "Email", "field": "Date_Established"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "3b15f81b-a75b-4775-be5b-169bfea530e8", "source": "139901f9-f8d7-425f-9caa-53963c4be988", "target": null, "result": "pass"}, {"edge_id": "066df97d-e15e-4cb2-a14b-b19c09e0f2d7", "source": "139901f9-f8d7-425f-9caa-53963c4be988", "target": null, "result": "fail"}]}, {"rule_id": "d0daeb76-54e9-4949-a6cd-8255050c95b3", "rule_name": "Party Address Confidence", "conditions": [{"condition_id": "b5014d00-ba12-43ad-bd75-9b77335fe3cd", "type": "confidence", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Email", "field": "Party_Address"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "a4d066ce-655a-4c4c-ac43-64b2498beb04", "source": "b5014d00-ba12-43ad-bd75-9b77335fe3cd", "target": null, "result": "pass"}, {"edge_id": "9776695c-ce59-46f6-9642-2e375e99c711", "source": "b5014d00-ba12-43ad-bd75-9b77335fe3cd", "target": null, "result": "fail"}]}, {"rule_id": "cb52d075-2a96-4753-8dce-0feae30e322b", "rule_name": "Incepts On Confidence", "conditions": [{"condition_id": "f30b0b61-638c-4d7f-8e40-173c645962a0", "type": "confidence", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Email", "field": "Incepts_On"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "945fce4f-98d7-472f-a021-9aec0f32c0a6", "source": "f30b0b61-638c-4d7f-8e40-173c645962a0", "target": null, "result": "pass"}, {"edge_id": "7efc60a9-374e-4359-a64b-b0db9332e90a", "source": "f30b0b61-638c-4d7f-8e40-173c645962a0", "target": null, "result": "fail"}]}, {"rule_id": "a3e89294-1b1c-4427-8c1b-11abc48103c5", "rule_name": "Main Cover Type Confidence", "conditions": [{"condition_id": "2b5e05ba-8e18-4703-8e6e-f5736ad11e9f", "type": "confidence", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Email", "field": "Main_Cover_Type"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "fcc851bc-6518-438a-bc1b-2893cb046d25", "source": "2b5e05ba-8e18-4703-8e6e-f5736ad11e9f", "target": null, "result": "pass"}, {"edge_id": "91264a4c-29b4-4f11-854a-9a7239e43676", "source": "2b5e05ba-8e18-4703-8e6e-f5736ad11e9f", "target": null, "result": "fail"}]}, {"rule_id": "fef06aef-5cff-4c99-8d58-66b62781952b", "rule_name": "Agency address Confidence", "conditions": [{"condition_id": "c9505fde-c63b-45dd-bd1c-7279d9c715cb", "type": "confidence", "affected_fields": ["Agency_address"], "class_affected_fields": [{"class": "Email", "field": "Agency_address"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "abc77f6f-7ef2-4ed2-a69b-d7a645968bff", "source": "c9505fde-c63b-45dd-bd1c-7279d9c715cb", "target": null, "result": "pass"}, {"edge_id": "7a42e384-ceab-4f46-bca8-486a801291c5", "source": "c9505fde-c63b-45dd-bd1c-7279d9c715cb", "target": null, "result": "fail"}]}, {"rule_id": "1f10eb19-be67-485e-be18-84418ef4bb71", "rule_name": "Agency Contact Confidence", "conditions": [{"condition_id": "d86a1c57-2fae-4e9f-8bd2-4e82380f477f", "type": "confidence", "affected_fields": ["Agency_Contact"], "class_affected_fields": [{"class": "Email", "field": "Agency_Contact"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "27ec491d-b2db-444c-8770-2ef73f541e4b", "source": "d86a1c57-2fae-4e9f-8bd2-4e82380f477f", "target": null, "result": "pass"}, {"edge_id": "6c656e2e-d154-42fc-aca3-2f39095fdb68", "source": "d86a1c57-2fae-4e9f-8bd2-4e82380f477f", "target": null, "result": "fail"}]}, {"rule_id": "e552997e-4fed-4ad7-b3aa-c9ee45a1fd02", "rule_name": "Excess Type Accident Damage Confidence", "conditions": [{"condition_id": "b1514c0a-858d-411e-a44a-3d224e4f01e7", "type": "confidence", "affected_fields": ["Excess_Type_Accident_Damage"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Accident_Damage"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "abb47247-5132-419a-8e70-4dd5e5cceaac", "source": "b1514c0a-858d-411e-a44a-3d224e4f01e7", "target": null, "result": "pass"}, {"edge_id": "01b80a10-af32-4263-9e8f-3a983564ea88", "source": "b1514c0a-858d-411e-a44a-3d224e4f01e7", "target": null, "result": "fail"}]}, {"rule_id": "f1973805-5ec2-4b45-8880-5a6ad920ea98", "rule_name": "Excess Type Fire Confidence", "conditions": [{"condition_id": "3dcbc331-cfb5-4ee8-b277-fc4f935a7136", "type": "confidence", "affected_fields": ["Excess_Type_Fire"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Fire"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "854340d2-aea9-412f-b57a-463c4f34a187", "source": "3dcbc331-cfb5-4ee8-b277-fc4f935a7136", "target": null, "result": "pass"}, {"edge_id": "5d3ed5f8-89a2-4117-ba72-880cd5e94632", "source": "3dcbc331-cfb5-4ee8-b277-fc4f935a7136", "target": null, "result": "fail"}]}, {"rule_id": "b20491fb-fba5-44ef-bfef-61997eef0906", "rule_name": "Excess Type Theft Confidence", "conditions": [{"condition_id": "19a6f268-41be-4e2e-a9d9-634a4d0f0179", "type": "confidence", "affected_fields": ["Excess_Type_Theft"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Theft"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "df4b57dd-2925-4043-8609-c20c8633dd78", "source": "19a6f268-41be-4e2e-a9d9-634a4d0f0179", "target": null, "result": "pass"}, {"edge_id": "97ad1ea7-94ab-4f6f-a43a-e6047e81847c", "source": "19a6f268-41be-4e2e-a9d9-634a4d0f0179", "target": null, "result": "fail"}]}, {"rule_id": "b23c40cc-ad97-437f-b6a8-c70497f3f1ec", "rule_name": "Excess Type WS Confidence", "conditions": [{"condition_id": "9a933a28-e08e-4f68-9348-a2d6087559c9", "type": "confidence", "affected_fields": ["Excess_Type_WS"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_WS"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "42d6722a-64cf-4468-ae4b-c33d0831a430", "source": "9a933a28-e08e-4f68-9348-a2d6087559c9", "target": null, "result": "pass"}, {"edge_id": "b6b13e0d-4695-473e-8ff7-fbe35ca6f01c", "source": "9a933a28-e08e-4f68-9348-a2d6087559c9", "target": null, "result": "fail"}]}, {"rule_id": "632f730a-352c-4c95-84b1-a76e842153d2", "rule_name": "Agency Code Confidence", "conditions": [{"condition_id": "ac4e048f-2693-4f3b-af99-063cb86d6fd2", "type": "confidence", "affected_fields": ["Agency_Code"], "class_affected_fields": [{"class": "Email", "field": "Agency_Code"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "bccbedcc-c254-4353-96ca-d5950b00b8af", "source": "ac4e048f-2693-4f3b-af99-063cb86d6fd2", "target": null, "result": "pass"}, {"edge_id": "c90821cd-aa04-46d9-b504-5f9340a0dceb", "source": "ac4e048f-2693-4f3b-af99-063cb86d6fd2", "target": null, "result": "fail"}]}, {"rule_id": "5cadb1d9-cda2-4cdf-b46d-24cd59889917", "rule_name": "Target Price Confidence", "conditions": [{"condition_id": "aa78766c-b0f9-4bba-90a9-53bb8c0a9aea", "type": "confidence", "affected_fields": ["Target_Price"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Target_Price"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "72151b3d-54af-4e8e-a2bd-41b4dd6d3181", "source": "aa78766c-b0f9-4bba-90a9-53bb8c0a9aea", "target": null, "result": "pass"}, {"edge_id": "cbf96da5-6edd-4d5d-a818-b2eb2a948fc5", "source": "aa78766c-b0f9-4bba-90a9-53bb8c0a9aea", "target": null, "result": "fail"}]}, {"rule_id": "7403fa7f-6cc8-4f7a-90da-93d69776fb31", "rule_name": "Agency Enquiry Reference Confidence", "conditions": [{"condition_id": "045148a1-9aa4-4442-8d90-ecc4dd0d3e83", "type": "confidence", "affected_fields": ["Agency_Enquiry_Reference"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Agency_Enquiry_Reference"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "bb04fcda-01ec-4de9-b84a-30c759a73a82", "source": "045148a1-9aa4-4442-8d90-ecc4dd0d3e83", "target": null, "result": "pass"}, {"edge_id": "d4ec87f9-a7e9-47bb-aa0e-7b05ffd94f34", "source": "045148a1-9aa4-4442-8d90-ecc4dd0d3e83", "target": null, "result": "fail"}]}, {"rule_id": "e683efc2-e523-44ac-87a7-908c16e37e1b", "rule_name": "Insured Confidence", "conditions": [{"condition_id": "2512752b-daff-4cc2-982a-b69e648f92aa", "type": "confidence", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Insured"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "e01a6337-e25f-4908-92ae-dfe461db321f", "source": "2512752b-daff-4cc2-982a-b69e648f92aa", "target": null, "result": "pass"}, {"edge_id": "252dd952-434f-4691-8a26-306e45bdc568", "source": "2512752b-daff-4cc2-982a-b69e648f92aa", "target": null, "result": "fail"}]}, {"rule_id": "d77c7e23-d04d-481f-a659-26a3bd5c6686", "rule_name": "Business Description Confidence", "conditions": [{"condition_id": "88841cdd-43b8-4f38-bb44-5bad094d9d60", "type": "confidence", "affected_fields": ["Business_Description"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Business_Description"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "a400b144-ed49-421e-89e5-7d9254c447e9", "source": "88841cdd-43b8-4f38-bb44-5bad094d9d60", "target": null, "result": "pass"}, {"edge_id": "7fa00236-f1ad-4942-bf84-6cbf63f48d2c", "source": "88841cdd-43b8-4f38-bb44-5bad094d9d60", "target": null, "result": "fail"}]}, {"rule_id": "bf954bf5-9332-4da6-9d4e-d9fd271473f8", "rule_name": "Agency Name Confidence", "conditions": [{"condition_id": "a4807f03-2ce9-4e33-89ea-3efdd500a4f3", "type": "confidence", "affected_fields": ["Agency_Name"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Agency_Name"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "d9f65c28-30d1-40ff-aa66-3c30d8ba375d", "source": "a4807f03-2ce9-4e33-89ea-3efdd500a4f3", "target": null, "result": "pass"}, {"edge_id": "5638bacf-09ae-4607-98f7-2f87ee59509e", "source": "a4807f03-2ce9-4e33-89ea-3efdd500a4f3", "target": null, "result": "fail"}]}, {"rule_id": "dc51a266-cc1d-497b-9966-3c8de930c05a", "rule_name": "Company House Reference Party Confidence", "conditions": [{"condition_id": "20976308-2dfd-4904-aed5-91bb3ebce2fb", "type": "confidence", "affected_fields": ["Company_House_Reference_Party"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Company_House_Reference_Party"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "851e05dc-985c-4c5c-bf5a-9b4f7db1bb92", "source": "20976308-2dfd-4904-aed5-91bb3ebce2fb", "target": null, "result": "pass"}, {"edge_id": "5a61c91d-4e48-4621-8826-e03a819ae94b", "source": "20976308-2dfd-4904-aed5-91bb3ebce2fb", "target": null, "result": "fail"}]}, {"rule_id": "be83888d-1907-4941-baa7-b863ae53e35d", "rule_name": "Date Established Confidence", "conditions": [{"condition_id": "0b454aea-ea87-430b-9304-b93d9271decd", "type": "confidence", "affected_fields": ["Date_Established"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Date_Established"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "7ce120aa-091f-4ecb-87a2-9e46247ec447", "source": "0b454aea-ea87-430b-9304-b93d9271decd", "target": null, "result": "pass"}, {"edge_id": "5848f770-28a4-4391-8fb3-3f13acc46c7e", "source": "0b454aea-ea87-430b-9304-b93d9271decd", "target": null, "result": "fail"}]}, {"rule_id": "1e94aba4-8ac7-4a26-9863-abad001f00a3", "rule_name": "Party Address Confidence", "conditions": [{"condition_id": "936880c1-a893-45af-80a2-80149d2b39a7", "type": "confidence", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Party_Address"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "3ec6b84e-b5e3-4846-9582-5eb33070a32f", "source": "936880c1-a893-45af-80a2-80149d2b39a7", "target": null, "result": "pass"}, {"edge_id": "ce3bccb6-478c-4a09-b2f9-e3d735954926", "source": "936880c1-a893-45af-80a2-80149d2b39a7", "target": null, "result": "fail"}]}, {"rule_id": "f4ef11f6-07b8-45ae-a9d7-f905c7b281cc", "rule_name": "Incepts On Confidence", "conditions": [{"condition_id": "361f8ebe-bf68-4d83-bd99-ba54818431ee", "type": "confidence", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Incepts_On"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "97d3edd4-5786-464c-a608-195427102e18", "source": "361f8ebe-bf68-4d83-bd99-ba54818431ee", "target": null, "result": "pass"}, {"edge_id": "0062b52e-cba2-43a6-a783-0d01a56b9502", "source": "361f8ebe-bf68-4d83-bd99-ba54818431ee", "target": null, "result": "fail"}]}, {"rule_id": "ce24fd81-1390-44bb-af59-23fe91546b82", "rule_name": "Main Cover Type Confidence", "conditions": [{"condition_id": "cc8ec6f9-ba87-4a80-8dde-a70c45bf0a8c", "type": "confidence", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Main_Cover_Type"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "9c3dce64-b4f0-4797-90a8-ef029a7f88a2", "source": "cc8ec6f9-ba87-4a80-8dde-a70c45bf0a8c", "target": null, "result": "pass"}, {"edge_id": "9b4b5fab-4db8-4f0d-b857-2a328c6ed0e3", "source": "cc8ec6f9-ba87-4a80-8dde-a70c45bf0a8c", "target": null, "result": "fail"}]}, {"rule_id": "b8c3234f-fec4-40ee-99ba-10a7d9919df7", "rule_name": "Excess Type Accident Damage Confidence", "conditions": [{"condition_id": "0190d88a-9157-47e6-aee8-fbf0b39ecd41", "type": "confidence", "affected_fields": ["Excess_Type_Accident_Damage"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Accident_Damage"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "ab1d263d-d552-4afa-911c-8a22a7844901", "source": "0190d88a-9157-47e6-aee8-fbf0b39ecd41", "target": null, "result": "pass"}, {"edge_id": "89ea1d93-01de-4798-a9a8-c51a91909645", "source": "0190d88a-9157-47e6-aee8-fbf0b39ecd41", "target": null, "result": "fail"}]}, {"rule_id": "f2f09fcf-b203-472e-8107-55a51f6ddef3", "rule_name": "Excess Type Fire Confidence", "conditions": [{"condition_id": "bd0ddfcf-01bb-4c97-82ee-a1d20d4daf77", "type": "confidence", "affected_fields": ["Excess_Type_Fire"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Fire"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "73e1ec95-ee18-4eac-8217-2d6713614f2d", "source": "bd0ddfcf-01bb-4c97-82ee-a1d20d4daf77", "target": null, "result": "pass"}, {"edge_id": "000a2f8e-737c-4ed4-b466-73542ef4a3d4", "source": "bd0ddfcf-01bb-4c97-82ee-a1d20d4daf77", "target": null, "result": "fail"}]}, {"rule_id": "0a460ae1-2fff-4531-ba89-db0e6cda056c", "rule_name": "Excess Type Theft Confidence", "conditions": [{"condition_id": "60104def-e789-4cff-ba0c-fae59659cb5f", "type": "confidence", "affected_fields": ["Excess_Type_Theft"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Theft"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "0f7cc244-7d6e-4daa-8873-40673a3771cb", "source": "60104def-e789-4cff-ba0c-fae59659cb5f", "target": null, "result": "pass"}, {"edge_id": "9c9a1db9-c025-4dfc-8054-25c7c92f7c5e", "source": "60104def-e789-4cff-ba0c-fae59659cb5f", "target": null, "result": "fail"}]}, {"rule_id": "5804e382-e746-4a8d-bab1-d7469467e65f", "rule_name": "Excess Type WS Confidence", "conditions": [{"condition_id": "8ba5d861-ccbf-4968-babf-a3838b97f453", "type": "confidence", "affected_fields": ["Excess_Type_WS"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_WS"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "4947be5e-bc1d-4c93-b040-dbff88d9d6a8", "source": "8ba5d861-ccbf-4968-babf-a3838b97f453", "target": null, "result": "pass"}, {"edge_id": "3c902431-5ffb-4b14-a088-638b9ac2dfc4", "source": "8ba5d861-ccbf-4968-babf-a3838b97f453", "target": null, "result": "fail"}]}, {"rule_id": "654973ac-f7e7-4a78-b4aa-eaeef2966ba4", "rule_name": "Agency address Confidence", "conditions": [{"condition_id": "f212fb36-cf34-4add-86dd-a0e314fe683b", "type": "confidence", "affected_fields": ["Agency_address"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Agency_address"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "10fd459c-c43f-47ae-9bb7-8ae0e4e2ba21", "source": "f212fb36-cf34-4add-86dd-a0e314fe683b", "target": null, "result": "pass"}, {"edge_id": "3827fa64-a424-4f0c-949b-a12005df0120", "source": "f212fb36-cf34-4add-86dd-a0e314fe683b", "target": null, "result": "fail"}]}, {"rule_id": "88e35d13-6b8d-4e73-a155-f58a70e2af9e", "rule_name": "Insured Confidence", "conditions": [{"condition_id": "c524698f-a825-4b19-be41-2dddb26580d8", "type": "confidence", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Insured"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "8e7f2bc1-1616-4164-adce-a5502875f5ce", "source": "c524698f-a825-4b19-be41-2dddb26580d8", "target": null, "result": "pass"}, {"edge_id": "402cb058-9408-4687-a664-27c7a8c70665", "source": "c524698f-a825-4b19-be41-2dddb26580d8", "target": null, "result": "fail"}]}, {"rule_id": "4b243e70-04d0-4e60-bd93-a5044ec1f70f", "rule_name": "Business Description Confidence", "conditions": [{"condition_id": "63ec18a7-7bb2-45d0-b742-362263666e63", "type": "confidence", "affected_fields": ["Business_Description"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Business_Description"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "3ad2a2d9-0667-456a-8f8b-6be52ebc3907", "source": "63ec18a7-7bb2-45d0-b742-362263666e63", "target": null, "result": "pass"}, {"edge_id": "f5624293-ed49-42cb-b048-a17182fcd23c", "source": "63ec18a7-7bb2-45d0-b742-362263666e63", "target": null, "result": "fail"}]}, {"rule_id": "68456e7a-786b-4506-8f66-3012fc13cd3c", "rule_name": "Party Address Confidence", "conditions": [{"condition_id": "45b2d324-c6b5-4162-b171-0894256b6b70", "type": "confidence", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Party_Address"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "0ad4d6e9-362c-4097-89a8-557bdd14630a", "source": "45b2d324-c6b5-4162-b171-0894256b6b70", "target": null, "result": "pass"}, {"edge_id": "5ce258b2-c087-457c-a7d3-f4420033d46f", "source": "45b2d324-c6b5-4162-b171-0894256b6b70", "target": null, "result": "fail"}]}, {"rule_id": "1e01274b-ed1a-421f-91b5-aae786783449", "rule_name": "Incepts On Confidence", "conditions": [{"condition_id": "40e1d173-dca9-49cb-91b5-6b6814851f8a", "type": "confidence", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Incepts_On"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "0dacbcfa-6df9-407b-b159-11f147982a77", "source": "40e1d173-dca9-49cb-91b5-6b6814851f8a", "target": null, "result": "pass"}, {"edge_id": "59c64cbe-c35a-4fc0-81d6-6acb28001b61", "source": "40e1d173-dca9-49cb-91b5-6b6814851f8a", "target": null, "result": "fail"}]}, {"rule_id": "ad4ac1b5-93a4-43f8-94a0-47dca06426ba", "rule_name": "Main Cover Type Confidence", "conditions": [{"condition_id": "f729c1e7-bffd-410f-90a7-6fb0ff1beeee", "type": "confidence", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Main_Cover_Type"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "28bff8a2-1ff6-44a3-9dd2-90949979ed4a", "source": "f729c1e7-bffd-410f-90a7-6fb0ff1beeee", "target": null, "result": "pass"}, {"edge_id": "55500dfb-b73d-4996-98f5-6a7b343615e8", "source": "f729c1e7-bffd-410f-90a7-6fb0ff1beeee", "target": null, "result": "fail"}]}, {"rule_id": "9242edbc-4822-405f-8332-1102be57e810", "rule_name": "Insured Confidence", "conditions": [{"condition_id": "bf9bfcac-60af-4d5a-b56d-d60a62e88d3a", "type": "confidence", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Insured"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "452acc3b-3f53-4c05-9b39-1c75fc1f4578", "source": "bf9bfcac-60af-4d5a-b56d-d60a62e88d3a", "target": null, "result": "pass"}, {"edge_id": "e5d8fd33-f128-4f46-a876-c7eaa38ac878", "source": "bf9bfcac-60af-4d5a-b56d-d60a62e88d3a", "target": null, "result": "fail"}]}, {"rule_id": "07e23d4e-ba7b-4af2-ac45-90641045b1cf", "rule_name": "Party Address Confidence", "conditions": [{"condition_id": "8d922acf-0c16-4d9c-a3a6-f3e66743a4d1", "type": "confidence", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Party_Address"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "a65b4380-9f03-4c39-9259-57090d82aff1", "source": "8d922acf-0c16-4d9c-a3a6-f3e66743a4d1", "target": null, "result": "pass"}, {"edge_id": "36c37ab4-4e65-4114-9e3b-e84f724c302e", "source": "8d922acf-0c16-4d9c-a3a6-f3e66743a4d1", "target": null, "result": "fail"}]}, {"rule_id": "16d820e7-34fe-401f-9146-0f2c29fd0391", "rule_name": "Main Cover Type Confidence", "conditions": [{"condition_id": "f7d5b873-9bf7-49d4-9cd5-42771b978651", "type": "confidence", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Main_Cover_Type"}], "params": {"threshold": 0.95}, "msg": {"standard": "Actual confidence {} was below the configured threshold 0.95", "custom": {"msg": "Actual confidence {} was below the configured threshold 0.95", "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "e984afe9-3817-4634-99d6-5d822e5a3152", "source": "f7d5b873-9bf7-49d4-9cd5-42771b978651", "target": null, "result": "pass"}, {"edge_id": "73de9f96-5958-4de3-80ee-0d74952359ec", "source": "f7d5b873-9bf7-49d4-9cd5-42771b978651", "target": null, "result": "fail"}]}, {"rule_id": "3ab605b1-44d0-4bda-9d64-4706c41068f5", "rule_name": "Target Price UDF", "conditions": [{"condition_id": "04d7647e-1770-4b5d-af6f-a03608005c44", "type": "lambda_code", "affected_fields": ["Target_Price"], "class_affected_fields": [{"class": "Email", "field": "Target_Price"}], "params": {"code": "\n\ndef validate_target_price(Target_Price, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_target_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Target_Price:\n\t\t# Return None to indicate validation passed\n\t  try:\n\t      Target_Price = str(Target_Price).strip()\n\t  except:\n\t      None\n\t  try:\n\t      clean_and_validate_target_price_loose(Target_Price)\n\t  except Exception:\n\t      print(traceback.format_exc())\n\t      return \"Invalid Target Price\"\n\telse:\n\t      return None", "fn_name": "validate_target_price", "args": [{"name": "Target_Price", "data_type": "FIELD", "value": "Target Price"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "40192e40-2ce1-4633-a57a-18ee3cf48173", "source": "04d7647e-1770-4b5d-af6f-a03608005c44", "target": null, "result": "pass"}, {"edge_id": "be8c1d8c-6af6-4d18-b775-f811b0c15672", "source": "04d7647e-1770-4b5d-af6f-a03608005c44", "target": null, "result": "fail"}]}, {"rule_id": "3e01331c-056c-4e58-bf4a-b0b0392eb96f", "rule_name": "Agency Enquiry Reference UDF", "conditions": [{"condition_id": "2d43db16-43c1-4d05-8851-7e953e713f87", "type": "lambda_code", "affected_fields": ["Agency_Enquiry_Reference"], "class_affected_fields": [{"class": "Email", "field": "Agency_Enquiry_Reference"}], "params": {"code": "\n\ndef validate_agency_enquiry_reference(Agency_Enquiry_Reference, context = {}, keys = {}, **kwargs):\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Agency_Enquiry_Reference:\n\t\t# Return None to indicate validation passed\n\t\tif not isinstance(Agency_Enquiry_Reference, str):\n\t\t\treturn \"Agency Enquiry Reference must be a string\"\n\t\tAgency_Enquiry_Reference = Agency_Enquiry_Reference.strip()\n\t\tif not Agency_Enquiry_Reference:\n\t\t\treturn \"Agency Enquiry Reference cannot be empty or whitespace.\"\n\t\tif contains_only_quotes(Agency_Enquiry_Reference):\n\t\t\t\treturn None\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_agency_enquiry_reference", "args": [{"name": "Agency_Enquiry_Reference", "data_type": "FIELD", "value": "Agency Enquiry Reference"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "1e9dff34-1e0a-4161-9a59-3e5de385f679", "source": "2d43db16-43c1-4d05-8851-7e953e713f87", "target": null, "result": "pass"}, {"edge_id": "8cd73626-591f-4fb4-93bc-d453d057e7e7", "source": "2d43db16-43c1-4d05-8851-7e953e713f87", "target": null, "result": "fail"}]}, {"rule_id": "f31575f2-45dc-496c-8d9e-b5e06c735806", "rule_name": "Broker Deadline UDF", "conditions": [{"condition_id": "953d76fb-38f3-484e-9a12-06bd2a87de06", "type": "lambda_code", "affected_fields": ["Broker_Deadline"], "class_affected_fields": [{"class": "Email", "field": "Broker_Deadline"}], "params": {"code": "\n\ndef validate_broker_deadline(Broker_Deadline, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Broker_Deadline:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Broker_Deadline = str(Broker_Deadline).strip()\n\t\texcept:\n\t\t\treturn None\n\t\n\t\tif contains_only_quotes(Broker_Deadline):\n\t\t\treturn None\n\t\tif not isinstance(Broker_Deadline,str):\n\t\t\treturn \"Broker Deadline must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Broker_Deadline):\n\t\t\treturn \"Broker Deadline must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Broker_Deadline,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_broker_deadline", "args": [{"name": "Broker_Deadline", "data_type": "FIELD", "value": "Broker Deadline"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "7eb9e72d-d3e8-40c0-91ab-adbbcaaa77bc", "source": "953d76fb-38f3-484e-9a12-06bd2a87de06", "target": null, "result": "pass"}, {"edge_id": "13cd7575-0d88-410e-b420-c57098dd7466", "source": "953d76fb-38f3-484e-9a12-06bd2a87de06", "target": null, "result": "fail"}]}, {"rule_id": "16b57053-6ed1-4898-92a4-25cfb740d3a4", "rule_name": "Date Established UDF", "conditions": [{"condition_id": "98eb16d9-46ea-4990-8084-9f673c3fdd35", "type": "lambda_code", "affected_fields": ["Date_Established"], "class_affected_fields": [{"class": "Email", "field": "Date_Established"}], "params": {"code": "\n\ndef validate_date_established(Date_Established, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Date_Established:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Date_Established = str(Date_Established).strip()\n\t\texcept:\n\t\t\treturn None\n\t\t\t\t\n\t\tif contains_only_quotes(Date_Established):\n\t\t\treturn None\n\t\tif not isinstance(Date_Established,str):\n\t\t\treturn \"Date Established must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Date_Established):\n\t\t\treturn \"Date Established must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Date_Established,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_date_established", "args": [{"name": "Date_Established", "data_type": "FIELD", "value": "Date Established"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "bbbb01fa-fba1-489c-a6f6-9c98c3fdc93b", "source": "98eb16d9-46ea-4990-8084-9f673c3fdd35", "target": null, "result": "pass"}, {"edge_id": "a16325f2-ec25-4997-af88-a5a51e9b76eb", "source": "98eb16d9-46ea-4990-8084-9f673c3fdd35", "target": null, "result": "fail"}]}, {"rule_id": "188b0121-326b-4f3b-bec6-61fd7b8d2bbd", "rule_name": "Incepts On UDF", "conditions": [{"condition_id": "874a9fb5-f78c-4ecb-a43d-b3ed86806e0b", "type": "lambda_code", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Email", "field": "Incepts_On"}], "params": {"code": "\n\ndef validate_incepts_on(Incepts_On, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Incepts_On:\n\t\ttry:\n\t\t\tIncepts_On = str(Incepts_On).strip()\n\t\texcept:\n\t\t\treturn None \n\t\t# Return None to indicate validation passed\n\t\t# Incepts_On = Incepts_On.strip()\n\t\tif contains_only_quotes(Incepts_On):\n\t\t\treturn None\n\t\tif not isinstance(Incepts_On,str):\n\t\t\treturn \"Incepts On must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Incepts_On):\n\t\t\treturn \"Incepts On must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Incepts_On,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_incepts_on", "args": [{"name": "Incepts_On", "data_type": "FIELD", "value": "Incepts On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "6212edfd-4a38-4335-9e78-66922265159d", "source": "874a9fb5-f78c-4ecb-a43d-b3ed86806e0b", "target": null, "result": "pass"}, {"edge_id": "0d8fd54b-d193-478b-aa89-f10cf48a8cad", "source": "874a9fb5-f78c-4ecb-a43d-b3ed86806e0b", "target": null, "result": "fail"}]}, {"rule_id": "c2bf4481-f27a-435f-9c1d-e9d466c68497", "rule_name": "Expires On UDF", "conditions": [{"condition_id": "19cb7270-fe8c-4bdf-b020-2f145bce130d", "type": "lambda_code", "affected_fields": ["Expires_On"], "class_affected_fields": [{"class": "Email", "field": "Expires_On"}], "params": {"code": "\n\ndef validate_expires_on(Expires_On, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Expires_On:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Expires_On = str(Expires_On).strip()\n\t\texcept:\n\t\t\treturn None\n\t\t\t\n\t\tif contains_only_quotes(Expires_On):\n\t\t\treturn None\n\t\tif not isinstance(Expires_On,str):\n\t\t\treturn \"Expires On must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Expires_On):\n\t\t\treturn \"Expires On must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Expires_On,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_expires_on", "args": [{"name": "Expires_On", "data_type": "FIELD", "value": "Expires On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "83e64c7b-9a5b-407c-b9c9-f8ad7fdb4020", "source": "19cb7270-fe8c-4bdf-b020-2f145bce130d", "target": null, "result": "pass"}, {"edge_id": "fc1b2d14-4a98-4545-9757-775f94c6defa", "source": "19cb7270-fe8c-4bdf-b020-2f145bce130d", "target": null, "result": "fail"}]}, {"rule_id": "199e7475-e63e-4997-94e4-443fceeb2415", "rule_name": "Risk Postcode UDF", "conditions": [{"condition_id": "6781a9e7-c4ea-493a-bc93-514f0630366e", "type": "lambda_code", "affected_fields": ["Risk_Postcode"], "class_affected_fields": [{"class": "Email", "field": "Risk_Postcode"}], "params": {"code": "\n\ndef validate_post_code(Risk_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Risk_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "fn_name": "validate_post_code", "args": [{"name": "Risk_Postcode", "data_type": "FIELD", "value": "Risk Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "53d8a9b6-54f0-4989-8bcd-4a8c0a3f1b5e", "source": "6781a9e7-c4ea-493a-bc93-514f0630366e", "target": null, "result": "pass"}, {"edge_id": "a63263d3-7cc3-4e89-a7a0-daa8cffd3b74", "source": "6781a9e7-c4ea-493a-bc93-514f0630366e", "target": null, "result": "fail"}]}, {"rule_id": "bd3a8b6c-8499-41eb-b44e-d0dff2a46718", "rule_name": "Driver Party Table UDF", "conditions": [{"condition_id": "4f71a824-76f4-424e-8a23-3fcb600d263f", "type": "lambda_code", "affected_fields": ["Driver_Party_Table"], "class_affected_fields": [{"class": "Email", "field": "Driver_Party_Table"}], "params": {"code": "\n\ndef date_validations(Driver_Party_Table, context = {}, keys = {}, **kwargs):\n\tfrom datetime import datetime\n\timport pandas as pd\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_date_columns(df, date_columns, date_format=\"%d/%m/%Y\"):\n\t    invalid_date_columns = []\n\t    for col in date_columns:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        \n\t        # Drop nulls and convert to string\n\t        col_data = df[col].dropna().astype(str).str.strip()\n\t\n\t        # Try parsing dates using pd.to_datetime with errors='coerce'\n\t        parsed_dates = pd.to_datetime(col_data, format=date_format, errors='coerce')\n\t\n\t        # If any parsing failed (NaT), mark the column as invalid\n\t        if parsed_dates.isna().any():\n\t            invalid_date_columns.append(col)\n\t    if not invalid_date_columns:\n\t        return None\n\t    # return f\"{invalid_date_columns} contain invalid date formats\"\n\t    if len(invalid_date_columns) == 1:\n\t        return f\"The column '{invalid_date_columns[0]}' contains invalid date formats.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_date_columns)\n\t        return f\"The columns {cols_str} contain invalid date formats.\"\n\t\n\t\n\t\n\tcolumns_to_check = [\n\t  'Driver D.O.B',\n\t]\n\tTable = Driver_Party_Table\n\t\n\ttry:\n\t    try:\n\t        Table = json.loads(str(Table).strip())\n\t    except:\n\t        try:\n\t            Table = eval(str(Table).strip())\n\t        except:\n\t            return None\n\t    Table = convert_to_df( Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t# CCE_Table['Excess: AD'] = [\"234Rs\", \"234\"]\n\t\n\tresult = validate_date_columns( Table, columns_to_check )\n\tprint(\"result\",result)\n\treturn result", "fn_name": "date_validations", "args": [{"name": "Driver_Party_Table", "data_type": "FIELD", "value": "Driver Party Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "2f311416-d3cc-42e7-8b8c-94a70e6504fb", "source": "4f71a824-76f4-424e-8a23-3fcb600d263f", "target": null, "result": "pass"}, {"edge_id": "45ca2596-53a2-4afb-af13-09fe438a3478", "source": "4f71a824-76f4-424e-8a23-3fcb600d263f", "target": null, "result": "fail"}]}, {"rule_id": "b12fd518-824f-46c0-9a28-f6a4c8827fb1", "rule_name": "Excess Type Accident Damage UDF", "conditions": [{"condition_id": "dfb714f9-00fc-47d3-b3bd-1bb3007fc50f", "type": "lambda_code", "affected_fields": ["Excess_Type_Accident_Damage"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Accident_Damage"}], "params": {"code": "\n\ndef validate_excess_type_accident_damage(Excess_Type_Accident_Damage, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Accident_Damage:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Accident_Damage = str(Excess_Type_Accident_Damage).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Accident_Damage)\n\t  except Exception:\n\t    return \"Invalid Excess Type Accident Damage\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_accident_damage", "args": [{"name": "Excess_Type_Accident_Damage", "data_type": "FIELD", "value": "Excess Type Accident Damage"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "918d7a1a-026a-4186-9ec9-2b77c19fbd86", "source": "dfb714f9-00fc-47d3-b3bd-1bb3007fc50f", "target": null, "result": "pass"}, {"edge_id": "2669301e-72c1-45cd-b949-5585290f7b8c", "source": "dfb714f9-00fc-47d3-b3bd-1bb3007fc50f", "target": null, "result": "fail"}]}, {"rule_id": "2d1a3275-2eac-4692-9176-8d3813a91ca3", "rule_name": "Excess Type Fire UDF", "conditions": [{"condition_id": "e8f39657-c5a6-4214-bf65-0d0a5fd1768b", "type": "lambda_code", "affected_fields": ["Excess_Type_Fire"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Fire"}], "params": {"code": "\n\ndef validate_excess_type_fire(Excess_Type_Fire, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Fire:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Fire = str(Excess_Type_Fire).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Fire)\n\t  except Exception:\n\t    return \"Invalid Excess Type Fire Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_fire", "args": [{"name": "Excess_Type_Fire", "data_type": "FIELD", "value": "Excess Type Fire"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "81b67380-e8ca-4232-b0c0-1a8dac6183c7", "source": "e8f39657-c5a6-4214-bf65-0d0a5fd1768b", "target": null, "result": "pass"}, {"edge_id": "f141ec76-12a8-4c3f-98b9-fb81cecf8d3f", "source": "e8f39657-c5a6-4214-bf65-0d0a5fd1768b", "target": null, "result": "fail"}]}, {"rule_id": "141f4e38-8e40-48b7-b3f0-a89eca3cdb43", "rule_name": "Excess Type Theft UDF", "conditions": [{"condition_id": "62aefeb1-d057-42cd-a95d-6919680c9f71", "type": "lambda_code", "affected_fields": ["Excess_Type_Theft"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Theft"}], "params": {"code": "\n\ndef validate_excess_type_theft(Excess_Type_Theft, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Theft:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Theft = str(Excess_Type_Theft).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Theft)\n\t  except Exception:\n\t    return \"Invalid Excess Type Theft Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_theft", "args": [{"name": "Excess_Type_Theft", "data_type": "FIELD", "value": "Excess Type Theft"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "a5b9d578-35cc-42b7-9e55-548acf3700b6", "source": "62aefeb1-d057-42cd-a95d-6919680c9f71", "target": null, "result": "pass"}, {"edge_id": "3e9098c0-d2d7-4dd7-aa98-05ac817c24eb", "source": "62aefeb1-d057-42cd-a95d-6919680c9f71", "target": null, "result": "fail"}]}, {"rule_id": "871d6aa7-1e48-401c-abd3-f58664359dbd", "rule_name": "Excess Type WS UDF", "conditions": [{"condition_id": "3e5c08fc-3d42-4b8b-8590-f69583d40a2f", "type": "lambda_code", "affected_fields": ["Excess_Type_WS"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_WS"}], "params": {"code": "\n\ndef validate_excess_type_ws(Excess_Type_WS, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_WS:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_WS = str(Excess_Type_WS).strip()\n\t    clean_and_validate_price_loose(Excess_Type_WS)\n\t  except Exception:\n\t    return \"Invalid Excess Type WS Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_ws", "args": [{"name": "Excess_Type_WS", "data_type": "FIELD", "value": "Excess Type WS"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "30cbb77a-c7c6-4a3d-a6ba-09db5acfb442", "source": "3e5c08fc-3d42-4b8b-8590-f69583d40a2f", "target": null, "result": "pass"}, {"edge_id": "4445c9b4-894b-4bc6-858d-2ec26da367d1", "source": "3e5c08fc-3d42-4b8b-8590-f69583d40a2f", "target": null, "result": "fail"}]}, {"rule_id": "c0f88a69-ca77-43e3-b116-6e2017fb0ced", "rule_name": "Vehicle Schedule Table UDF", "conditions": [{"condition_id": "dafe25c9-c04d-4cfd-b366-4f4d8b13be52", "type": "lambda_code", "affected_fields": ["Vehicle_Schedule_Table"], "class_affected_fields": [{"class": "Email", "field": "Vehicle_Schedule_Table"}], "params": {"code": "\n\ndef date_validations(Vehicle_Schedule_Table, context = {}, keys = {}, **kwargs):\n\tfrom datetime import datetime\n\timport pandas as pd\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_date_columns(df, date_columns, date_format=\"%d/%m/%Y\"):\n\t    invalid_date_columns = []\n\t    for col in date_columns:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        \n\t        # Drop nulls and convert to string\n\t        col_data = df[col].dropna().astype(str).str.strip()\n\t\n\t        # Try parsing dates using pd.to_datetime with errors='coerce'\n\t        parsed_dates = pd.to_datetime(col_data, format=date_format, errors='coerce')\n\t\n\t        # If any parsing failed (NaT), mark the column as invalid\n\t        if parsed_dates.isna().any():\n\t            invalid_date_columns.append(col)\n\t    \n\t    if not invalid_date_columns:\n\t        return None\n\t    # return f\"{invalid_date_columns} contain invalid date formats\"\n\t    if len(invalid_date_columns) == 1:\n\t        return f\"The column '{invalid_date_columns[0]}' contains invalid date formats.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_date_columns)\n\t        return f\"The columns {cols_str} contain invalid date formats.\"\n\t    \n\t\n\t\n\t\n\tcolumns_to_check = [\n\t  'Effective From',\n\t  'Effective To'\n\t]\n\tTable = Vehicle_Schedule_Table\n\t\n\ttry:\n\t    try:\n\t        Table = json.loads(str(Table).strip())\n\t    except:\n\t        try:\n\t            Table = eval(str(Table).strip())\n\t        except:\n\t            return None\n\t    Table = convert_to_df( Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t# CCE_Table['Excess: AD'] = [\"234Rs\", \"234\"]\n\t\n\tresult = validate_date_columns( Table, columns_to_check )\n\tprint(\"result\",result)\n\treturn result", "fn_name": "date_validations", "args": [{"name": "Vehicle_Schedule_Table", "data_type": "FIELD", "value": "Vehicle Schedule Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "b44850e3-4041-488c-b10d-b78d568351cb", "source": "dafe25c9-c04d-4cfd-b366-4f4d8b13be52", "target": null, "result": "pass"}, {"edge_id": "c0675109-df85-4711-bec4-ec248e51652b", "source": "dafe25c9-c04d-4cfd-b366-4f4d8b13be52", "target": null, "result": "fail"}]}, {"rule_id": "a5c150fc-32b4-4a62-9300-f1a1618ef2b4", "rule_name": "Number of Notifiable Vehicles UDF", "conditions": [{"condition_id": "c802cf10-e913-4768-8f94-575dda6b803a", "type": "lambda_code", "affected_fields": ["Number_of_Notifiable_Vehicles"], "class_affected_fields": [{"class": "Email", "field": "Number_of_Notifiable_Vehicles"}], "params": {"code": "\n\ndef validate_number_of_notifiable_vehicles(Number_of_Notifiable_Vehicles, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\tif Number_of_Notifiable_Vehicles:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t\tNumber_of_Notifiable_Vehicles = str(Number_of_Notifiable_Vehicles).strip()\n\t\texcept:\n\t\t\treturn None\n\t\ttry:\n\t\t\tn = int (Number_of_Notifiable_Vehicles)\n\t\t\tif n < 0:\n\t\t\t\treturn \"Number of Notifiable Vehicles must be a non-negative interger.\"\n\t\t\treturn None\n\t\texcept(ValueError, TypeError):\n\t\t\treturn \"Number of Notifiable Vehicles must be a number.\"\n\telse:\n\t\treturn None", "fn_name": "validate_number_of_notifiable_vehicles", "args": [{"name": "Number_of_Notifiable_Vehicles", "data_type": "FIELD", "value": "Number of Notifiable Vehicles"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "e514c856-80e2-42fb-9833-dfbc2939bd84", "source": "c802cf10-e913-4768-8f94-575dda6b803a", "target": null, "result": "pass"}, {"edge_id": "4504e1ee-377c-4ca6-a950-c836e99b4c5e", "source": "c802cf10-e913-4768-8f94-575dda6b803a", "target": null, "result": "fail"}]}, {"rule_id": "95c57dae-80b8-41bc-92df-dd5c18a88e3a", "rule_name": "Party Address Postcode UDF", "conditions": [{"condition_id": "c07487f7-64b0-477f-8b04-f919942cadf7", "type": "lambda_code", "affected_fields": ["Party_Address_Postcode"], "class_affected_fields": [{"class": "Email", "field": "Party_Address_Postcode"}], "params": {"code": "\n\ndef validate_party_address_postcode(Party_Address_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Party_Address_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "fn_name": "validate_party_address_postcode", "args": [{"name": "Party_Address_Postcode", "data_type": "FIELD", "value": "Party Address Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "252e7f10-6e0d-472a-9482-1f4b40b1350c", "source": "c07487f7-64b0-477f-8b04-f919942cadf7", "target": null, "result": "pass"}, {"edge_id": "3111d613-ba5a-4898-af9e-0238be370278", "source": "c07487f7-64b0-477f-8b04-f919942cadf7", "target": null, "result": "fail"}]}, {"rule_id": "ea270424-2035-4c25-a1be-9d202c5f261d", "rule_name": "Intra_Party_Address", "conditions": [{"condition_id": "1f067990-0c83-4ca2-b344-0367a7569890", "type": "code", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Email", "field": "Party_Address"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Party_Address"}, "\"Party_Address\"", "\"Email\""], "input_fields": ["Party_Address", "\"Party_Address\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 92, "y": 96}}], "edges": [{"edge_id": "2ff79a30-0769-4caf-9e67-0ea503ad2515", "source": "1f067990-0c83-4ca2-b344-0367a7569890", "target": null, "result": "pass"}, {"edge_id": "c9b5a153-3257-4dca-bc89-70e386eede3c", "source": "1f067990-0c83-4ca2-b344-0367a7569890", "target": null, "result": "fail"}]}, {"rule_id": "1d0a9725-fa0f-43ce-9ac1-97dc9e0112f5", "rule_name": "Intra_Insured", "conditions": [{"condition_id": "67e29654-ef2b-4a61-b449-95c579ad1cb5", "type": "code", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Insured"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Insured"}, "\"Insured\"", "\"Email\""], "input_fields": ["Insured", "\"Insured\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "d5ae1cc7-9e2d-4bde-ade1-d05906047cbb", "source": "67e29654-ef2b-4a61-b449-95c579ad1cb5", "target": null, "result": "pass"}, {"edge_id": "c363dae5-2036-4cdc-8769-31e33e015feb", "source": "67e29654-ef2b-4a61-b449-95c579ad1cb5", "target": null, "result": "fail"}]}, {"rule_id": "da136c53-6e85-4d9d-aa47-30637515308a", "rule_name": "Intra_Business_Description", "conditions": [{"condition_id": "28c304f3-43f5-44f8-a747-aeb292fc493e", "type": "code", "affected_fields": ["Business_Description"], "class_affected_fields": [{"class": "Email", "field": "Business_Description"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Business_Description"}, "\"Business_Description\"", "\"Email\""], "input_fields": ["Business_Description", "\"Business_Description\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "12b05f03-c45d-4c80-a0be-58013e58105d", "source": "28c304f3-43f5-44f8-a747-aeb292fc493e", "target": null, "result": "pass"}, {"edge_id": "21e35a73-d592-4d28-9e83-808b9fc4db5f", "source": "28c304f3-43f5-44f8-a747-aeb292fc493e", "target": null, "result": "fail"}]}, {"rule_id": "b1487814-e432-487b-a76e-2592335d3ae6", "rule_name": "Intra_Agency_Name", "conditions": [{"condition_id": "623ff93c-90e5-456c-a8cc-05432942d906", "type": "code", "affected_fields": ["Agency_Name"], "class_affected_fields": [{"class": "Email", "field": "Agency_Name"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Agency_Name"}, "\"Agency_Name\"", "\"Email\""], "input_fields": ["Agency_Name", "\"Agency_Name\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "84b7b35a-ef30-423d-9cb8-d56172b66115", "source": "623ff93c-90e5-456c-a8cc-05432942d906", "target": null, "result": "pass"}, {"edge_id": "848c55e1-5728-43f3-b7db-f6f7e9de4c13", "source": "623ff93c-90e5-456c-a8cc-05432942d906", "target": null, "result": "fail"}]}, {"rule_id": "5d2c2ecf-129d-44f4-9f60-d1595707b346", "rule_name": "Intra_Incepts_On_Date", "conditions": [{"condition_id": "ac8986fe-e926-416c-bfaf-ed9ae4c92208", "type": "code", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Email", "field": "Incepts_On"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Incepts_On"}, "\"Incepts_On\"", "\"Email\""], "input_fields": ["Incepts_On", "\"Incepts_On\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "a9123dc1-debd-4ad0-b2d4-58b464b2b5dd", "source": "ac8986fe-e926-416c-bfaf-ed9ae4c92208", "target": null, "result": "pass"}, {"edge_id": "457c5a28-ba76-49f2-a51a-d804ee19b2b5", "source": "ac8986fe-e926-416c-bfaf-ed9ae4c92208", "target": null, "result": "fail"}]}, {"rule_id": "45e86114-449d-417f-8fba-6477a5c9dc50", "rule_name": "Intra_Main_Cover_Type", "conditions": [{"condition_id": "20d440ed-8c10-454e-8520-5a8edf0d1c7e", "type": "code", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Email", "field": "Main_Cover_Type"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Main_Cover_Type"}, "\"Main_Cover_Type\"", "\"Email\""], "input_fields": ["Main_Cover_Type", "\"Main_Cover_Type\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "1c32bb8c-028b-433f-8baa-10af8110cdc1", "source": "20d440ed-8c10-454e-8520-5a8edf0d1c7e", "target": null, "result": "pass"}, {"edge_id": "856a3ac5-f0d1-4c58-bd18-b831b5debdfd", "source": "20d440ed-8c10-454e-8520-5a8edf0d1c7e", "target": null, "result": "fail"}]}, {"rule_id": "404a8ada-f84a-4078-a9b8-3a0eacddc5fd", "rule_name": "Intra_Excess_Type_Accident_Damage", "conditions": [{"condition_id": "fd5f5198-dea9-4cd6-b4be-c3e0de7db877", "type": "code", "affected_fields": ["Excess_Type_Accident_Damage"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Accident_Damage"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Excess_Type_Accident_Damage"}, "\"Excess_Type_Accident_Damage\"", "\"Email\""], "input_fields": ["Excess_Type_Accident_Damage", "\"Excess_Type_Accident_Damage\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "4ae4c43f-7be0-4b4d-ac09-df2c53cec39e", "source": "fd5f5198-dea9-4cd6-b4be-c3e0de7db877", "target": null, "result": "pass"}, {"edge_id": "fefc2b9d-410b-4ddd-8842-d6380726ab27", "source": "fd5f5198-dea9-4cd6-b4be-c3e0de7db877", "target": null, "result": "fail"}]}, {"rule_id": "818f4b10-5af2-41bb-8a7d-1e10a189aa3d", "rule_name": "Intra_Excess_Type_Fire", "conditions": [{"condition_id": "f2cd20e8-06cc-4ea3-85cc-a23b7850c08d", "type": "code", "affected_fields": ["Excess_Type_Fire"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Fire"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Excess_Type_Fire"}, "\"Excess_Type_Fire\"", "\"Email\""], "input_fields": ["Excess_Type_Fire", "\"Excess_Type_Fire\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "03998d95-f762-4d17-be50-dcd2111df490", "source": "f2cd20e8-06cc-4ea3-85cc-a23b7850c08d", "target": null, "result": "pass"}, {"edge_id": "17ea2bce-8a17-46b2-a9e8-e19f525054ef", "source": "f2cd20e8-06cc-4ea3-85cc-a23b7850c08d", "target": null, "result": "fail"}]}, {"rule_id": "dd76932f-e964-47f2-b138-78b6d812bc9a", "rule_name": "Intra_Excess_Type_Theft", "conditions": [{"condition_id": "be1e260b-ed91-4aab-ad02-0ace7124a384", "type": "code", "affected_fields": ["Excess_Type_Theft"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_Theft"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Excess_Type_Theft"}, "\"Excess_Type_Theft\"", "\"Email\""], "input_fields": ["Excess_Type_Theft", "\"Excess_Type_Theft\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "c0be4475-3115-4341-a9f9-bb8132c2c418", "source": "be1e260b-ed91-4aab-ad02-0ace7124a384", "target": null, "result": "pass"}, {"edge_id": "01981dfc-e8b8-432a-8fde-83ab8b149294", "source": "be1e260b-ed91-4aab-ad02-0ace7124a384", "target": null, "result": "fail"}]}, {"rule_id": "f8ca9c9a-4f37-4341-9475-116e87a8178d", "rule_name": "Intra_Excess_Type_WS", "conditions": [{"condition_id": "f52b3d84-8cd9-456b-ac80-626c4ad390e7", "type": "code", "affected_fields": ["Excess_Type_WS"], "class_affected_fields": [{"class": "Email", "field": "Excess_Type_WS"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Excess_Type_WS"}, "\"Excess_Type_WS\"", "\"Email\""], "input_fields": ["Excess_Type_WS", "\"Excess_Type_WS\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "f3cdfe7e-3ede-461a-80af-4c9d5d701f3a", "source": "f52b3d84-8cd9-456b-ac80-626c4ad390e7", "target": null, "result": "pass"}, {"edge_id": "22090022-0f41-4f9d-b1df-6da807b8b025", "source": "f52b3d84-8cd9-456b-ac80-626c4ad390e7", "target": null, "result": "fail"}]}, {"rule_id": "d116204f-f9e3-4065-b123-1cf26ec65d6c", "rule_name": "Intra_Agency_Code", "conditions": [{"condition_id": "3f43cf17-a5c4-4b86-afb6-9d6255d840d2", "type": "code", "affected_fields": ["Agency_Code"], "class_affected_fields": [{"class": "Email", "field": "Agency_Code"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Agency_Code"}, "\"Agency_Code\"", "\"Email\""], "input_fields": ["Agency_Code", "\"Agency_Code\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 117, "y": 101}}], "edges": [{"edge_id": "02e4a619-7eac-4c2e-8655-6a088e873e4e", "source": "3f43cf17-a5c4-4b86-afb6-9d6255d840d2", "target": null, "result": "pass"}, {"edge_id": "c1d79be0-ab1c-40e6-9628-8e2c3c0cf2ce", "source": "3f43cf17-a5c4-4b86-afb6-9d6255d840d2", "target": null, "result": "fail"}]}, {"rule_id": "3de202d7-189e-4b59-8a63-2c7299c65110", "rule_name": "Intra_AXA_Trade_Description", "conditions": [{"condition_id": "2007296c-e469-4045-af51-a284d018d9c9", "type": "code", "affected_fields": ["AXA_Trade_Description"], "class_affected_fields": [{"class": "Email", "field": "AXA_Trade_Description"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "AXA_Trade_Description"}, "\"AXA_Trade_Description\"", "\"Email\""], "input_fields": ["AXA_Trade_Description", "\"AXA_Trade_Description\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "b5889473-f5c3-44fc-8df8-dc047eeca6ca", "source": "2007296c-e469-4045-af51-a284d018d9c9", "target": null, "result": "pass"}, {"edge_id": "f4b8b6c0-78bf-47b9-b7f2-b34effbac411", "source": "2007296c-e469-4045-af51-a284d018d9c9", "target": null, "result": "fail"}]}, {"rule_id": "a9378214-769a-4d31-a7b8-f107c2bc78b7", "rule_name": "Intra_Main_Cover_Type_Mapped", "conditions": [{"condition_id": "0e6ec660-8d10-4373-89e8-79a3ede62b1c", "type": "code", "affected_fields": ["Main_Cover_Type_Mapped"], "class_affected_fields": [{"class": "Email", "field": "Main_Cover_Type_Mapped"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Main_Cover_Type_Mapped"}, "\"Main_Cover_Type_Mapped\"", "\"Email\""], "input_fields": ["Main_Cover_Type_Mapped", "\"Main_Cover_Type_Mapped\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "a6f1a694-56cc-4a42-b07b-bc0360c1928d", "source": "0e6ec660-8d10-4373-89e8-79a3ede62b1c", "target": null, "result": "pass"}, {"edge_id": "bc43b222-04d3-4d1a-9cd2-dff363dd1251", "source": "0e6ec660-8d10-4373-89e8-79a3ede62b1c", "target": null, "result": "fail"}]}, {"rule_id": "2e4ac574-2274-4544-9e3c-e3f1c06e115c", "rule_name": "Intra_Driver_Party_Table", "conditions": [{"condition_id": "6e0aaf8d-aeeb-435c-8712-009c212aa879", "type": "code", "affected_fields": ["Driver_Party_Table"], "class_affected_fields": [{"class": "Email", "field": "Driver_Party_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Email", "field": "Driver_Party_Table"}, "\"Driver_Party_Table\"", "\"Email\""], "input_fields": ["Driver_Party_Table", "\"Driver_Party_Table\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 99, "y": 100}}], "edges": [{"edge_id": "ba9e58f6-58ca-46f9-bc24-12035862d5a2", "source": "6e0aaf8d-aeeb-435c-8712-009c212aa879", "target": null, "result": "pass"}, {"edge_id": "abfb06c4-a0e0-4d30-91bf-404791674c3d", "source": "6e0aaf8d-aeeb-435c-8712-009c212aa879", "target": null, "result": "fail"}]}, {"rule_id": "2e7fef02-690b-4739-91b5-c66aa3f0ad11", "rule_name": "Intra_Vehicle_Schedule_Table", "conditions": [{"condition_id": "c630ef89-da2f-42ea-ab58-6497c7de34e5", "type": "code", "affected_fields": ["Vehicle_Schedule_Table"], "class_affected_fields": [{"class": "Email", "field": "Vehicle_Schedule_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Email", "field": "Vehicle_Schedule_Table"}, "\"Vehicle_Schedule_Table\"", "\"Email\""], "input_fields": ["Vehicle_Schedule_Table", "\"Vehicle_Schedule_Table\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "ddace13d-b633-49aa-8568-b08df6549a94", "source": "c630ef89-da2f-42ea-ab58-6497c7de34e5", "target": null, "result": "pass"}, {"edge_id": "0e4b89a1-b9c9-4109-b215-4e5345eebc57", "source": "c630ef89-da2f-42ea-ab58-6497c7de34e5", "target": null, "result": "fail"}]}, {"rule_id": "1ff6848e-a8d4-4c66-ac4f-918407710786", "rule_name": "intra_Agency_address", "conditions": [{"condition_id": "9f660b86-5dba-4972-8f36-d2b1f5a1b96c", "type": "code", "affected_fields": ["Agency_address"], "class_affected_fields": [{"class": "Email", "field": "Agency_address"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Email", "field": "Agency_address"}, "\"Agency_address\"", "\"Email\""], "input_fields": ["Agency_address", "\"Agency_address\"", "\"Email\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "0efd8ed9-d0e2-4cc2-a930-fecab22d178f", "source": "9f660b86-5dba-4972-8f36-d2b1f5a1b96c", "target": null, "result": "pass"}, {"edge_id": "d150f1f1-7719-4679-ae81-ef33d6e353f2", "source": "9f660b86-5dba-4972-8f36-d2b1f5a1b96c", "target": null, "result": "fail"}]}, {"rule_id": "11967906-0e6b-4a97-b30a-f0ae6f69468f", "rule_name": "Target Price UDF", "conditions": [{"condition_id": "36f2025c-8be6-4890-a4fd-6262d4e542b8", "type": "lambda_code", "affected_fields": ["Target_Price"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Target_Price"}], "params": {"code": "\n\ndef validate_target_price(Target_Price, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_target_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Target_Price:\n\t\t# Return None to indicate validation passed\n\t  try:\n\t      Target_Price = str(Target_Price).strip()\n\t  except:\n\t      None\n\t  try:\n\t      clean_and_validate_target_price_loose(Target_Price)\n\t  except Exception:\n\t      print(traceback.format_exc())\n\t      return \"Invalid Target Price\"\n\telse:\n\t      return None", "fn_name": "validate_target_price", "args": [{"name": "Target_Price", "data_type": "FIELD", "value": "Target Price"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "d2cd02dd-444c-4f0d-b6c9-d791ec20f20c", "source": "36f2025c-8be6-4890-a4fd-6262d4e542b8", "target": null, "result": "pass"}, {"edge_id": "38fdd083-6eb4-49f6-883b-da9ca168166c", "source": "36f2025c-8be6-4890-a4fd-6262d4e542b8", "target": null, "result": "fail"}]}, {"rule_id": "f8b3cf87-3876-4130-963f-8eb25db46269", "rule_name": "Agency Enquiry Reference UDF", "conditions": [{"condition_id": "81619b86-5676-4715-8f8b-db10f02e91fa", "type": "lambda_code", "affected_fields": ["Agency_Enquiry_Reference"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Agency_Enquiry_Reference"}], "params": {"code": "\n\ndef validate_agency_enquiry_reference(Agency_Enquiry_Reference, context = {}, keys = {}, **kwargs):\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Agency_Enquiry_Reference:\n\t\t# Return None to indicate validation passed\n\t\tif not isinstance(Agency_Enquiry_Reference, str):\n\t\t\treturn \"Agency Enquiry Reference must be a string\"\n\t\tAgency_Enquiry_Reference = Agency_Enquiry_Reference.strip()\n\t\tif not Agency_Enquiry_Reference:\n\t\t\treturn \"Agency Enquiry Reference cannot be empty or whitespace.\"\n\t\tif contains_only_quotes(Agency_Enquiry_Reference):\n\t\t\t\treturn None\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_agency_enquiry_reference", "args": [{"name": "Agency_Enquiry_Reference", "data_type": "FIELD", "value": "Agency Enquiry Reference"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "870e4a02-584b-42b4-a171-6634d8022b6f", "source": "81619b86-5676-4715-8f8b-db10f02e91fa", "target": null, "result": "pass"}, {"edge_id": "f336d886-7dee-4c35-a369-7b85701f3d70", "source": "81619b86-5676-4715-8f8b-db10f02e91fa", "target": null, "result": "fail"}]}, {"rule_id": "e9d80b48-4040-4dca-8906-d9a5a263f412", "rule_name": "Broker Deadline UDF", "conditions": [{"condition_id": "d1dcb65e-04c8-4ec6-bcdb-7814c70ac2ae", "type": "lambda_code", "affected_fields": ["Broker_Deadline"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Broker_Deadline"}], "params": {"code": "\n\ndef validate_broker_deadline(Broker_Deadline, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Broker_Deadline:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Broker_Deadline = str(Broker_Deadline).strip()\n\t\texcept:\n\t\t\treturn None\n\t\n\t\tif contains_only_quotes(Broker_Deadline):\n\t\t\treturn None\n\t\tif not isinstance(Broker_Deadline,str):\n\t\t\treturn \"Broker Deadline must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Broker_Deadline):\n\t\t\treturn \"Broker Deadline must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Broker_Deadline,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_broker_deadline", "args": [{"name": "Broker_Deadline", "data_type": "FIELD", "value": "Broker Deadline"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "00f21f06-edc5-4682-83d8-8aa304c81cd3", "source": "d1dcb65e-04c8-4ec6-bcdb-7814c70ac2ae", "target": null, "result": "pass"}, {"edge_id": "dc0c96c9-99ef-4b15-bbb4-2568b368944b", "source": "d1dcb65e-04c8-4ec6-bcdb-7814c70ac2ae", "target": null, "result": "fail"}]}, {"rule_id": "be250d1c-3b50-4a6f-9ef8-6d37ccc48bef", "rule_name": "Date Established UDF", "conditions": [{"condition_id": "5365488e-3cae-4b3b-adab-f5c0775830a1", "type": "lambda_code", "affected_fields": ["Date_Established"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Date_Established"}], "params": {"code": "\n\ndef validate_date_established(Date_Established, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Date_Established:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Date_Established = str(Date_Established).strip()\n\t\texcept:\n\t\t\treturn None\n\t\t\t\t\n\t\tif contains_only_quotes(Date_Established):\n\t\t\treturn None\n\t\tif not isinstance(Date_Established,str):\n\t\t\treturn \"Date Established must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Date_Established):\n\t\t\treturn \"Date Established must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Date_Established,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_date_established", "args": [{"name": "Date_Established", "data_type": "FIELD", "value": "Date Established"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "6120b953-fabc-4d37-8a3b-aba4334b2273", "source": "5365488e-3cae-4b3b-adab-f5c0775830a1", "target": null, "result": "pass"}, {"edge_id": "c157059f-bea9-4fd3-a9b4-94b593ebc7c5", "source": "5365488e-3cae-4b3b-adab-f5c0775830a1", "target": null, "result": "fail"}]}, {"rule_id": "b2571794-8de7-43fe-ae8f-b58fde25ac22", "rule_name": "Incepts On UDF", "conditions": [{"condition_id": "84853426-f9df-41fe-b8b0-aa09851800e4", "type": "lambda_code", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Incepts_On"}], "params": {"code": "\n\ndef validate_incepts_on(Incepts_On, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Incepts_On:\n\t\ttry:\n\t\t\tIncepts_On = str(Incepts_On).strip()\n\t\texcept:\n\t\t\treturn None \n\t\t# Return None to indicate validation passed\n\t\t# Incepts_On = Incepts_On.strip()\n\t\tif contains_only_quotes(Incepts_On):\n\t\t\treturn None\n\t\tif not isinstance(Incepts_On,str):\n\t\t\treturn \"Incepts On must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Incepts_On):\n\t\t\treturn \"Incepts On must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Incepts_On,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_incepts_on", "args": [{"name": "Incepts_On", "data_type": "FIELD", "value": "Incepts On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "2f15ccd1-c894-4ab4-97ad-8a0f79dea45e", "source": "84853426-f9df-41fe-b8b0-aa09851800e4", "target": null, "result": "pass"}, {"edge_id": "e5df0f2f-8d90-423d-8027-f7b18a28cdb7", "source": "84853426-f9df-41fe-b8b0-aa09851800e4", "target": null, "result": "fail"}]}, {"rule_id": "efbeb409-dde6-4e92-bbb0-8f0f9cf084c5", "rule_name": "Expires On UDF", "conditions": [{"condition_id": "9a7385d0-959e-42b0-b4ca-98fca37dd35e", "type": "lambda_code", "affected_fields": ["Expires_On"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Expires_On"}], "params": {"code": "\n\ndef validate_expires_on(Expires_On, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Expires_On:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Expires_On = str(Expires_On).strip()\n\t\texcept:\n\t\t\treturn None\n\t\t\t\n\t\tif contains_only_quotes(Expires_On):\n\t\t\treturn None\n\t\tif not isinstance(Expires_On,str):\n\t\t\treturn \"Expires On must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Expires_On):\n\t\t\treturn \"Expires On must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Expires_On,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_expires_on", "args": [{"name": "Expires_On", "data_type": "FIELD", "value": "Expires On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "9707178a-04db-4014-a464-e04a84a0b15e", "source": "9a7385d0-959e-42b0-b4ca-98fca37dd35e", "target": null, "result": "pass"}, {"edge_id": "8518cfec-bbb9-435c-b6dd-f3228cfb4e35", "source": "9a7385d0-959e-42b0-b4ca-98fca37dd35e", "target": null, "result": "fail"}]}, {"rule_id": "f6214817-72a4-4213-aa32-5de2d3176af3", "rule_name": "Risk Postcode UDF", "conditions": [{"condition_id": "2d5eff4a-beba-4065-b601-9aea02ece9f9", "type": "lambda_code", "affected_fields": ["Risk_Postcode"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Risk_Postcode"}], "params": {"code": "\n\ndef validate_post_code(Risk_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Risk_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t", "fn_name": "validate_post_code", "args": [{"name": "Risk_Postcode", "data_type": "FIELD", "value": "Risk Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "32c4d146-2e5d-482e-b590-ae06aee86d5c", "source": "2d5eff4a-beba-4065-b601-9aea02ece9f9", "target": null, "result": "pass"}, {"edge_id": "a8a56d74-6754-4dba-a082-2fd41300ee2c", "source": "2d5eff4a-beba-4065-b601-9aea02ece9f9", "target": null, "result": "fail"}]}, {"rule_id": "f214602a-7aba-4e4f-9ec7-4281b078acb0", "rule_name": "Excess Type Accident Damage UDF", "conditions": [{"condition_id": "991132a2-3172-4185-9efa-b86f6302cdca", "type": "lambda_code", "affected_fields": ["Excess_Type_Accident_Damage"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Accident_Damage"}], "params": {"code": "\n\ndef validate_excess_type_accident_damage(Excess_Type_Accident_Damage, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Accident_Damage:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Accident_Damage = str(Excess_Type_Accident_Damage).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Accident_Damage)\n\t  except Exception:\n\t    return \"Invalid Excess Type Accident Damage\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_accident_damage", "args": [{"name": "Excess_Type_Accident_Damage", "data_type": "FIELD", "value": "Excess Type Accident Damage"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "3a74d22c-c504-4269-9453-521d7035653f", "source": "991132a2-3172-4185-9efa-b86f6302cdca", "target": null, "result": "pass"}, {"edge_id": "d789e475-1c63-435d-a197-246f61f11a7f", "source": "991132a2-3172-4185-9efa-b86f6302cdca", "target": null, "result": "fail"}]}, {"rule_id": "cd96a35d-0f09-433f-a007-b7d53af42a0c", "rule_name": "Excess Type Fire UDF", "conditions": [{"condition_id": "7e46e854-f3ff-42bf-b196-e5fb65df7689", "type": "lambda_code", "affected_fields": ["Excess_Type_Fire"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Fire"}], "params": {"code": "\n\ndef validate_excess_type_fire(Excess_Type_Fire, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Fire:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Fire = str(Excess_Type_Fire).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Fire)\n\t  except Exception:\n\t    return \"Invalid Excess Type Fire Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_fire", "args": [{"name": "Excess_Type_Fire", "data_type": "FIELD", "value": "Excess Type Fire"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "9e148a18-0e52-4418-86b1-abd884231ee6", "source": "7e46e854-f3ff-42bf-b196-e5fb65df7689", "target": null, "result": "pass"}, {"edge_id": "150b917b-ad8d-469c-9c37-1fd4ccb64de5", "source": "7e46e854-f3ff-42bf-b196-e5fb65df7689", "target": null, "result": "fail"}]}, {"rule_id": "48e2d728-a6a4-4f57-996c-c6dbe6fc0054", "rule_name": "Excess Type Theft UDF", "conditions": [{"condition_id": "13b8eb2e-9120-4805-af83-74d2c71fdd90", "type": "lambda_code", "affected_fields": ["Excess_Type_Theft"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Theft"}], "params": {"code": "\n\ndef validate_excess_type_theft(Excess_Type_Theft, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Theft:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Theft = str(Excess_Type_Theft).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Theft)\n\t  except Exception:\n\t    return \"Invalid Excess Type Theft Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_theft", "args": [{"name": "Excess_Type_Theft", "data_type": "FIELD", "value": "Excess Type Theft"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "031954bd-f971-4398-9e64-5bd69b68bcdb", "source": "13b8eb2e-9120-4805-af83-74d2c71fdd90", "target": null, "result": "pass"}, {"edge_id": "cbf519f0-fa01-484b-8805-4ce111a71b0d", "source": "13b8eb2e-9120-4805-af83-74d2c71fdd90", "target": null, "result": "fail"}]}, {"rule_id": "5d81dcb1-8e1f-4068-99be-161b17aca375", "rule_name": "Excess Type WS UDF", "conditions": [{"condition_id": "5d23dc12-9841-4349-a7fe-d71672f89ab3", "type": "lambda_code", "affected_fields": ["Excess_Type_WS"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_WS"}], "params": {"code": "\n\ndef validate_excess_type_ws(Excess_Type_WS, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_WS:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_WS = str(Excess_Type_WS).strip()\n\t    clean_and_validate_price_loose(Excess_Type_WS)\n\t  except Exception:\n\t    return \"Invalid Excess Type WS Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_ws", "args": [{"name": "Excess_Type_WS", "data_type": "FIELD", "value": "Excess Type WS"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "ef700b7c-f990-4563-a465-e07edd0b3505", "source": "5d23dc12-9841-4349-a7fe-d71672f89ab3", "target": null, "result": "pass"}, {"edge_id": "40bc0831-5249-46dd-bb6f-78193f3ccab9", "source": "5d23dc12-9841-4349-a7fe-d71672f89ab3", "target": null, "result": "fail"}]}, {"rule_id": "40b2683f-03d8-4fcf-a745-e15405c28aad", "rule_name": "Vehicle Schedule Table UDF", "conditions": [{"condition_id": "efd6fbfc-f077-4e17-a062-8403afa97b6f", "type": "lambda_code", "affected_fields": ["Vehicle_Schedule_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Vehicle_Schedule_Table"}], "params": {"code": "\n\ndef date_validations(Vehicle_Schedule_Table, context = {}, keys = {}, **kwargs):\n\tfrom datetime import datetime\n\timport pandas as pd\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_date_columns(df, date_columns, date_format=\"%d/%m/%Y\"):\n\t    invalid_date_columns = []\n\t    for col in date_columns:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        \n\t        # Drop nulls and convert to string\n\t        col_data = df[col].dropna().astype(str).str.strip()\n\t\n\t        # Try parsing dates using pd.to_datetime with errors='coerce'\n\t        parsed_dates = pd.to_datetime(col_data, format=date_format, errors='coerce')\n\t\n\t        # If any parsing failed (NaT), mark the column as invalid\n\t        if parsed_dates.isna().any():\n\t            invalid_date_columns.append(col)\n\t    \n\t    if not invalid_date_columns:\n\t        return None\n\t    # return f\"{invalid_date_columns} contain invalid date formats\"\n\t    if len(invalid_date_columns) == 1:\n\t        return f\"The column '{invalid_date_columns[0]}' contains invalid date formats.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_date_columns)\n\t        return f\"The columns {cols_str} contain invalid date formats.\"\n\t\n\t\n\t\n\tcolumns_to_check = [\n\t  'Effective From',\n\t  'Effective To'\n\t]\n\tTable = Vehicle_Schedule_Table\n\t\n\ttry:\n\t    try:\n\t        Table = json.loads(str(Table).strip())\n\t    except:\n\t        try:\n\t            Table = eval(str(Table).strip())\n\t        except:\n\t            return None\n\t    Table = convert_to_df( Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t# CCE_Table['Excess: AD'] = [\"234Rs\", \"234\"]\n\t\n\tresult = validate_date_columns( Table, columns_to_check )\n\tprint(\"result\",result)\n\treturn result", "fn_name": "date_validations", "args": [{"name": "Vehicle_Schedule_Table", "data_type": "FIELD", "value": "Vehicle Schedule Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "c19afb8c-dae7-441c-8765-5829a08f9ec9", "source": "efd6fbfc-f077-4e17-a062-8403afa97b6f", "target": null, "result": "pass"}, {"edge_id": "73c0db95-0d82-41da-a3f0-b85bb42d01c4", "source": "efd6fbfc-f077-4e17-a062-8403afa97b6f", "target": null, "result": "fail"}]}, {"rule_id": "886bf6b7-aa39-44d7-bc4e-03d71ee6020d", "rule_name": "Number of Notifiable Vehicles UDF", "conditions": [{"condition_id": "b6fe77a4-814f-46f2-b304-c50a0813f1c7", "type": "lambda_code", "affected_fields": ["Number_of_Notifiable_Vehicles"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Number_of_Notifiable_Vehicles"}], "params": {"code": "\n\ndef validate_number_of_notifiable_vehicles(Number_of_Notifiable_Vehicles, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\tif Number_of_Notifiable_Vehicles:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t\tNumber_of_Notifiable_Vehicles = str(Number_of_Notifiable_Vehicles).strip()\n\t\texcept:\n\t\t\treturn None\n\t\ttry:\n\t\t\tn = int (Number_of_Notifiable_Vehicles)\n\t\t\tif n < 0:\n\t\t\t\treturn \"Number of Notifiable Vehicles must be a non-negative interger.\"\n\t\t\treturn None\n\t\texcept(ValueError, TypeError):\n\t\t\treturn \"Number of Notifiable Vehicles must be a number.\"\n\telse:\n\t\treturn None", "fn_name": "validate_number_of_notifiable_vehicles", "args": [{"name": "Number_of_Notifiable_Vehicles", "data_type": "FIELD", "value": "Number of Notifiable Vehicles"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "588dba71-3791-45a7-bbad-a5bef0cdf9da", "source": "b6fe77a4-814f-46f2-b304-c50a0813f1c7", "target": null, "result": "pass"}, {"edge_id": "61ae2d1b-a0df-4bf8-8cea-c313074e8b60", "source": "b6fe77a4-814f-46f2-b304-c50a0813f1c7", "target": null, "result": "fail"}]}, {"rule_id": "e04a9887-09f9-4b45-b6ca-73a33c1bea19", "rule_name": "Driver Party Table UDF", "conditions": [{"condition_id": "48c3466a-6268-4b45-be81-b73dad6ba9fb", "type": "lambda_code", "affected_fields": ["Driver_Party_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Driver_Party_Table"}], "params": {"code": "\n\ndef date_validations(Driver_Party_Table, context = {}, keys = {}, **kwargs):\n\tfrom datetime import datetime\n\timport pandas as pd\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_date_columns(df, date_columns, date_format=\"%d/%m/%Y\"):\n\t    invalid_date_columns = []\n\t    for col in date_columns:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        \n\t        # Drop nulls and convert to string\n\t        col_data = df[col].dropna().astype(str).str.strip()\n\t\n\t        # Try parsing dates using pd.to_datetime with errors='coerce'\n\t        parsed_dates = pd.to_datetime(col_data, format=date_format, errors='coerce')\n\t\n\t        # If any parsing failed (NaT), mark the column as invalid\n\t        if parsed_dates.isna().any():\n\t            invalid_date_columns.append(col)\n\t    \n\t    if not invalid_date_columns:\n\t        return None\n\t    # return f\"{invalid_date_columns} contain invalid date formats\"\n\t    # Beautify the list of columns\n\t    if len(invalid_date_columns) == 1:\n\t        return f\"The column '{invalid_date_columns[0]}' contains invalid date formats.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_date_columns)\n\t        return f\"The columns {cols_str} contain invalid date formats.\"\n\t\n\t\n\t\n\tcolumns_to_check = [\n\t  'Driver D.O.B',\n\t]\n\tTable = Driver_Party_Table\n\t\n\ttry:\n\t    try:\n\t        Table = json.loads(str(Table).strip())\n\t    except:\n\t        try:\n\t            Table = eval(str(Table).strip())\n\t        except:\n\t            return None\n\t    Table = convert_to_df( Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t# CCE_Table['Excess: AD'] = [\"234Rs\", \"234\"]\n\t\n\tresult = validate_date_columns( Table, columns_to_check )\n\tprint(\"result\",result)\n\treturn result", "fn_name": "date_validations", "args": [{"name": "Driver_Party_Table", "data_type": "FIELD", "value": "Driver Party Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "29ade6cd-2788-4a6e-9d83-ddef5dc67707", "source": "48c3466a-6268-4b45-be81-b73dad6ba9fb", "target": null, "result": "pass"}, {"edge_id": "b77bad8b-a49b-4cdc-87f4-2a9e5c797089", "source": "48c3466a-6268-4b45-be81-b73dad6ba9fb", "target": null, "result": "fail"}]}, {"rule_id": "c84ebf1e-f2f0-44f4-9aed-b8d09486d08f", "rule_name": "Party Address Postcode UDF", "conditions": [{"condition_id": "ca3aeaa5-9024-4412-bae3-1f7cf0706dea", "type": "lambda_code", "affected_fields": ["Party_Address_Postcode"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Party_Address_Postcode"}], "params": {"code": "\n\ndef validate_party_address_postcode(Party_Address_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Party_Address_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "fn_name": "validate_party_address_postcode", "args": [{"name": "Party_Address_Postcode", "data_type": "FIELD", "value": "Party Address Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "5fd10add-a077-4944-96cb-4390d493cd3c", "source": "ca3aeaa5-9024-4412-bae3-1f7cf0706dea", "target": null, "result": "pass"}, {"edge_id": "a8b9141c-d87a-4ffa-8217-65a3bd894e7e", "source": "ca3aeaa5-9024-4412-bae3-1f7cf0706dea", "target": null, "result": "fail"}]}, {"rule_id": "c090fed7-4cd9-49bc-9652-ab862217ffef", "rule_name": "CCE Table UDF", "conditions": [{"condition_id": "137996c8-b6af-45f3-9626-7afdaa02bd23", "type": "lambda_code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "CCE_Table"}], "params": {"code": "\n\ndef compare_inception_date_with_policy_period_start_date(CCE_Table, Incepts_On, context = {}, keys = {}, **kwargs):\n\timport pandas as pd\n\t\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            print(\"yes\")\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu  med as header\n\t            print(\"yes\")\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\ttry:\n\t\tCCE_Table = json.loads(CCE_Table)\n\texcept:\n\t\ttry:\n\t\t\t\tCCE_Table = eval(CCE_Table)\n\t\texcept:\n\t\t\t\treturn None\n\t\n\ttry:\n\t    CCE_Table = convert_to_df(CCE_Table)\n\t\n\t    # Convert the column to datetime\n\t    CCE_Table['Policy Year Start Date'] = pd.to_datetime(CCE_Table['Policy Year Start Date'], format='%d/%m/%Y')\n\t\n\t    incepts_on_date = pd.to_datetime(Incepts_On, format='%d/%m/%Y')\n\t\n\t    # Compare day and month of inception date with policy period start date\n\t    all_match = CCE_Table['Policy Year Start Date'].apply(\n\t        lambda x: x.day == incepts_on_date.day and x.month == incepts_on_date.month\n\t    ).all()\n\t\n\t    # Final result\n\t    result = None if all_match else \"Inception date doesn't matches with Policy Period Start Dates\"\n\t\n\t    return result\n\t\n\texcept:\n\t    return None", "fn_name": "compare_inception_date_with_policy_period_start_date", "args": [{"name": "CCE_Table", "data_type": "FIELD", "value": "CCE Table"}, {"name": "Incepts_On", "data_type": "FIELD", "value": "Incepts On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "678eb1b0-f3a9-47e8-bf48-373de558f6ca", "source": "137996c8-b6af-45f3-9626-7afdaa02bd23", "target": null, "result": "pass"}, {"edge_id": "5182ce9f-025c-45e8-92b0-a0a0484397a7", "source": "137996c8-b6af-45f3-9626-7afdaa02bd23", "target": null, "result": "fail"}]}, {"rule_id": "299a5835-a490-4723-9a36-2c79a9c657f2", "rule_name": "CCE Table UDF", "conditions": [{"condition_id": "a4d32af5-5887-4fff-9e8b-f8e75b9c4fa5", "type": "lambda_code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "CCE_Table"}], "params": {"code": "\n\ndef data_validations(CCE_Table, context = {}, keys = {}, **kwargs):\n\tfrom datetime import datetime\n\timport pandas as pd\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_date_columns(df, date_columns, date_format=\"%d/%m/%Y\"):\n\t    invalid_date_columns = []\n\t    for col in date_columns:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        \n\t        # Drop nulls and convert to string\n\t        col_data = df[col].dropna().astype(str).str.strip()\n\t\n\t        # Try parsing dates using pd.to_datetime with errors='coerce'\n\t        parsed_dates = pd.to_datetime(col_data, format=date_format, errors='coerce')\n\t\n\t        # If any parsing failed (NaT), mark the column as invalid\n\t        if parsed_dates.isna().any():\n\t            invalid_date_columns.append(col)\n\t    \n\t    if not invalid_date_columns:\n\t        return None\n\t    # return f\"{invalid_date_columns} contain invalid date formats\"\n\t    if len(invalid_date_columns) == 1:\n\t        return f\"The column '{invalid_date_columns[0]}' contains invalid date formats.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_date_columns)\n\t        return f\"The columns {cols_str} contain invalid date formats.\"\n\t\n\t\n\t\n\tcolumns_to_check = [\n\t  'Policy Year Start Date',\n\t  'Policy Year End Date'\n\t]\n\tTable = CCE_Table\n\ttry:\n\t    try:\n\t        Table = json.loads(str(Table).strip())\n\t    except:\n\t        try:\n\t            Table = eval(str(Table).strip())\n\t        except:\n\t            return None\n\t    Table = convert_to_df( Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t# CCE_Table['Excess: AD'] = [\"234Rs\", \"234\"]\n\t\n\tresult = validate_date_columns( Table, columns_to_check )\n\tprint(\"result\",result)\n\treturn result", "fn_name": "data_validations", "args": [{"name": "CCE_Table", "data_type": "FIELD", "value": "CCE Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "6047f944-3939-4778-9fdb-966d5f3d6292", "source": "a4d32af5-5887-4fff-9e8b-f8e75b9c4fa5", "target": null, "result": "pass"}, {"edge_id": "e4c50b71-45b9-4598-8880-a598b39747b1", "source": "a4d32af5-5887-4fff-9e8b-f8e75b9c4fa5", "target": null, "result": "fail"}]}, {"rule_id": "6886d403-2b7e-47d6-aad9-abdec123802f", "rule_name": "CCE Table UDF", "conditions": [{"condition_id": "64181372-9a31-4fc7-809f-b05269eff3ad", "type": "lambda_code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "CCE_Table"}], "params": {"code": "\n\ndef numeric_validations_for_CCE_Table(CCE_Table, context = {}, keys = {}, **kwargs):\n\timport pandas as pd\n\timport json\n\timport numpy as np\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_numeric_columns_old(df, columns_to_check):\n\t\n\t    invalid_columns = []\n\t    \n\t    for col in columns_to_check:\n\t        # Treat empty strings as NaN\n\t        # series = df[col].replace(\"\", np.nan)\n\t        \n\t        # Convert to numeric (non-numeric -> NaN)\n\t        numeric_check = pd.to_numeric(series, errors='coerce')\n\t        \n\t        # Compare only non-empty rows\n\t        mask_non_empty = series.notna()\n\t        non_numeric_mask = mask_non_empty & numeric_check.isna()\n\t\n\t        if non_numeric_mask.any():\n\t            # Store non-numeric values for this column\n\t            invalid_values = series[non_numeric_mask].tolist()\n\t            invalid_columns.append(col)\n\t\n\t    # print(invalid_columns)\n\t\n\t    # Return None if all columns are valid\n\t    if len(invalid_columns)==0:\n\t        return None\n\t    else:\n\t        print(str(invalid_columns) + \" has non numeric columns\")\n\t        return str(invalid_columns) + \"has non numeric columns\"\n\t\n\t  \n\tdef validate_numeric_columns_old(df, columns_to_check):\n\t    invalid_columns = {}\n\t    for col in columns_to_check:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        series = df[col].astype(str).str.strip()  # Ensure everything is string\n\t        numeric_check = pd.to_numeric(series, errors='coerce')\n\t        # Now consider everything that couldn't be converted as invalid\n\t        non_numeric_mask = numeric_check.isna()\n\t        if non_numeric_mask.any():\n\t            invalid_values = series[non_numeric_mask].tolist()\n\t            invalid_columns[col] = invalid_values\n\t    if not invalid_columns:\n\t        return None\n\t    else:\n\t        return str(invalid_columns) + \" has non-numeric values\"\n\t\n\tdef validate_numeric_columns(df, columns_to_check):\n\t    invalid_columns = []\n\t    for col in columns_to_check:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        series = df[col].astype(str).str.strip()  # Ensure everything is string\n\t        numeric_check = pd.to_numeric(series, errors='coerce')\n\t        # Now consider everything that couldn't be converted as invalid\n\t        non_numeric_mask = numeric_check.isna()\n\t        if non_numeric_mask.any():\n\t            # invalid_values = series[non_numeric_mask].tolist()\n\t            invalid_columns.append(col)\n\t    if not invalid_columns:\n\t        return None\n\t    # else:\n\t    #     return str(invalid_columns) + \" has non-numeric values\"\n\t    elif len(invalid_columns) == 1:\n\t        return f\"The column '{invalid_columns[0]}' contains non-numeric values.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_columns)\n\t        return f\"The columns {cols_str} contain non-numeric values.\"\n\t\n\t\n\t# Columns you want to check\n\tcolumns_to_check = [\n\t\n\t'Excess: AD', \n\t'Excess: Fire', \n\t'Excess: Theft', \n\t'Excess: WS',\n\t\n\t'Incurreds - Paid: AD&WS',\n\t'Incurreds - Paid: FT', \n\t'Incurreds - Paid: TP',\n\t'Incurreds - Outstanding: AD&WS',\n\t'Incurreds - Outstanding: FT',\n\t'Incurreds - Outstanding: TP', \n\t'Total Incurred Paid +  Outstanding',\n\t\n\t'Vehicle Years Earned',\n\t'Claim Count: All',\n\t]\n\t\n\t\n\ttry:\n\t    try:\n\t        CCE_Table = json.loads(str(CCE_Table).strip())\n\t    except:\n\t        try:\n\t            CCE_Table = eval(str(CCE_Table).strip())\n\t        except:\n\t            return None\n\t    CCE_Table = convert_to_df( CCE_Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t\n\tresult = validate_numeric_columns( CCE_Table, columns_to_check )\n\tprint(result)\n\treturn result", "fn_name": "numeric_validations_for_CCE_Table", "args": [{"name": "CCE_Table", "data_type": "FIELD", "value": "CCE Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "d94bc62f-365b-421f-911a-cf5db6f2e8c8", "source": "64181372-9a31-4fc7-809f-b05269eff3ad", "target": null, "result": "pass"}, {"edge_id": "9063090c-d3b1-4b7e-b548-b8a040b621c8", "source": "64181372-9a31-4fc7-809f-b05269eff3ad", "target": null, "result": "fail"}]}, {"rule_id": "ea270424-2035-4c25-a1be-9d202c5f261d", "rule_name": "Intra_Party_Address", "conditions": [{"condition_id": "1f067990-0c83-4ca2-b344-0367a7569890", "type": "code", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Party_Address"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Party_Address"}, "\"Party_Address\"", "\"Broker Presentation\""], "input_fields": ["Party_Address", "\"Party_Address\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 92, "y": 96}}], "edges": [{"edge_id": "2ff79a30-0769-4caf-9e67-0ea503ad2515", "source": "1f067990-0c83-4ca2-b344-0367a7569890", "target": null, "result": "pass"}, {"edge_id": "c9b5a153-3257-4dca-bc89-70e386eede3c", "source": "1f067990-0c83-4ca2-b344-0367a7569890", "target": null, "result": "fail"}]}, {"rule_id": "1d0a9725-fa0f-43ce-9ac1-97dc9e0112f5", "rule_name": "Intra_Insured", "conditions": [{"condition_id": "67e29654-ef2b-4a61-b449-95c579ad1cb5", "type": "code", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Insured"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Insured"}, "\"Insured\"", "\"Broker Presentation\""], "input_fields": ["Insured", "\"Insured\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "d5ae1cc7-9e2d-4bde-ade1-d05906047cbb", "source": "67e29654-ef2b-4a61-b449-95c579ad1cb5", "target": null, "result": "pass"}, {"edge_id": "c363dae5-2036-4cdc-8769-31e33e015feb", "source": "67e29654-ef2b-4a61-b449-95c579ad1cb5", "target": null, "result": "fail"}]}, {"rule_id": "da136c53-6e85-4d9d-aa47-30637515308a", "rule_name": "Intra_Business_Description", "conditions": [{"condition_id": "28c304f3-43f5-44f8-a747-aeb292fc493e", "type": "code", "affected_fields": ["Business_Description"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Business_Description"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Business_Description"}, "\"Business_Description\"", "\"Broker Presentation\""], "input_fields": ["Business_Description", "\"Business_Description\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "12b05f03-c45d-4c80-a0be-58013e58105d", "source": "28c304f3-43f5-44f8-a747-aeb292fc493e", "target": null, "result": "pass"}, {"edge_id": "21e35a73-d592-4d28-9e83-808b9fc4db5f", "source": "28c304f3-43f5-44f8-a747-aeb292fc493e", "target": null, "result": "fail"}]}, {"rule_id": "b1487814-e432-487b-a76e-2592335d3ae6", "rule_name": "Intra_Agency_Name", "conditions": [{"condition_id": "623ff93c-90e5-456c-a8cc-05432942d906", "type": "code", "affected_fields": ["Agency_Name"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Agency_Name"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Agency_Name"}, "\"Agency_Name\"", "\"Broker Presentation\""], "input_fields": ["Agency_Name", "\"Agency_Name\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "84b7b35a-ef30-423d-9cb8-d56172b66115", "source": "623ff93c-90e5-456c-a8cc-05432942d906", "target": null, "result": "pass"}, {"edge_id": "848c55e1-5728-43f3-b7db-f6f7e9de4c13", "source": "623ff93c-90e5-456c-a8cc-05432942d906", "target": null, "result": "fail"}]}, {"rule_id": "b42e02f8-0021-403d-9e02-a60ac2109a49", "rule_name": "Intra_Agency_address", "conditions": [{"condition_id": "b0bbc022-0e8b-48d1-bca1-ce628c2d4c3c", "type": "code", "affected_fields": ["Agency_address"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Agency_address"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Agency_address"}, "\"Agency_address\"", "\"Broker Presentation\""], "input_fields": ["Agency_address", "\"Agency_address\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "221be755-18e4-4686-a990-6eb0a5c648d5", "source": "b0bbc022-0e8b-48d1-bca1-ce628c2d4c3c", "target": null, "result": "pass"}, {"edge_id": "69c0a07c-0d60-488a-8b0d-8422594b5e67", "source": "b0bbc022-0e8b-48d1-bca1-ce628c2d4c3c", "target": null, "result": "fail"}]}, {"rule_id": "5d2c2ecf-129d-44f4-9f60-d1595707b346", "rule_name": "Intra_Incepts_On_Date", "conditions": [{"condition_id": "ac8986fe-e926-416c-bfaf-ed9ae4c92208", "type": "code", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Incepts_On"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Incepts_On"}, "\"Incepts_On\"", "\"Broker Presentation\""], "input_fields": ["Incepts_On", "\"Incepts_On\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "a9123dc1-debd-4ad0-b2d4-58b464b2b5dd", "source": "ac8986fe-e926-416c-bfaf-ed9ae4c92208", "target": null, "result": "pass"}, {"edge_id": "457c5a28-ba76-49f2-a51a-d804ee19b2b5", "source": "ac8986fe-e926-416c-bfaf-ed9ae4c92208", "target": null, "result": "fail"}]}, {"rule_id": "45e86114-449d-417f-8fba-6477a5c9dc50", "rule_name": "Intra_Main_Cover_Type", "conditions": [{"condition_id": "20d440ed-8c10-454e-8520-5a8edf0d1c7e", "type": "code", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Main_Cover_Type"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Main_Cover_Type"}, "\"Main_Cover_Type\"", "\"Broker Presentation\""], "input_fields": ["Main_Cover_Type", "\"Main_Cover_Type\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "1c32bb8c-028b-433f-8baa-10af8110cdc1", "source": "20d440ed-8c10-454e-8520-5a8edf0d1c7e", "target": null, "result": "pass"}, {"edge_id": "856a3ac5-f0d1-4c58-bd18-b831b5debdfd", "source": "20d440ed-8c10-454e-8520-5a8edf0d1c7e", "target": null, "result": "fail"}]}, {"rule_id": "404a8ada-f84a-4078-a9b8-3a0eacddc5fd", "rule_name": "Intra_Excess_Type_Accident_Damage", "conditions": [{"condition_id": "fd5f5198-dea9-4cd6-b4be-c3e0de7db877", "type": "code", "affected_fields": ["Excess_Type_Accident_Damage"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Accident_Damage"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Accident_Damage"}, "\"Excess_Type_Accident_Damage\"", "\"Broker Presentation\""], "input_fields": ["Excess_Type_Accident_Damage", "\"Excess_Type_Accident_Damage\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "4ae4c43f-7be0-4b4d-ac09-df2c53cec39e", "source": "fd5f5198-dea9-4cd6-b4be-c3e0de7db877", "target": null, "result": "pass"}, {"edge_id": "fefc2b9d-410b-4ddd-8842-d6380726ab27", "source": "fd5f5198-dea9-4cd6-b4be-c3e0de7db877", "target": null, "result": "fail"}]}, {"rule_id": "818f4b10-5af2-41bb-8a7d-1e10a189aa3d", "rule_name": "Intra_Excess_Type_Fire", "conditions": [{"condition_id": "f2cd20e8-06cc-4ea3-85cc-a23b7850c08d", "type": "code", "affected_fields": ["Excess_Type_Fire"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Fire"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Fire"}, "\"Excess_Type_Fire\"", "\"Broker Presentation\""], "input_fields": ["Excess_Type_Fire", "\"Excess_Type_Fire\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "03998d95-f762-4d17-be50-dcd2111df490", "source": "f2cd20e8-06cc-4ea3-85cc-a23b7850c08d", "target": null, "result": "pass"}, {"edge_id": "17ea2bce-8a17-46b2-a9e8-e19f525054ef", "source": "f2cd20e8-06cc-4ea3-85cc-a23b7850c08d", "target": null, "result": "fail"}]}, {"rule_id": "dd76932f-e964-47f2-b138-78b6d812bc9a", "rule_name": "Intra_Excess_Type_Theft", "conditions": [{"condition_id": "be1e260b-ed91-4aab-ad02-0ace7124a384", "type": "code", "affected_fields": ["Excess_Type_Theft"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Theft"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Excess_Type_Theft"}, "\"Excess_Type_Theft\"", "\"Broker Presentation\""], "input_fields": ["Excess_Type_Theft", "\"Excess_Type_Theft\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "c0be4475-3115-4341-a9f9-bb8132c2c418", "source": "be1e260b-ed91-4aab-ad02-0ace7124a384", "target": null, "result": "pass"}, {"edge_id": "01981dfc-e8b8-432a-8fde-83ab8b149294", "source": "be1e260b-ed91-4aab-ad02-0ace7124a384", "target": null, "result": "fail"}]}, {"rule_id": "f8ca9c9a-4f37-4341-9475-116e87a8178d", "rule_name": "Intra_Excess_Type_WS", "conditions": [{"condition_id": "f52b3d84-8cd9-456b-ac80-626c4ad390e7", "type": "code", "affected_fields": ["Excess_Type_WS"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Excess_Type_WS"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Excess_Type_WS"}, "\"Excess_Type_WS\"", "\"Broker Presentation\""], "input_fields": ["Excess_Type_WS", "\"Excess_Type_WS\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "f3cdfe7e-3ede-461a-80af-4c9d5d701f3a", "source": "f52b3d84-8cd9-456b-ac80-626c4ad390e7", "target": null, "result": "pass"}, {"edge_id": "22090022-0f41-4f9d-b1df-6da807b8b025", "source": "f52b3d84-8cd9-456b-ac80-626c4ad390e7", "target": null, "result": "fail"}]}, {"rule_id": "72b6a613-b68c-41c8-9757-9b152456593e", "rule_name": "Intra_Offering_Type", "conditions": [{"condition_id": "4aa7655c-43ed-4dcf-9ee3-3e72309577b4", "type": "code", "affected_fields": ["Offering_Type"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Offering_Type"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Offering_Type"}, "\"Offering_Type\"", "\"Broker Presentation\""], "input_fields": ["Offering_Type", "\"Offering_Type\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "1b8c2157-e368-4890-a198-8d8548923226", "source": "4aa7655c-43ed-4dcf-9ee3-3e72309577b4", "target": null, "result": "pass"}, {"edge_id": "bf08b84e-520e-4f12-876c-30253b9ea589", "source": "4aa7655c-43ed-4dcf-9ee3-3e72309577b4", "target": null, "result": "fail"}]}, {"rule_id": "53a0e045-163d-48e6-808e-c012560811f8", "rule_name": "Intra_Main_Cover_Type_Mapped", "conditions": [{"condition_id": "c226e301-1f68-402a-abac-77e82a8fe56a", "type": "code", "affected_fields": ["Main_Cover_Type_Mapped"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Main_Cover_Type_Mapped"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Main_Cover_Type_Mapped"}, "\"Main_Cover_Type_Mapped\"", "\"Broker Presentation\""], "input_fields": ["Main_Cover_Type_Mapped", "\"Main_Cover_Type_Mapped\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "6eb1e986-6dd2-4e07-9bda-f365085c6d6f", "source": "c226e301-1f68-402a-abac-77e82a8fe56a", "target": null, "result": "pass"}, {"edge_id": "a102c726-9a09-45e1-a513-f407f44e03ac", "source": "c226e301-1f68-402a-abac-77e82a8fe56a", "target": null, "result": "fail"}]}, {"rule_id": "3068e9f4-7d04-4f3b-9f29-9a4317dc742f", "rule_name": "Intra_AXA_Trade_Description", "conditions": [{"condition_id": "7c6bbc58-df19-4226-8249-27a082571d1d", "type": "code", "affected_fields": ["AXA_Trade_Description"], "class_affected_fields": [{"class": "Broker Presentation", "field": "AXA_Trade_Description"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "AXA_Trade_Description"}, "\"AXA_Trade_Description\"", "\"Broker Presentation\""], "input_fields": ["AXA_Trade_Description", "\"AXA_Trade_Description\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "9c92c873-953c-4c07-ac0d-1f7a672004ba", "source": "7c6bbc58-df19-4226-8249-27a082571d1d", "target": null, "result": "pass"}, {"edge_id": "46aeef79-9234-42dd-926e-da8caca78795", "source": "7c6bbc58-df19-4226-8249-27a082571d1d", "target": null, "result": "fail"}]}, {"rule_id": "2e4ac574-2274-4544-9e3c-e3f1c06e115c", "rule_name": "Intra_Driver_Party_Table", "conditions": [{"condition_id": "6e0aaf8d-aeeb-435c-8712-009c212aa879", "type": "code", "affected_fields": ["Driver_Party_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Driver_Party_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Driver_Party_Table"}, "\"Driver_Party_Table\"", "\"Broker Presentation\""], "input_fields": ["Driver_Party_Table", "\"Driver_Party_Table\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 99, "y": 100}}], "edges": [{"edge_id": "ba9e58f6-58ca-46f9-bc24-12035862d5a2", "source": "6e0aaf8d-aeeb-435c-8712-009c212aa879", "target": null, "result": "pass"}, {"edge_id": "abfb06c4-a0e0-4d30-91bf-404791674c3d", "source": "6e0aaf8d-aeeb-435c-8712-009c212aa879", "target": null, "result": "fail"}]}, {"rule_id": "45393556-51d3-40c8-bd51-8178cf34fde8", "rule_name": "Intra_CCE_Table", "conditions": [{"condition_id": "d9f59b08-cc3a-4525-b8d5-d64e9af60619", "type": "code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "CCE_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "CCE_Table"}, "\"CCE_Table\"", "\"Broker Presentation\""], "input_fields": ["CCE_Table", "\"CCE_Table\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 101}}], "edges": [{"edge_id": "9058c5cf-5c83-4e55-a252-21a45b273542", "source": "d9f59b08-cc3a-4525-b8d5-d64e9af60619", "target": null, "result": "pass"}, {"edge_id": "104ea347-6b1b-4e2a-bc9a-78f9c09779fc", "source": "d9f59b08-cc3a-4525-b8d5-d64e9af60619", "target": null, "result": "fail"}]}, {"rule_id": "2e7fef02-690b-4739-91b5-c66aa3f0ad11", "rule_name": "Intra_Vehicle_Sched_Table", "conditions": [{"condition_id": "c630ef89-da2f-42ea-ab58-6497c7de34e5", "type": "code", "affected_fields": ["Vehicle_Schedule_Table"], "class_affected_fields": [{"class": "Broker Presentation", "field": "Vehicle_Schedule_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Broker Presentation", "field": "Vehicle_Schedule_Table"}, "\"Vehicle_Schedule_Table\"", "\"Broker Presentation\""], "input_fields": ["Vehicle_Schedule_Table", "\"Vehicle_Schedule_Table\"", "\"Broker Presentation\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "ddace13d-b633-49aa-8568-b08df6549a94", "source": "c630ef89-da2f-42ea-ab58-6497c7de34e5", "target": null, "result": "pass"}, {"edge_id": "0e4b89a1-b9c9-4109-b215-4e5345eebc57", "source": "c630ef89-da2f-42ea-ab58-6497c7de34e5", "target": null, "result": "fail"}]}, {"rule_id": "cdb27e63-400b-431c-ac7a-98e2c230c4f8", "rule_name": "Incepts On UDF", "conditions": [{"condition_id": "f128f517-fb3f-40cd-89bc-392cb9f921ba", "type": "lambda_code", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Incepts_On"}], "params": {"code": "\n\ndef validate_incepts_on(Incepts_On, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Incepts_On:\n\t\ttry:\n\t\t\tIncepts_On = str(Incepts_On).strip()\n\t\texcept:\n\t\t\treturn None \n\t\t# Return None to indicate validation passed\n\t\t# Incepts_On = Incepts_On.strip()\n\t\tif contains_only_quotes(Incepts_On):\n\t\t\treturn None\n\t\tif not isinstance(Incepts_On,str):\n\t\t\treturn \"Incepts On must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Incepts_On):\n\t\t\treturn \"Incepts On must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Incepts_On,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_incepts_on", "args": [{"name": "Incepts_On", "data_type": "FIELD", "value": "Incepts On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "c953bead-8d6f-4ae9-9679-21c57e1d1a04", "source": "f128f517-fb3f-40cd-89bc-392cb9f921ba", "target": null, "result": "pass"}, {"edge_id": "83d119ce-839c-4835-8034-ccfda21f238a", "source": "f128f517-fb3f-40cd-89bc-392cb9f921ba", "target": null, "result": "fail"}]}, {"rule_id": "60b0361c-efd2-4691-b444-b5a72c90b57c", "rule_name": "Risk Postcode UDF", "conditions": [{"condition_id": "516c3bfe-bec2-4e19-80cd-837a3591b17e", "type": "lambda_code", "affected_fields": ["Risk_Postcode"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Risk_Postcode"}], "params": {"code": "\n\ndef validate_post_code(Risk_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Risk_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t", "fn_name": "validate_post_code", "args": [{"name": "Risk_Postcode", "data_type": "FIELD", "value": "Risk Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "47cc81d5-5742-46fe-a454-cdcb8a1206ed", "source": "516c3bfe-bec2-4e19-80cd-837a3591b17e", "target": null, "result": "pass"}, {"edge_id": "1ba58932-5a73-4d89-9c71-3a6672faed62", "source": "516c3bfe-bec2-4e19-80cd-837a3591b17e", "target": null, "result": "fail"}]}, {"rule_id": "011fba1a-bbd3-4495-bb2e-9ff0806f8516", "rule_name": "Excess Type Accident Damage CCE UDF", "conditions": [{"condition_id": "0d8cc444-ea59-4993-8f28-26eb30f15759", "type": "lambda_code", "affected_fields": ["Excess_Type_Accident_Damage_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Accident_Damage_CCE"}], "params": {"code": "\n\ndef validate_excess_type_accident_damage(Excess_Type_Accident_Damage_CCE, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Accident_Damage_CCE:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Accident_Damage_CCE = str(Excess_Type_Accident_Damage_CCE).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Accident_Damage_CCE)\n\t  except Exception:\n\t    return \"Invalid Excess Type Accident Damage\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_accident_damage", "args": [{"name": "Excess_Type_Accident_Damage_CCE", "data_type": "FIELD", "value": "Excess Type Accident Damage CCE"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "da82704e-3c1e-4aa1-8e43-8507afe9ebf6", "source": "0d8cc444-ea59-4993-8f28-26eb30f15759", "target": null, "result": "pass"}, {"edge_id": "e6276685-5018-457e-8b76-4859c2c828fb", "source": "0d8cc444-ea59-4993-8f28-26eb30f15759", "target": null, "result": "fail"}]}, {"rule_id": "cbbe5398-7c03-4bbf-a7c8-2155c08cd042", "rule_name": "Excess Type Fire CCE UDF", "conditions": [{"condition_id": "26495e51-d5d4-4022-a7a3-43acbc256418", "type": "lambda_code", "affected_fields": ["Excess_Type_Fire_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Fire_CCE"}], "params": {"code": "\n\ndef validate_excess_type_fire(Excess_Type_Fire_CCE, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Fire_CCE:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Fire_CCE = str(Excess_Type_Fire_CCE).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Fire_CCE)\n\t  except Exception:\n\t    return \"Invalid Excess Type Fire Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_fire", "args": [{"name": "Excess_Type_Fire_CCE", "data_type": "FIELD", "value": "Excess Type Fire CCE"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "cfaa9bbf-9f9a-4ae8-8e49-77e971a7b89d", "source": "26495e51-d5d4-4022-a7a3-43acbc256418", "target": null, "result": "pass"}, {"edge_id": "56d9e294-477c-473f-bbe4-9261b788bcee", "source": "26495e51-d5d4-4022-a7a3-43acbc256418", "target": null, "result": "fail"}]}, {"rule_id": "18ad3b0d-0258-430d-8e9d-dcb456bbe434", "rule_name": "Excess Type Theft CCE UDF", "conditions": [{"condition_id": "a7e43a11-5d76-4a62-b24d-1518c57dd592", "type": "lambda_code", "affected_fields": ["Excess_Type_Theft_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Theft_CCE"}], "params": {"code": "\n\ndef validate_excess_type_theft(Excess_Type_Theft_CCE, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_Theft_CCE:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_Theft_CCE = str(Excess_Type_Theft_CCE).strip()\n\t    clean_and_validate_price_loose(Excess_Type_Theft_CCE)\n\t  except Exception:\n\t    return \"Invalid Excess Type Theft Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_theft", "args": [{"name": "Excess_Type_Theft_CCE", "data_type": "FIELD", "value": "Excess Type Theft CCE"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "788aaea0-2e67-475e-a897-d2f10b58a0b4", "source": "a7e43a11-5d76-4a62-b24d-1518c57dd592", "target": null, "result": "pass"}, {"edge_id": "6ea5609e-1215-4018-bc7f-c36af3096170", "source": "a7e43a11-5d76-4a62-b24d-1518c57dd592", "target": null, "result": "fail"}]}, {"rule_id": "1fc5748f-acdb-49fd-9280-e50158e75b40", "rule_name": "Excess Type WS CCE UDF", "conditions": [{"condition_id": "94c98aee-5040-426f-8564-d21e1d806f8c", "type": "lambda_code", "affected_fields": ["Excess_Type_WS_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_WS_CCE"}], "params": {"code": "\n\ndef validate_excess_type_ws(Excess_Type_WS_CCE, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\timport re\n\timport traceback\n\t\n\tALLOWED_CURRENCY_SYMBOLS = ['\u00a3', '$', '\u20ac', '\u20b9', '\u00a5']\n\t\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\t\n\tdef clean_and_validate_price_loose(value):\n\t    \"\"\"\n\t    Validates and cleans a target price string supporting multiple currencies.\n\t    Loose version: allows any comma usage.\n\t    \"\"\"\n\t    value = value.strip()\n\t    if contains_only_quotes(value):  \n\t      return None\n\t\n\t    if not value or not isinstance(value, str):\n\t        raise ValueError(\"Target Price must be a non-empty string.\")\n\t\n\t    # Escape currency symbols\n\t    escaped_symbols = ''.join(re.escape(sym) for sym in ALLOWED_CURRENCY_SYMBOLS)\n\t\n\t    # Relaxed pattern: currency + digits/commas + optional decimal\n\t    pattern = rf\"\"\"\n\t        ^\\s*\n\t        [{escaped_symbols}]?      # optional currency\n\t        \\s*\n\t        [\\d,]+                    # digits and commas\n\t        (?:\\.\\d+)?                # optional decimal\n\t        \\s*$\n\t    \"\"\"\n\t\n\t    if not re.fullmatch(pattern, value, re.VERBOSE):\n\t        raise ValueError(f\"Invalid Target Price format: '{value}'\")\n\t\n\t    # Strip currency, commas, spaces\n\t    cleaned = re.sub(rf\"[{escaped_symbols},\\s]\", \"\", value)\n\t    try:\n\t        price = float(cleaned)\n\t    except ValueError:\n\t        raise ValueError(f\"Unable to convert '{value}' to a numeric price.\")\n\t    return None\n\t\n\t\n\tif Excess_Type_WS_CCE:\n\t  # Return None to indicate validation passed\n\t  try:\n\t    Excess_Type_WS_CCE = str(Excess_Type_WS_CCE).strip()\n\t    clean_and_validate_price_loose(Excess_Type_WS_CCE)\n\t  except Exception:\n\t    return \"Invalid Excess Type WS Price\"\n\telse:\n\t  return None\n\t", "fn_name": "validate_excess_type_ws", "args": [{"name": "Excess_Type_WS_CCE", "data_type": "FIELD", "value": "Excess Type WS CCE"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "62eca815-a158-4800-a2e7-02b1867f2da8", "source": "94c98aee-5040-426f-8564-d21e1d806f8c", "target": null, "result": "pass"}, {"edge_id": "9fb59743-2ad6-4793-ab98-da3657312ea3", "source": "94c98aee-5040-426f-8564-d21e1d806f8c", "target": null, "result": "fail"}]}, {"rule_id": "f4bfbbf2-de23-414b-81df-2e4c2f475f2d", "rule_name": "CCE Table UDF", "conditions": [{"condition_id": "646f5b75-66ca-4952-98d9-e982225ea420", "type": "lambda_code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "CCE_Table"}], "params": {"code": "\n\ndef compare_inception_date_with_policy_period_start_date(CCE_Table, context = {}, keys = {}, **kwargs):\n\timport pandas as pd\n\t\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\ttry:\n\t  CCE_Table = str(CCE_Table).strip()\n\texcept:\n\t  return None\n\ttry:\n\t\tCCE_Table = json.loads(CCE_Table)\n\texcept:\n\t\ttry:\n\t\t\t\tCCE_Table = eval(CCE_Table)\n\t\texcept:\n\t\t\t\treturn None\n\t\n\ttry:\n\t    CCE_Table = convert_to_df(CCE_Table)\n\t\n\t    # Convert the column to datetime\n\t    CCE_Table['Policy Year Start Date'] = pd.to_datetime(CCE_Table['Policy Year Start Date'], format='%d/%m/%Y')\n\t\n\t    incepts_on_date = pd.to_datetime(Incepts_On, format='%d/%m/%Y')\n\t\n\t    # Compare day and month of inception date with policy period start date\n\t    all_match = CCE_Table['Policy Year Start Date'].apply(\n\t        lambda x: x.day == incepts_on_date.day and x.month == incepts_on_date.month\n\t    ).all()\n\t\n\t    # Final result\n\t    result = None if all_match else \"Inception date doesn't matches with Policy Period Start Dates\"\n\t\n\t    return result\n\t\n\texcept:\n\t    return None", "fn_name": "compare_inception_date_with_policy_period_start_date", "args": [{"name": "CCE_Table", "data_type": "FIELD", "value": "CCE Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "09ef689e-5c7f-4eca-b4f8-3d7bda304f88", "source": "646f5b75-66ca-4952-98d9-e982225ea420", "target": null, "result": "pass"}, {"edge_id": "f377f02e-8a77-4017-8bc0-85f0ec80e5fa", "source": "646f5b75-66ca-4952-98d9-e982225ea420", "target": null, "result": "fail"}]}, {"rule_id": "df9ea7d7-6f62-4e5a-b09b-c33d686afd27", "rule_name": "CCE Table UDF", "conditions": [{"condition_id": "2e4a11ef-ab0a-4e20-b4fa-2c86a317d3ad", "type": "lambda_code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "CCE_Table"}], "params": {"code": "\n\ndef numeric_validations_for_CCE_Table(CCE_Table, context = {}, keys = {}, **kwargs):\n\timport pandas as pd\n\timport json\n\timport numpy as np\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_numeric_columns_old(df, columns_to_check):\n\t\n\t    invalid_columns = []\n\t    \n\t    for col in columns_to_check:\n\t        # Treat empty strings as NaN\n\t        # series = df[col].replace(\"\", np.nan)\n\t        \n\t        # Convert to numeric (non-numeric -> NaN)\n\t        numeric_check = pd.to_numeric(series, errors='coerce')\n\t        \n\t        # Compare only non-empty rows\n\t        mask_non_empty = series.notna()\n\t        non_numeric_mask = mask_non_empty & numeric_check.isna()\n\t\n\t        if non_numeric_mask.any():\n\t            # Store non-numeric values for this column\n\t            invalid_values = series[non_numeric_mask].tolist()\n\t            invalid_columns.append(col)\n\t\n\t    # print(invalid_columns)\n\t\n\t    # Return None if all columns are valid\n\t    if len(invalid_columns)==0:\n\t        return None\n\t    # else:\n\t    #     print(str(invalid_columns) + \" has non numeric columns\")\n\t    #     return str(invalid_columns) + \"has non numeric columns\"\n\t    elif len(invalid_columns) == 1:\n\t        return f\"The column '{invalid_columns[0]}' contains non-numeric values.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_columns)\n\t        return f\"The columns {cols_str} contain non-numeric values.\"\n\t\n\t\n\t  \n\tdef validate_numeric_columns_old_2(df, columns_to_check):\n\t    invalid_columns = {}\n\t    for col in columns_to_check:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        series = df[col].astype(str).str.strip()  # Ensure everything is string\n\t        numeric_check = pd.to_numeric(series, errors='coerce')\n\t        # Now consider everything that couldn't be converted as invalid\n\t        non_numeric_mask = numeric_check.isna()\n\t        if non_numeric_mask.any():\n\t            invalid_values = series[non_numeric_mask].tolist()\n\t            invalid_columns[col] = invalid_values\n\t    if not invalid_columns:\n\t        return None\n\t    else:\n\t        return str(invalid_columns) + \" has non-numeric values\"\n\t\n\tdef validate_numeric_columns(df, columns_to_check):\n\t    invalid_columns = []\n\t    for col in columns_to_check:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        series = df[col].astype(str).str.strip()  # Ensure everything is string\n\t        numeric_check = pd.to_numeric(series, errors='coerce')\n\t        # Now consider everything that couldn't be converted as invalid\n\t        non_numeric_mask = numeric_check.isna()\n\t        if non_numeric_mask.any():\n\t            # invalid_values = series[non_numeric_mask].tolist()\n\t            invalid_columns.append(col)\n\t    if not invalid_columns:\n\t        return None\n\t    # else:\n\t    #     return str(invalid_columns) + \" has non-numeric values\"\n\t    elif len(invalid_columns) == 1:\n\t        return f\"The column '{invalid_columns[0]}' contains non-numeric values.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_columns)\n\t        return f\"The columns {cols_str} contain non-numeric values.\"\n\t\n\t# Columns you want to check\n\tcolumns_to_check = [\n\t\n\t'Excess: AD', \n\t'Excess: Fire', \n\t'Excess: Theft', \n\t'Excess: WS',\n\t\n\t'Incurreds - Paid: AD&WS',\n\t'Incurreds - Paid: FT', \n\t'Incurreds - Paid: TP',\n\t'Incurreds - Outstanding: AD&WS',\n\t'Incurreds - Outstanding: FT',\n\t'Incurreds - Outstanding: TP', \n\t'Total Incurred Paid +  Outstanding',\n\t\n\t'Vehicle Years Earned',\n\t'Claim Count: All',\n\t]\n\t\n\t\n\ttry:\n\t    try:\n\t        CCE_Table = json.loads(str(CCE_Table).strip())\n\t    except:\n\t        try:\n\t            CCE_Table = eval(str(CCE_Table).strip())\n\t        except:\n\t            return None\n\t    CCE_Table = convert_to_df( CCE_Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t\n\tresult = validate_numeric_columns( CCE_Table, columns_to_check )\n\tprint(result)\n\treturn result", "fn_name": "numeric_validations_for_CCE_Table", "args": [{"name": "CCE_Table", "data_type": "FIELD", "value": "CCE Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "3ab38bf1-13a0-4b90-aa6a-95b7cf9900ba", "source": "2e4a11ef-ab0a-4e20-b4fa-2c86a317d3ad", "target": null, "result": "pass"}, {"edge_id": "651bd238-07ff-4416-8357-5d9c4fbe869f", "source": "2e4a11ef-ab0a-4e20-b4fa-2c86a317d3ad", "target": null, "result": "fail"}]}, {"rule_id": "2428de32-740e-4ded-9020-c1b00a81da59", "rule_name": "CCE Table UDF", "conditions": [{"condition_id": "a39f1b69-e816-40e0-9a72-1a3ab5ea4645", "type": "lambda_code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "CCE_Table"}], "params": {"code": "\n\ndef date_validations(CCE_Table, context = {}, keys = {}, **kwargs):\n\tfrom datetime import datetime\n\timport pandas as pd\n\t\n\t## Converting to dataframe format\n\tdef convert_to_df(data):\n\t    if isinstance(data, list):\n\t        if all(isinstance(item, dict) for item in data):\n\t            # List of dictionaries\n\t            return pd.DataFrame(data)\n\t        elif all(isinstance(item, list) for item in data):\n\t            # List of lists\n\t            # First row is assu med as header\n\t            return pd.DataFrame(data[1:], columns=data[0])\n\t        else:\n\t            return pd.DataFrame(data)\n\t\n\tdef validate_date_columns(df, date_columns, date_format=\"%d/%m/%Y\"):\n\t    invalid_date_columns = []\n\t    for col in date_columns:\n\t        if col not in df.columns:\n\t            continue  # Skip if column doesn't exist\n\t        \n\t        # Drop nulls and convert to string\n\t        col_data = df[col].dropna().astype(str).str.strip()\n\t\n\t        # Try parsing dates using pd.to_datetime with errors='coerce'\n\t        parsed_dates = pd.to_datetime(col_data, format=date_format, errors='coerce')\n\t\n\t        # If any parsing failed (NaT), mark the column as invalid\n\t        if parsed_dates.isna().any():\n\t            invalid_date_columns.append(col)\n\t    \n\t    if not invalid_date_columns:\n\t        return None\n\t    # return f\"{invalid_date_columns} contain invalid date formats\"\n\t    if len(invalid_date_columns) == 1:\n\t        return f\"The column '{invalid_date_columns[0]}' contains invalid date formats.\"\n\t    else:\n\t        cols_str = \", \".join(f\"'{col}'\" for col in invalid_date_columns)\n\t        return f\"The columns {cols_str} contain invalid date formats.\"\n\t\n\t\n\t\n\tcolumns_to_check = [\n\t  'Policy Year Start Date',\n\t  'Policy Year End Date'\n\t]\n\tTable = CCE_Table\n\ttry:\n\t    try:\n\t        Table = json.loads(str(Table).strip())\n\t    except:\n\t        try:\n\t            Table = eval(str(Table).strip())\n\t        except:\n\t            return None\n\t    Table = convert_to_df( Table )\n\t    \n\texcept Exception as e:\n\t    print(e)\n\t    return None\n\t\n\t# CCE_Table['Excess: AD'] = [\"234Rs\", \"234\"]\n\t\n\tresult = validate_date_columns( Table, columns_to_check )\n\tprint(\"result\",result)\n\treturn result", "fn_name": "date_validations", "args": [{"name": "CCE_Table", "data_type": "FIELD", "value": "CCE Table"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "8b83dbba-a205-4028-945e-98a4488e28a8", "source": "a39f1b69-e816-40e0-9a72-1a3ab5ea4645", "target": null, "result": "pass"}, {"edge_id": "dc8e1ef2-3441-4dfc-8bb2-61dbf738359e", "source": "a39f1b69-e816-40e0-9a72-1a3ab5ea4645", "target": null, "result": "fail"}]}, {"rule_id": "2b569caf-91c8-4cdd-86ad-cd9c7b023b58", "rule_name": "Expires On UDF", "conditions": [{"condition_id": "1531c019-8202-4a53-a4a6-b668b4380577", "type": "lambda_code", "affected_fields": ["Expires_On"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Expires_On"}], "params": {"code": "\n\ndef validate_expires_on(Expires_On, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\timport re\n\tfrom datetime import datetime\n\t\n\tdef contains_only_quotes(s):\n\t\treturn all(c in {'\"', \"'\"} for c in s)\n\t\n\tif Expires_On:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t  Expires_On = str(Expires_On).strip()\n\t\texcept:\n\t\t\treturn None\n\t\t\t\n\t\tif contains_only_quotes(Expires_On):\n\t\t\treturn None\n\t\tif not isinstance(Expires_On,str):\n\t\t\treturn \"Expires On must be a string\"\n\t\tpattern = r\"^\\d{2}/\\d{2}/\\d{4}$\"\n\t\tif not re.fullmatch(pattern,Expires_On):\n\t\t\treturn \"Expires On must be in dd/mm/yyyy format exactly (e.g. 25/03/2024).\"\n\t\ttry:\n\t\t\tdatetime.strptime(Expires_On,\"%d/%m/%Y\")\n\t\texcept ValueError:\n\t\t\treturn \"Invalid calendar date.\"\n\t\treturn None\n\telse:\n\t\treturn None", "fn_name": "validate_expires_on", "args": [{"name": "Expires_On", "data_type": "FIELD", "value": "Expires On"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "65eeb145-052b-483a-b621-c890ff86e260", "source": "1531c019-8202-4a53-a4a6-b668b4380577", "target": null, "result": "pass"}, {"edge_id": "796d0a94-e2d7-4433-9291-bad6b54e5a1a", "source": "1531c019-8202-4a53-a4a6-b668b4380577", "target": null, "result": "fail"}]}, {"rule_id": "89cc8b50-1120-40b2-87cb-b768aeeadccf", "rule_name": "Party Address Postcode UDF", "conditions": [{"condition_id": "10bcff90-4100-4d07-963c-094b9113f6c3", "type": "lambda_code", "affected_fields": ["Party_Address_Postcode"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Party_Address_Postcode"}], "params": {"code": "\n\ndef validate_party_address_postcode(Party_Address_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Party_Address_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "fn_name": "validate_party_address_postcode", "args": [{"name": "Party_Address_Postcode", "data_type": "FIELD", "value": "Party Address Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "ff697d0e-7df2-4519-baa6-a2775382e601", "source": "10bcff90-4100-4d07-963c-094b9113f6c3", "target": null, "result": "pass"}, {"edge_id": "44adb26f-7a46-4306-af92-8f9f80919551", "source": "10bcff90-4100-4d07-963c-094b9113f6c3", "target": null, "result": "fail"}]}, {"rule_id": "04abf347-4af3-4184-8942-3188c0cb2319", "rule_name": "intra_Insured", "conditions": [{"condition_id": "8115b458-a494-4466-9a92-b3d5bf0cd7c9", "type": "code", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Insured"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Insured"}, "\"Insured\"", "\"Confirmed Claims Experience\""], "input_fields": ["Insured", "\"Insured\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "76aae07e-5b84-4c5c-99ed-9445f0691d8f", "source": "8115b458-a494-4466-9a92-b3d5bf0cd7c9", "target": null, "result": "pass"}, {"edge_id": "47bcde51-e7b6-4615-9336-8f3187a8f32b", "source": "8115b458-a494-4466-9a92-b3d5bf0cd7c9", "target": null, "result": "fail"}]}, {"rule_id": "6b3e8309-9fb8-48bf-b5e3-b5ed3cd52bf7", "rule_name": "intra_Party_Address", "conditions": [{"condition_id": "f96955e9-7d70-427f-9b34-da8b49835e8b", "type": "code", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Party_Address"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Party_Address"}, "\"Party_Address\"", "\"Confirmed Claims Experience\""], "input_fields": ["Party_Address", "\"Party_Address\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "c8b96cb9-f13e-46d7-b3dd-c59133dc7ef3", "source": "f96955e9-7d70-427f-9b34-da8b49835e8b", "target": null, "result": "pass"}, {"edge_id": "c3a09397-4308-4d34-af2e-0a02b65fd222", "source": "f96955e9-7d70-427f-9b34-da8b49835e8b", "target": null, "result": "fail"}]}, {"rule_id": "0d0811f2-739e-43ca-b1ea-9dc721154eca", "rule_name": "intra_Business_Description", "conditions": [{"condition_id": "19fdbfef-4a69-4ac4-ae84-c1071236664b", "type": "code", "affected_fields": ["Business_Description"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Business_Description"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Business_Description"}, "\"Business_Description\"", "\"Confirmed Claims Experience\""], "input_fields": ["Business_Description", "\"Business_Description\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "8d1cdbe0-5b08-4912-a938-05e4ac1b3e8f", "source": "19fdbfef-4a69-4ac4-ae84-c1071236664b", "target": null, "result": "pass"}, {"edge_id": "9e5deae3-ed7c-420f-b164-4de7fe729e71", "source": "19fdbfef-4a69-4ac4-ae84-c1071236664b", "target": null, "result": "fail"}]}, {"rule_id": "51a6392c-8817-4fb6-9483-7fedbab429e4", "rule_name": "intra_AXA_Trade_Description ", "conditions": [{"condition_id": "e2f5db72-fd90-4690-a2be-c17d50c84250", "type": "code", "affected_fields": ["AXA_Trade_Description"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "AXA_Trade_Description"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "AXA_Trade_Description"}, "\"AXA_Trade_Description\"", "\"Confirmed Claims Experience\""], "input_fields": ["AXA_Trade_Description", "\"AXA_Trade_Description\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "767dce92-04ad-4617-8cf4-e34c5bb756f3", "source": "e2f5db72-fd90-4690-a2be-c17d50c84250", "target": null, "result": "pass"}, {"edge_id": "d56f1ee1-9468-41fd-8406-b41700dd019d", "source": "e2f5db72-fd90-4690-a2be-c17d50c84250", "target": null, "result": "fail"}]}, {"rule_id": "d5cafec6-d17f-4877-9b5b-fa70fff81380", "rule_name": "intra_Incepts_On_date", "conditions": [{"condition_id": "b781818c-b92d-45a0-b848-335ae1ff5124", "type": "code", "affected_fields": ["Incepts_On"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Incepts_On"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Incepts_On"}, "\"Incepts_On\"", "\"Confirmed Claims Experience\""], "input_fields": ["Incepts_On", "\"Incepts_On\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "74ee00f6-0707-44bb-b8c4-5ad8c74a8938", "source": "b781818c-b92d-45a0-b848-335ae1ff5124", "target": null, "result": "pass"}, {"edge_id": "1fa7fb86-f238-4386-97d5-b1e939fb0062", "source": "b781818c-b92d-45a0-b848-335ae1ff5124", "target": null, "result": "fail"}]}, {"rule_id": "81bcdff3-1122-4099-9a68-bcf16434e9dd", "rule_name": "intra_Main_Cover_Type", "conditions": [{"condition_id": "3526e5e3-f4c9-4da7-93b3-03268afde9d6", "type": "code", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Main_Cover_Type"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Main_Cover_Type"}, "\"Main_Cover_Type\"", "\"Confirmed Claims Experience\""], "input_fields": ["Main_Cover_Type", "\"Main_Cover_Type\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "76462a5e-cdab-488a-b2cb-407848bae8f6", "source": "3526e5e3-f4c9-4da7-93b3-03268afde9d6", "target": null, "result": "pass"}, {"edge_id": "4d045239-cbb3-489e-a20b-20c224fe7b5c", "source": "3526e5e3-f4c9-4da7-93b3-03268afde9d6", "target": null, "result": "fail"}]}, {"rule_id": "a945eeb8-949c-43a5-9eb4-816f529545e1", "rule_name": "intra_Main_Cover_Type_Mapped", "conditions": [{"condition_id": "fd4e2e45-61b2-4218-aae7-2ee1f219b24a", "type": "code", "affected_fields": ["Main_Cover_Type_Mapped"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Main_Cover_Type_Mapped"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Main_Cover_Type_Mapped"}, "\"Main_Cover_Type_Mapped\"", "\"Confirmed Claims Experience\""], "input_fields": ["Main_Cover_Type_Mapped", "\"Main_Cover_Type_Mapped\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "0d80fcd2-01df-41af-9bf9-ca24bfd2abb9", "source": "fd4e2e45-61b2-4218-aae7-2ee1f219b24a", "target": null, "result": "pass"}, {"edge_id": "37443c93-ca11-453f-8304-3417752e73e3", "source": "fd4e2e45-61b2-4218-aae7-2ee1f219b24a", "target": null, "result": "fail"}]}, {"rule_id": "322480e1-c7a0-4e0f-89cf-3ac6d5d24ab5", "rule_name": "intra_CCE_Table", "conditions": [{"condition_id": "cb542d49-4235-4ff8-b970-61d886a18f14", "type": "code", "affected_fields": ["CCE_Table"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "CCE_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "CCE_Table"}, "\"CCE_Table\"", "\"Confirmed Claims Experience\""], "input_fields": ["CCE_Table", "\"CCE_Table\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "b4568e64-5fe0-4df8-9204-dd0a4ca42b9c", "source": "cb542d49-4235-4ff8-b970-61d886a18f14", "target": null, "result": "pass"}, {"edge_id": "809aacf3-bbf1-43cb-a2c9-4951bfe15655", "source": "cb542d49-4235-4ff8-b970-61d886a18f14", "target": null, "result": "fail"}]}, {"rule_id": "69217494-10b0-42e8-969d-cc3e04659e69", "rule_name": "Risk Postcode UDF", "conditions": [{"condition_id": "dc723523-e726-47ba-981d-1e91cf1c937f", "type": "lambda_code", "affected_fields": ["Risk_Postcode"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Risk_Postcode"}], "params": {"code": "\n\ndef validate_post_code(Risk_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Risk_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t", "fn_name": "validate_post_code", "args": [{"name": "Risk_Postcode", "data_type": "FIELD", "value": "Risk Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "ea07819b-c050-419b-8dc3-2e4afaf2e143", "source": "dc723523-e726-47ba-981d-1e91cf1c937f", "target": null, "result": "pass"}, {"edge_id": "e8f92d5f-b42e-4799-b02b-3dce3305e7df", "source": "dc723523-e726-47ba-981d-1e91cf1c937f", "target": null, "result": "fail"}]}, {"rule_id": "56ace9e9-54dc-4a89-bf6e-8f231e43147c", "rule_name": "Number of Notifiable Vehicles UDF", "conditions": [{"condition_id": "70076ecf-763f-4f9c-9d39-1149afae7580", "type": "lambda_code", "affected_fields": ["Number_of_Notifiable_Vehicles"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Number_of_Notifiable_Vehicles"}], "params": {"code": "\n\ndef validate_number_of_notifiable_vehicles(Number_of_Notifiable_Vehicles, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\t\n\tif Number_of_Notifiable_Vehicles:\n\t\t# Return None to indicate validation passed\n\t\ttry:\n\t\t\tNumber_of_Notifiable_Vehicles = str(Number_of_Notifiable_Vehicles).strip()\n\t\texcept:\n\t\t\treturn None\n\t\ttry:\n\t\t\tn = int (Number_of_Notifiable_Vehicles)\n\t\t\tif n < 0:\n\t\t\t\treturn \"Number of Notifiable Vehicles must be a non-negative interger.\"\n\t\t\treturn None\n\t\texcept(ValueError, TypeError):\n\t\t\treturn \"Number of Notifiable Vehicles must be a number.\"\n\telse:\n\t\treturn None", "fn_name": "validate_number_of_notifiable_vehicles", "args": [{"name": "Number_of_Notifiable_Vehicles", "data_type": "FIELD", "value": "Number of Notifiable Vehicles"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "c29c49e7-6cdd-4b37-b6bd-f885d8299e13", "source": "70076ecf-763f-4f9c-9d39-1149afae7580", "target": null, "result": "pass"}, {"edge_id": "a7bce427-4a7e-490c-b1c4-45feb2891586", "source": "70076ecf-763f-4f9c-9d39-1149afae7580", "target": null, "result": "fail"}]}, {"rule_id": "1f1a0cd2-02f3-4e30-a575-de7f218d12a5", "rule_name": "Party Address Postcode UDF", "conditions": [{"condition_id": "521a89e9-52d6-4c61-9b52-244a1d44892f", "type": "lambda_code", "affected_fields": ["Party_Address_Postcode"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Party_Address_Postcode"}], "params": {"code": "\n\ndef validate_party_address_postcode(Party_Address_Postcode, context = {}, keys = {}, **kwargs):\n\t# Import Python packages\n\t# import json\n\t# Log statements using print()\n\t# print(\"This will appear in the logs\")\n\tdef contains_only_quotes(s):\n\t  return all(c in {'\"', \"'\"} for c in s)\n\timport re\n\t# UK postcode regex (standard style)\n\tPOSTCODE_REGEX = re.compile(\n\t    r'^([G][I][R] 0[A]{2}|'\n\t    r'((([A-Z][0-9]{1,2})|'\n\t    r'([A-Z][A-HJ-Y][0-9]{1,2})|'\n\t    r'([A-Z][0-9][A-Z])|'\n\t    r'([A-Z][A-HJ-Y][0-9][A-Z]?)))\\s?[0-9][A-Z]{2})$'\n\t)\n\tpostcode = Party_Address_Postcode\n\tif postcode:\n\t    try:\n\t      postcode = str(postcode).strip()\n\t    except:\n\t      return None\n\t    if contains_only_quotes(postcode):\n\t      print('inside')\n\t      return None\n\t    postcode = postcode.strip().upper()\n\t    if not POSTCODE_REGEX.match(postcode):\n\t        return \"Invalid postcode format. Please check and enter a valid UK postcode.\"\n\t    return None\n\telse:\n\t    print(\"empty\")\n\t    return None\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "fn_name": "validate_party_address_postcode", "args": [{"name": "Party_Address_Postcode", "data_type": "FIELD", "value": "Party Address Postcode"}], "lambda_udf_id": null}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 115, "y": 115}}], "edges": [{"edge_id": "a77292fd-1a47-484b-b047-ad4be8523223", "source": "521a89e9-52d6-4c61-9b52-244a1d44892f", "target": null, "result": "pass"}, {"edge_id": "a101d4f2-5ba7-450a-b759-f69c6e323a12", "source": "521a89e9-52d6-4c61-9b52-244a1d44892f", "target": null, "result": "fail"}]}, {"rule_id": "381e8307-fb35-4e23-ab07-945c466064fe", "rule_name": "intra_Insured", "conditions": [{"condition_id": "ce15381d-6c58-4915-ad32-69156d38eeb6", "type": "code", "affected_fields": ["Insured"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Insured"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Vehicle Schedule", "field": "Insured"}, "\"Insured\"", "\"Vehicle Schedule\""], "input_fields": ["Insured", "\"Insured\"", "\"Vehicle Schedule\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "1112c974-d5e6-4fd4-8660-975876dfce78", "source": "ce15381d-6c58-4915-ad32-69156d38eeb6", "target": null, "result": "pass"}, {"edge_id": "ed4241a6-1e28-4c00-ab06-5851bd4c1a1b", "source": "ce15381d-6c58-4915-ad32-69156d38eeb6", "target": null, "result": "fail"}]}, {"rule_id": "117e5251-3974-4a55-9124-9974f6f411b2", "rule_name": "intra_Party_Address", "conditions": [{"condition_id": "71d1e2b7-fb79-49b4-abe9-ed3543bedafe", "type": "code", "affected_fields": ["Party_Address"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Party_Address"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Vehicle Schedule", "field": "Party_Address"}, "\"Party_Address\"", "\"Vehicle Schedule\""], "input_fields": ["Party_Address", "\"Party_Address\"", "\"Vehicle Schedule\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "9c3eaa0c-853d-495c-9dbc-8533775f1e6d", "source": "71d1e2b7-fb79-49b4-abe9-ed3543bedafe", "target": null, "result": "pass"}, {"edge_id": "e624f469-bf8e-44bf-aaa3-d1a3aa2dbb7d", "source": "71d1e2b7-fb79-49b4-abe9-ed3543bedafe", "target": null, "result": "fail"}]}, {"rule_id": "6c53267f-2914-4d84-ac14-09a7887a6146", "rule_name": "intra_Offering_Type", "conditions": [{"condition_id": "2959f7ad-f6c9-4a66-92d8-36a928a0d6ad", "type": "code", "affected_fields": ["Offering_Type"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Offering_Type"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Vehicle Schedule", "field": "Offering_Type"}, "\"Offering_Type\"", "\"Vehicle Schedule\""], "input_fields": ["Offering_Type", "\"Offering_Type\"", "\"Vehicle Schedule\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 101}}], "edges": [{"edge_id": "ade0488a-5661-405a-9c25-3b9bf1157adf", "source": "2959f7ad-f6c9-4a66-92d8-36a928a0d6ad", "target": null, "result": "pass"}, {"edge_id": "8f28a1b7-778f-47b1-9e69-c523458eea01", "source": "2959f7ad-f6c9-4a66-92d8-36a928a0d6ad", "target": null, "result": "fail"}]}, {"rule_id": "f47a44fc-7f3f-4955-bc10-8a8a0dd655d0", "rule_name": "intra_Main_Cover_Type", "conditions": [{"condition_id": "02fbb67e-0f6d-44a1-8de0-ab7a3634a0e3", "type": "code", "affected_fields": ["Main_Cover_Type"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Main_Cover_Type"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Vehicle Schedule", "field": "Main_Cover_Type"}, "\"Main_Cover_Type\"", "\"Vehicle Schedule\""], "input_fields": ["Main_Cover_Type", "\"Main_Cover_Type\"", "\"Vehicle Schedule\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "9b38968b-94db-4390-9142-66147d8520db", "source": "02fbb67e-0f6d-44a1-8de0-ab7a3634a0e3", "target": null, "result": "pass"}, {"edge_id": "dc537160-6f02-487f-b40a-951a1e1edb3a", "source": "02fbb67e-0f6d-44a1-8de0-ab7a3634a0e3", "target": null, "result": "fail"}]}, {"rule_id": "c668c6d8-115e-40d6-a3a0-325fa2b66713", "rule_name": "intra_Main_Cover_Type_Mapped", "conditions": [{"condition_id": "0b0238c7-216a-47f8-91ed-5f66c6307551", "type": "code", "affected_fields": ["Main_Cover_Type_Mapped"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Main_Cover_Type_Mapped"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Vehicle Schedule", "field": "Main_Cover_Type_Mapped"}, "\"Main_Cover_Type_Mapped\"", "\"Vehicle Schedule\""], "input_fields": ["Main_Cover_Type_Mapped", "\"Main_Cover_Type_Mapped\"", "\"Vehicle Schedule\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "fb804462-dc13-4e7f-a2b7-cafc2b3d9710", "source": "0b0238c7-216a-47f8-91ed-5f66c6307551", "target": null, "result": "pass"}, {"edge_id": "8be6145c-39b4-4c33-9f9f-1be9d79b0cbc", "source": "0b0238c7-216a-47f8-91ed-5f66c6307551", "target": null, "result": "fail"}]}, {"rule_id": "7029927b-33d7-47ca-9581-b6263911aea3", "rule_name": "intra_Vehicle_Schedule_Table", "conditions": [{"condition_id": "8ca78f43-f7ee-4821-b599-c1eb11331642", "type": "code", "affected_fields": ["Vehicle_Schedule_Table"], "class_affected_fields": [{"class": "Vehicle Schedule", "field": "Vehicle_Schedule_Table"}], "params": {"fn_name": "intra_table_class_validation", "class_input_fields": [{"class": "Vehicle Schedule", "field": "Vehicle_Schedule_Table"}, "\"Vehicle_Schedule_Table\"", "\"Vehicle Schedule\""], "input_fields": ["Vehicle_Schedule_Table", "\"Vehicle_Schedule_Table\"", "\"Vehicle Schedule\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 99, "y": 100}}], "edges": [{"edge_id": "8a3bc8e3-2326-4aad-a95c-2e7ac37b7b1b", "source": "8ca78f43-f7ee-4821-b599-c1eb11331642", "target": null, "result": "pass"}, {"edge_id": "7cf3658d-7558-441b-9d8f-67173b1381e9", "source": "8ca78f43-f7ee-4821-b599-c1eb11331642", "target": null, "result": "fail"}]}, {"rule_id": "4f8c0812-4afe-4012-aa50-72d983efbaa4", "rule_name": "intra_Excess_Type_Accident_Damage_CCE", "conditions": [{"condition_id": "4fb6c236-e18e-4b77-b4f9-b7d857028ef1", "type": "code", "affected_fields": ["Excess_Type_Accident_Damage_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Accident_Damage_CCE"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Accident_Damage_CCE"}, "\"Excess_Type_Accident_Damage_CCE\"", "\"Confirmed Claims Experience\""], "input_fields": ["Excess_Type_Accident_Damage_CCE", "\"Excess_Type_Accident_Damage_CCE\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "875ab645-435f-40d4-81a8-81bbe5a475d8", "source": "4fb6c236-e18e-4b77-b4f9-b7d857028ef1", "target": null, "result": "pass"}, {"edge_id": "1951acb9-ce3b-47ad-ab84-d265c2f36636", "source": "4fb6c236-e18e-4b77-b4f9-b7d857028ef1", "target": null, "result": "fail"}]}, {"rule_id": "051bdfe5-b039-44b5-a107-3338d4525981", "rule_name": "intra_Excess_Type_Fire_CCE", "conditions": [{"condition_id": "5027c26d-6961-47b0-b0ad-4a3aba759821", "type": "code", "affected_fields": ["Excess_Type_Fire_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Fire_CCE"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Fire_CCE"}, "\"Excess_Type_Fire_CCE\"", "\"Confirmed Claims Experience\""], "input_fields": ["Excess_Type_Fire_CCE", "\"Excess_Type_Fire_CCE\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "eefc4fe0-5f2a-4a5f-a09b-306e7092342d", "source": "5027c26d-6961-47b0-b0ad-4a3aba759821", "target": null, "result": "pass"}, {"edge_id": "d1e2d958-b01d-42e4-81ad-2fd1aaebd029", "source": "5027c26d-6961-47b0-b0ad-4a3aba759821", "target": null, "result": "fail"}]}, {"rule_id": "dbc08555-68c7-4750-bace-43f64ca63317", "rule_name": "intra_Excess_Type_Theft_CCE", "conditions": [{"condition_id": "6bec2809-1571-4bb8-9947-484797bceca8", "type": "code", "affected_fields": ["Excess_Type_Theft_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Theft_CCE"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_Theft_CCE"}, "\"Excess_Type_Theft_CCE\"", "\"Confirmed Claims Experience\""], "input_fields": ["Excess_Type_Theft_CCE", "\"Excess_Type_Theft_CCE\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "57791d25-a8ab-4ae3-8b79-f8d5bdab1df9", "source": "6bec2809-1571-4bb8-9947-484797bceca8", "target": null, "result": "pass"}, {"edge_id": "91bcf72b-72f2-472b-9c07-453dbda56e20", "source": "6bec2809-1571-4bb8-9947-484797bceca8", "target": null, "result": "fail"}]}, {"rule_id": "7469e337-d670-4c1b-b731-5cfa2331fb0b", "rule_name": "intra_Excess_Type_WS_CCE", "conditions": [{"condition_id": "ed814fd6-5abc-4d8d-8292-4f64b646150a", "type": "code", "affected_fields": ["Excess_Type_WS_CCE"], "class_affected_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_WS_CCE"}], "params": {"fn_name": "intra_class_validation", "class_input_fields": [{"class": "Confirmed Claims Experience", "field": "Excess_Type_WS_CCE"}, "\"Excess_Type_WS_CCE\"", "\"Confirmed Claims Experience\""], "input_fields": ["Excess_Type_WS_CCE", "\"Excess_Type_WS_CCE\"", "\"Confirmed Claims Experience\""]}, "msg": {"standard": null, "custom": {"msg": null, "enabled": false}}, "alert_level": "failure", "position": {"x": 100, "y": 100}}], "edges": [{"edge_id": "fdd7d222-9ff0-4674-a19d-0ff1dd6fb02b", "source": "ed814fd6-5abc-4d8d-8292-4f64b646150a", "target": null, "result": "pass"}, {"edge_id": "0d469866-b446-4585-bfd6-76b4a360dacc", "source": "ed814fd6-5abc-4d8d-8292-4f64b646150a", "target": null, "result": "fail"}]}]}