{"dev_input": {"input_path": "axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/documents/out/map_records"}, "options": {"provenance_tracking": true, "auto_provenance": false}, "fields": [{"label": "__model_result", "lines": [{"function_id": {"name": "get_raw_extracted_fields", "source": "NATIVE"}, "inputs": [{"arg_name": "INPUT_COL", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "KEYWORD", "data_type_options": ["TEXT"], "value": "INPUT_COL"}, {"arg_name": "fields_to_extract", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "[{\"name\": \"Insured\", \"prompt\": \"You are an expert in processing commercial fleet insurance documents.\\n\\nYou are working with a document classified as a \\\"Vehicle Schedule\\\" - this is typically a structured list of vehicles insured under a policy. The document may appear as a spreadsheet, a table within a PDF, or part of a broker submission, and usually includes fields such as registration number, vehicle make/model, type of cover, and other vehicle-specific information.\\n\\nYour task is to extract the **Insured Name** - the legal name of the company or individual under whose name the vehicle fleet is insured.\\n\\nThe Insured Name is often found:\\n- At the top of the document as a header\\n- Near or alongside policy details like \\\"Policyholder\\\", \\\"Insured\\\", or \\\"Client Name\\\"\\n- In the document title or footers (e.g., \\\"Fleet List for XYZ Logistics Ltd.\\\")\\n- In company letterheads or metadata, especially in MID or policy-linked schedules\\n\\nIf no insured name or relevant phrase is found, return \\\"\\\"\\n\\nIgnore names that appear only in the context of individual drivers, vehicle owners, or claimants - focus on the entity responsible for the policy.\\n\\nReturn only the Insured Name, even if multiple names or addresses are present.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"You are an expert in processing commercial fleet insurance documents.\\n\\nYou are working with a document classified as a \\\"Vehicle Schedule\\\" - this is typically a structured list of vehicles insured under a policy. The document may appear as a spreadsheet, a table within a PDF, or part of a broker submission, and usually includes fields such as registration number, vehicle make/model, type of cover, and other vehicle-specific information.\\n\\nYour task is to extract the **Insured Name** - the legal name of the company or individual under whose name the vehicle fleet is insured.\\n\\nThe Insured Name is often found:\\n- At the top of the document as a header\\n- Near or alongside policy details like \\\"Policyholder\\\", \\\"Insured\\\", or \\\"Client Name\\\"\\n- In the document title or footers (e.g., \\\"Fleet List for XYZ Logistics Ltd.\\\")\\n- In company letterheads or metadata, especially in MID or policy-linked schedules\\n\\nIf no insured name or relevant phrase is found, return **\\\"N/A\\\"**.\\n\\nIgnore names that appear only in the context of individual drivers, vehicle owners, or claimants - focus on the entity responsible for the policy.\\n\\nReturn only the Insured Name, even if multiple names or addresses are present.\", \"model_type\": \"DEFAULT\", \"position\": 0, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address\", \"prompt\": \"You are an expert in processing commercial fleet insurance submissions.\\n\\nYou are working with a document classified as a \\\"Vehicle Schedule\\\". While the main content focuses on listing insured vehicles, these documents often contain metadata such as the name and address of the insured party.\\n\\nYour task is to extract the **Party Address** - the full address of the insured entity (also referred to as the policyholder or client).\\n\\nThe address may appear:\\n- Near the top of the document, under labels such as \\\"Address\\\", \\\"Client Address\\\", \\\"Insured Address\\\", or as part of a header block\\n- Below or next to the Insured Name\\n- In a section containing policy or administrative details\\n- In a footer or cover page, if the schedule is part of a larger submission\\n\\nThe address typically includes:\\n- Street name and number\\n- City or locality\\n- Postcode (or ZIP code)\\n- Country (optional)\\n\\nReturn the complete address exactly as it is displayed in the document, without omitting, reformatting, or adding any explanation.\\n\\nIf no address can be reliably located, return \\\"\\\"\\n\\nDo not extract email addresses, website URLs, or claim-related contact information. Return only the physical or postal address associated with the insured party.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"You are an expert in processing commercial fleet insurance submissions.\\n\\nYou are working with a document classified as a \\\"Vehicle Schedule\\\". While the main content focuses on listing insured vehicles, these documents often contain metadata such as the name and address of the insured party.\\n\\nYour task is to extract the **Party Address** - the full address of the insured entity (also referred to as the policyholder or client).\\n\\nThe address may appear:\\n- Near the top of the document, under labels such as \\\"Address\\\", \\\"Client Address\\\", \\\"Insured Address\\\", or as part of a header block\\n- Below or next to the Insured Name\\n- In a section containing policy or administrative details\\n- In a footer or cover page, if the schedule is part of a larger submission\\n\\nThe address typically includes:\\n- Street name and number\\n- City or locality\\n- Postcode (or ZIP code)\\n- Country (optional)\\n\\nIf no address can be reliably located, return the value: **\\\"N/A\\\"**.\\n\\nDo not extract email addresses, website URLs, or claim-related contact information. Return only the physical or postal address associated with the insured party.\", \"model_type\": \"DEFAULT\", \"position\": 1, \"result_data_type\": \"TEXT\"}, {\"name\": \"Main_Cover_Type\", \"prompt\": \"You are an expert in processing commercial fleet insurance documents.\\n\\nYou are working with a document classified as a \\\"Vehicle Schedule\\\", which contains a list of insured vehicles and their details.\\n\\nYour task is to extract the **Cover Type** based on the most frequently occurring value in the relevant column.\\n\\nCover Type will be found in a column labelled something like:\\n- \\\"Cover\\\"\\n- \\\"Type of Cover\\\"\\n- \\\"Coverage\\\"\\n\\nFrom this column, identify the most commonly listed cover type and return only that value. If not mentioned, return \\\"\\\"\\n\\nOnly the following values are acceptable:\\n- Comprehensive (Comp)  \\n- Third party Only (TPO)\\n- TPFT (Third Party Fire and Theft)\\n- LUFT (Laid Up - Fire and Theft)\\n- LU ADFT (Laid Up - Accidental damage, fire and theft)\\n\\nNormalise variations as needed (e.g., \\\"Third Party\\\" \\u2192 \\\"Third party\\\").\\n\\nDo not return multiple values. Return only the single most frequent valid cover type from the list above.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"You are an expert in processing commercial fleet insurance documents.\\n\\nYou are working with a document classified as a \\\"Vehicle Schedule\\\", which contains a list of insured vehicles and their details.\\n\\nYour task is to extract the **Cover Type** based on the most frequently occurring value in the relevant column.\\n\\nCover Type will be found in a column labelled something like:\\n- \\\"Cover\\\"\\n- \\\"Type of Cover\\\"\\n- \\\"Coverage\\\"\\n\\nFrom this column, identify the most commonly listed cover type and return only that value. If not mentioned, return N/A\\n\\nOnly the following values are acceptable:\\n- Comprehensive  \\n- Third party  \\n- TPO  \\n- TPFT  \\n\\nNormalise variations as needed (e.g., \\\"Third Party\\\" \\u2192 \\\"Third party\\\").\\n\\nDo not return multiple values. Return only the single most frequent valid cover type from the list above.\", \"model_type\": \"DEFAULT\", \"position\": 2, \"result_data_type\": \"TEXT\"}, {\"name\": \"Risk_Postcode\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 3, \"result_data_type\": \"TEXT\"}, {\"name\": \"Vehicle_Schedule_Data\", \"prompt\": \"Scan and Extract a structured table with the following two columns:\\n\\t\\u2022\\tCover Vehicle \\u2013 Extract the cover type (e.g., \\\"TPO\\\", \\\"COMP\\\", \\\"Comprehensive\\\") only if found under relevant headers like Cover, Cover Type, etc. Remove unnecessary brackets if any from Cover Vehicle.\\n\\t\\u25e6\\tIf a cover type is mentioned at the top or bottom (e.g., under \\\"Cover\\\" or \\\"Cover Type\\\") and applies to all vehicles, use that value for all vehicles unless overridden in the rows.\\n\\t\\u2022\\tVehicle Registration \\u2013 Extract the registration number (e.g., \\\"AB12 XYZ\\\",\\\"C120674\\\") only if found under headers like **Serial No/ID Etc**, Chassis Number, Vehicle Reg, etc. (Registration numbers are always alphanumeric).\\n\\t\\u25e6\\tInclude Serial No and Chassis Number values as Vehicle Registration if found, even if no Cover Vehicle is available. In such cases, keep Cover Vehicle as an empty string \\\"\\\".\\nImportant Rules:\\n\\t1\\tStrictly do not extract irrelevant data like product names or unrelated fields.\\n\\t2\\tKeep duplicate Vehicle Registration numbers as well.\\n\\t3\\tDo not change the order of Vehicle Registrations\\u2014maintain the same order as in the document.\\n\\t4\\tIdentify relevant columns before extracting\\u2014do not infer or guess values.\\n\\t5\\tIf a relevant column or data is missing for a vehicle, set that field as \\\"\\\".\\n\\t6\\tIgnore all unrelated attributes or values.\\n\\t7\\tDrop rows from extraction if they do not contain a valid registration number.\\nReturn Format:\\nReturn the final answer only as a list of lists in the following structure, without any additional explanation or text:\\n\\n[[\\\"Cover Vehicle\\\", \\\"Vehicle Registration\\\"], [\\\"Comp\\\", \\\"KV79XOC\\\"], [\\\"Comp\\\", \\\"VV59XPF\\\"], [\\\"\\\", \\\"SN123456\\\"], [\\\"\\\", \\\"CH987654\\\"]]\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"You are working with a Vehicle Schedule document from a commercial fleet insurance submission. Extract a structured table with the following two columns:\\n\\nCover Vehicle \\u2013 Extract cover type (e.g., \\\"TPO\\\", \\\"COMP\\\", \\\"Comprehensive\\\") only if found under relevant headers like Cover, Cover Type, etc.\\n\\nVehicle Registration \\u2013 Extract registration number (e.g., \\\"AB12 XYZ\\\") only if found under headers like Vehicle Reg, Registration, Reg, Registration Number, Vehicle Registration Number, etc.\\n\\nIdentify relevant columns before extracting\\u2014do not infer or guess values. If a relevant column or data is missing for a vehicle, set that field as \\\"N/A\\\". Ignore all unrelated attributes.\\n\\nReturn the output only as a list of lists in tabular format as shown below. If no valid data is found, return \\\"N/A\\\" only.\\n\\nOutput Format:\\n[[\\\"Cover Vehicle\\\", \\\"Vehicle Registration\\\"], [],]\", \"model_type\": \"ADVANCED\", \"position\": 6, \"result_data_type\": \"TEXT\"}, {\"name\": \"Business_Category\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 4, \"result_data_type\": \"TEXT\"}, {\"name\": \"Transaction_Type\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"ADVANCED\", \"position\": 5, \"result_data_type\": \"TEXT\"}, {\"name\": \"Unique__Values__Cover__Basis\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 7, \"result_data_type\": \"TEXT\"}, {\"name\": \"Vehicle_Schedule_Table\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 9, \"result_data_type\": \"TEXT\"}, {\"name\": \"Number_of_Notifiable_Vehicles\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 10, \"result_data_type\": \"TEXT\"}, {\"name\": \"Offering_Type_VST\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 11, \"result_data_type\": \"TEXT\"}, {\"name\": \"Cover_Basis_Mapping\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 8, \"result_data_type\": \"TEXT\"}, {\"name\": \"Main_Cover_Type_Mapped\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 12, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_2\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 15, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_3\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 16, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Country\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 17, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_State\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 18, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_City\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 19, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Postcode\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 20, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_1\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 14, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Details\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 13, \"result_data_type\": \"TEXT\"}]"}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}]}]}, {"label": "Insured", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Insured\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Party_Address\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Clean and return **only the address details**. This means:\\n- Preserve the physical address lines.\\n- Format it as a single clean string separated by commas.\\n- If no valid address is present, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Party_Address@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Main_Cover_Type", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Main_Cover_Type\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/8d05c1d1-7188-4a00-b2c7-3a47844c309b.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17170\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_cover_type(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\tdef contains_only_quotes(s):\\n\\t  return all(c in {'\\\"', \\\"'\\\"} for c in s)\\n\\t\\n\\tprevious_line = previous_line.strip()\\n\\tif previous_line:\\n\\t  if contains_only_quotes(previous_line):\\n\\t    print('1')\\n\\t    return 'Comp'\\n\\t  else :\\n\\t    print('2')\\n\\t    return previous_line\\n\\tprint('3')\\n\\treturn 'Comp'\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_cover_type\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Risk_Postcode", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"insured_address: {{ \\\\ Party Address \\\\ }}\\n\\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\\n\\nIf no post code is found, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Party_Address\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Party_Address\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Business_Category", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/d980b7ef-be62-46e6-a3b6-cd9939876034.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17172\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_business_category(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"Mid Market\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_business_category\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Transaction_Type", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/8745e917-12da-4063-9e22-532f1892e38b.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17173\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_transaction_type(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"New Business\\\"\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_transaction_type\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Vehicle_Schedule_Data", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Vehicle_Schedule_Data\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/a76e2ad7-7053-442f-978c-239662cb410a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Vehicle_Schedule_Data@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17171\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef refine_result(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# import json, re\\n\\t# import pandas as pd\\n\\t\\n\\t# def convert_to_dataframe(data):\\n\\t#     if isinstance(data, list):\\n\\t#         if all(isinstance(item, dict) for item in data):\\n\\t#             # List of dictionaries\\n\\t#             return pd.DataFrame(data)\\n\\t#         elif all(isinstance(item, list) for item in data):\\n\\t#             # List of lists\\n\\t#             return pd.DataFrame(data[1:] , columns= data[0])\\n\\t#         else:\\n\\t#             raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t#     else:\\n\\t#         raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t# columns = ['Cover Vehicle', 'Vehicle Registration']\\n\\t\\n\\t# try:\\n\\t#     # print(previous_line)\\n\\t#     if previous_line in ['', None, 'N/A', '[]', [], 'N/A']:\\n\\t#         return [columns]\\n\\t\\n\\t#     df = pd.DataFrame(columns=columns)\\n\\t\\n\\t\\n\\t#     # ```text[]``` or ```json[]```\\n\\t#     matches = re.findall(r'\\\\w+\\\\[([^\\\\]]*)\\\\]', previous_line)\\n\\t#     result = [ [item.strip() for item in match.split(',')] for match in matches ]\\n\\t#     if result:\\n\\t#       df = convert_to_dataframe(result)\\n\\t    \\n\\t    \\n\\t#     if df.empty:\\n\\t#         # | Cover Vehicle | Vehicle Registration | \\\\n |:----------------|:-----------------------| \\\\n | FMV | RO11AYY |\\n\\t#         rows = [line.strip() for line in previous_line.splitlines() if previous_line.strip().startswith('|')]\\n\\t#         list_of_lists = [\\n\\t#             [cell.strip() for cell in row.split('|')[1:-1]]\\n\\t#             for row in rows\\n\\t#         ]\\n\\t#         if list_of_lists:\\n\\t#           # Remove row that contains only dashes and colons (alignment row)\\n\\t#             cleaned = [\\n\\t#                 row for row in list_of_lists\\n\\t#                 if not all(cell.strip().startswith(':') or set(cell.strip()) <= {'-', ':'} for cell in row)\\n\\t#             ]\\n\\t#             # print(cleaned)\\n\\t#             if cleaned:\\n\\t#                 df = convert_to_dataframe(cleaned)\\n\\t#                 # print(df)\\n\\t\\n\\t\\n\\t#     if df.empty:\\n\\t#       try:\\n\\t#         previous_line = json.loads(previous_line)\\n\\t#         df = convert_to_dataframe(previous_line)\\n\\t#       except: \\n\\t#         previous_line = eval(previous_line)\\n\\t#         df = convert_to_dataframe(previous_line)\\n\\t\\n\\t    \\n\\t#     df = df.replace(\\\"N/A\\\", \\\"\\\")\\n\\t#     df.fillna(\\\"\\\", inplace=True)\\n\\t#     df = df[~df.apply(lambda row: row.isna().all() or (row == '').all(), axis=1)]\\n\\t    \\n\\t#     return [df.columns.tolist()] + df.values.tolist()\\n\\t\\n\\t# except Exception as e:\\n\\t#     return [['Cover Vehicle', 'Vehicle Registration']]\\n\\t\\n\\timport pandas as pd\\n\\timport json, re, ast\\n\\timport traceback\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\tcolumns_order = [\\\"Cover Vehicle\\\", \\\"Vehicle Registration\\\"]\\n\\t\\n\\t\\n\\tdef get_df_with_regex_match(previous_line, columns_order):\\n\\t    parsed, inner_content = None, None\\n\\t    df = pd.DataFrame(columns=columns_order)\\n\\t    print(\\\"hii\\\")\\n\\t    try:\\n\\t        match = re.search(r\\\"```(?:\\\\w+)?\\\\s*([\\\\s\\\\S]*?)\\\\s*```\\\", previous_line)\\n\\t        print(\\\"match\\\",match)\\n\\t        if match:\\n\\t            inner_content = match.group(1).strip()\\n\\t    \\n\\t            # Step 2: Try to parse it as JSON\\n\\t            try:\\n\\t                parsed = json.loads(inner_content)\\n\\t                print(parsed)\\n\\t            except json.JSONDecodeError:\\n\\t                # If JSON parsing fails, fallback to literal_eval\\n\\t                try:\\n\\t                    parsed = ast.literal_eval(inner_content)\\n\\t                except Exception as e:\\n\\t                    print(\\\"Parsing failed:\\\", e)\\n\\t                    parsed = None\\n\\t          \\n\\t        if parsed:\\n\\t\\n\\t            df = convert_to_dataframe(parsed)\\n\\t            return True, df \\n\\t        else:\\n\\t            return False, df \\n\\t    except Exception as e:\\n\\t      return False, pd.DataFrame(columns=columns_order)\\n\\t\\n\\tdef parse_markdown_format(previous_line, columns_order):\\n\\t    try:\\n\\t        lines = [line.strip() for line in previous_line.strip().split('\\\\n') if line.strip().startswith('|') and '---' not in line]\\n\\t        list_of_lists = [ [cell.strip() for cell in line.strip('|').split('|')] for line in lines ]\\n\\t        if list_of_lists:\\n\\t            df = convert_to_dataframe(list_of_lists)\\n\\t            return True, df\\n\\t        else:\\n\\t            return False, pd.DataFrame(columns=columns_order)\\n\\t    except:\\n\\t        return False, pd.DataFrame(columns=columns_order)\\n\\t\\n\\ttry:\\n\\t    \\n\\t    df = pd.DataFrame(columns=columns_order)\\n\\t    print(df)\\n\\t    flg, df = get_df_with_regex_match(previous_line, columns_order)\\n\\t    \\n\\t    if not flg:\\n\\t        flg, df = parse_markdown_format(previous_line, columns_order)\\n\\t\\n\\t    if not flg:\\n\\t      try:\\n\\t          data = json.loads(previous_line)\\n\\t          df = convert_to_dataframe(data)\\n\\t      except Exception as e:\\n\\t          data = ast.literal_eval(previous_line)\\n\\t          df = convert_to_dataframe(data)\\n\\t      print(df)\\n\\t    \\n\\t    \\n\\t    df.fillna(\\\"\\\", inplace=True)\\n\\t    \\n\\t    if len(df.columns.tolist()) > 0:\\n\\t        df = df[columns_order]\\n\\t        df = [df.columns.tolist()] + df.values.tolist()\\n\\t        return df\\n\\t    else:\\n\\t        return [columns_order]\\n\\t      \\n\\texcept Exception as e:\\n\\t    return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"refine_result\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Vehicle_Schedule_Data@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Unique__Values__Cover__Basis", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/39292694-6ef1-4eea-b3ed-b0e6cd2ebeb7.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Vehicle_Schedule_Data\",\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Data\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17174\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_unique_cover_values(Vehicle_Schedule_Data, context = {}, keys = {}, **kwargs):\\n\\t# # Import Python packages\\n\\timport json\\n\\timport pandas as pd\\n\\t# list_of_dct = json.loads(Vehicle_Schedule_Data)\\n\\t# # print(list_of_dct)\\n\\t\\n\\t# try:\\n\\t#     unique_cover_basis_set = set(item['Cover Vehicle'] for item in list_of_dct)\\n\\t#     unique_cover_basis_list = list(unique_cover_basis_set)\\n\\t#     unique_cover_basis_list_without_na = [item for item in unique_cover_basis_list if item != 'N/A']\\n\\t#     return unique_cover_basis_list_without_na\\n\\t\\n\\t# except Exception as e:\\n\\t#     # print(\\\"in ex\\\", e)\\n\\t#     # print(type(list_of_dct))\\n\\t#     unique_first_col = list(set(row[0] for row in list_of_dct))\\n\\t#     if 'Cover Vehicle' in unique_first_col:\\n\\t#         unique_first_col.remove('Cover Vehicle')\\n\\t\\n\\t#     return unique_first_col\\n\\t    \\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t\\n\\tVehicle_Schedule_Data = json.loads(Vehicle_Schedule_Data)\\n\\tprint(type(Vehicle_Schedule_Data))\\n\\t\\n\\tif Vehicle_Schedule_Data in ['',None,'N/A', '[]', []]:\\n\\t  return \\\"None\\\"\\n\\t\\n\\tVehicle_Schedule_Data = convert_to_dataframe(Vehicle_Schedule_Data)\\n\\tunique_vals = Vehicle_Schedule_Data['Cover Vehicle'].unique().tolist()\\n\\tunique_vals = [each_val for each_val in unique_vals if each_val not in ['N/A', \\\"\\\", None, \\\"null\\\"]]\\n\\tif unique_vals:\\n\\t    return unique_vals\\n\\telse:\\n\\t    return \\\"None\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_unique_cover_values\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Data\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Cover_Basis_Mapping", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"For each value in the list {{\\\\ Unique_Values_Cover_Basis \\\\}}, generate a dictionary mapping where each value is normalised to one of the standard cover basis categories. You may receive values in full form (e.g., \\\"Third Party, Fire and Theft\\\"), as acronyms (e.g., \\\"TPFT\\\", \\\"TPO\\\", \\\"Comp\\\"), or as variations of known phrases (e.g., \\\"Comprehensive Cover\\\", \\\"Laid Up - Fire &amp; Theft\\\"). Use the following mapping rules: \\\"Third Party, Fire and Theft\\\" or similar \\u2192 TPFT, \\\"Comprehensive\\\" or similar \\u2192 Comp, \\\"Third Party Only\\\" or similar \\u2192 TPO, \\\"Laid Up (Accidental Damage, Fire, and Theft)\\\" or similar \\u2192 Laid Up (ADFT), \\\"Laid Up (Fire and Theft)\\\" , LUFT or similar \\u2192 Laid up (FT Only). Direct acronyms like TPO, TPFT, Comp should map to themselves exclude LUFT, Since LUFT -&gt; Laid up (FT Only). If a value is irrelevant or does not match any known category, map it to an empty string \\\"\\\" Return the output as a dictionary like this: {\\u201coriginal value\\u201d: mapped category, }\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Unique__Values__Cover__Basis\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Unique__Values__Cover__Basis\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Vehicle_Schedule_Table", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/2cfe597b-1daa-4453-9755-d2cba1b2aadb.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Vehicle_Schedule_Data\",\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Data\"},{\"name\":\"Unique__Values__Cover__Basis\",\"data_type\":\"FIELD\",\"value\":\"Unique__Values__Cover__Basis\"},{\"name\":\"Cover_Basis_Mapping\",\"data_type\":\"FIELD\",\"value\":\"Cover_Basis_Mapping\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17175\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef form_vehicle_schedule_table(Vehicle_Schedule_Data, Unique__Values__Cover__Basis, Cover_Basis_Mapping, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t\\n\\t# columns_order = [ 'Vehicle Registration', \\\\\\n\\t#                 'Cover - Vehicle', \\\\\\n\\t#                 'Cover - Vehicle - Mapped']\\n\\t\\n\\tcolumns_order = ['Effective From', \\\\\\n\\t                  'Effective To', \\\\\\n\\t                'Vehicle Registration', \\\\\\n\\t                'Cover - Vehicle', \\\\\\n\\t                'Cover - Vehicle - Mapped']\\n\\t\\n\\t\\n\\tif Vehicle_Schedule_Data == \\\"[]\\\":\\n\\t    return [columns_order]\\n\\ttry:\\n\\t    vehicle_num_and_cover_type_table = json.loads(Vehicle_Schedule_Data)\\n\\t    vehicle_num_and_cover_type_table_df = convert_to_dataframe(vehicle_num_and_cover_type_table)\\n\\t\\n\\t    vehicle_num_and_cover_type_table_df.rename(columns={\\n\\t        'Cover Vehicle' : 'Cover - Vehicle',\\n\\t        'Vehicle Registration Number' : 'Vehicle Registration' \\n\\t      }, inplace=True)\\n\\t\\n\\t    try:\\n\\t        Unique__Values__Cover__Basis = json.loads(Unique__Values__Cover__Basis)\\n\\t    except:\\n\\t        Unique__Values__Cover__Basis = eval(Unique__Values__Cover__Basis)\\n\\t\\n\\t\\n\\t    if Unique__Values__Cover__Basis:\\n\\t        try:\\n\\t            Cover_Basis_Mapping_dct = json.loads(Cover_Basis_Mapping)\\n\\t            vehicle_num_and_cover_type_table_df['Cover - Vehicle - Mapped'] = vehicle_num_and_cover_type_table_df['Cover - Vehicle'].replace(Cover_Basis_Mapping_dct)\\n\\t        except:\\n\\t            vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df.copy()\\n\\t\\n\\t    invalid_values = [\\\"\\\", \\\"n/a\\\", \\\"null\\\", \\\"none\\\", \\\"nan\\\"]\\n\\t    vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df[~vehicle_num_and_cover_type_table_df[\\\"Vehicle Registration\\\"].astype(str).str.strip().str.lower().isin([str(i).lower() for i in invalid_values])]\\n\\t   \\n\\t\\n\\t    vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df.replace('N/A', '')\\n\\t    vehicle_num_and_cover_type_table_df.fillna('', inplace=True)\\n\\t\\n\\t    for col in columns_order:\\n\\t      if col not in vehicle_num_and_cover_type_table_df.columns:\\n\\t        vehicle_num_and_cover_type_table_df[col] = ''\\n\\t\\n\\t    if len(vehicle_num_and_cover_type_table_df.columns.tolist()) > 0:\\n\\t        vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df[columns_order]\\n\\t        vehicle_num_and_cover_type_table_df = [vehicle_num_and_cover_type_table_df.columns.tolist()] + vehicle_num_and_cover_type_table_df.values.tolist()\\n\\t        return vehicle_num_and_cover_type_table_df\\n\\t    else:\\n\\t        return [columns_order]\\n\\texcept:\\n\\t    try:\\n\\t        vehicle_num_and_cover_type_table = json.loads(Vehicle_Schedule_Data)\\n\\t        vehicle_num_and_cover_type_table_df = convert_to_dataframe(vehicle_num_and_cover_type_table)\\n\\t        try:\\n\\t            vehicle_num_and_cover_type_table_df.rename(columns={\\n\\t                'Cover Vehicle' : 'Cover - Vehicle',\\n\\t                'Vehicle Registration Number' : 'Vehicle Registration' \\n\\t              }, inplace=True)\\n\\t\\n\\t        except:\\n\\t            print()\\n\\t\\n\\t        for col in columns_order:\\n\\t          if col not in vehicle_num_and_cover_type_table_df.columns:\\n\\t            vehicle_num_and_cover_type_table_df[col] = ''\\n\\t\\n\\t        invalid_values = [\\\"\\\", \\\"n/a\\\", \\\"N/A\\\", \\\"null\\\", \\\"None\\\", \\\"nan\\\"]\\n\\t\\n\\t        # Filter out rows with invalid vehicle registrations\\n\\t        vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df[~vehicle_num_and_cover_type_table_df[\\\"Vehicle Registration\\\"].astype(str).str.strip().str.lower().isin([str(i).lower() for i in invalid_values])]\\n\\t\\n\\t\\n\\t        vehicle_num_and_cover_type_table_df.fillna('', inplace=True)\\n\\t\\n\\t        if len(vehicle_num_and_cover_type_table_df.columns.tolist()) > 0:\\n\\t            vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df[columns_order]\\n\\t            vehicle_num_and_cover_type_table_df = [vehicle_num_and_cover_type_table_df.columns.tolist()] + vehicle_num_and_cover_type_table_df.values.tolist()\\n\\t            return vehicle_num_and_cover_type_table_df\\n\\t        else:\\n\\t            return [columns_order]\\n\\t    except:\\n\\t        return [columns_order]\\n\\t    return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"form_vehicle_schedule_table\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Data\"},{\"data_type\":\"FIELD\",\"value\":\"Unique__Values__Cover__Basis\"},{\"data_type\":\"FIELD\",\"value\":\"Cover_Basis_Mapping\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Number_of_Notifiable_Vehicles", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/b3ccc549-d4ba-4de9-9880-0156d851be03.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Vehicle_Schedule_Table\",\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Table\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17176\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_number_of_notifiable_vehicles(Vehicle_Schedule_Table, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame( data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\ttry:\\n\\t  if Vehicle_Schedule_Table == \\\"[]\\\" or Vehicle_Schedule_Table == 'n/a':\\n\\t    return \\\"n/a\\\"\\n\\t  else:\\n\\t    Vehicle_Schedule_Table = json.loads(Vehicle_Schedule_Table)\\n\\t    Vehicle_Schedule_Table = convert_to_dataframe(Vehicle_Schedule_Table)\\n\\t    return len(Vehicle_Schedule_Table['Vehicle Registration'])\\n\\texcept:\\n\\t  return \\\"0\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_number_of_notifiable_vehicles\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Table\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Offering_Type_VST", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/8e9350ab-ebb4-41d7-b3c9-67c9aeb5835d.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Number_of_Notifiable_Vehicles\",\"data_type\":\"FIELD\",\"value\":\"Number_of_Notifiable_Vehicles\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17177\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_offering_type(Number_of_Notifiable_Vehicles, context = {}, keys = {}, **kwargs):\\n\\t\\n\\t\\n\\t# def determine_offering_type(vehicle_count, premium_cleaned=None):\\n\\t\\n\\t#     if vehicle_count is None:\\n\\t#         return \\\"\\\"\\n\\t#     if vehicle_count <= 19:\\n\\t#         if premium_cleaned is None or premium_cleaned < 10000:\\n\\t#             return \\\"Mini Fleet\\\"\\n\\t#     elif 20 <= vehicle_count <= 149:\\n\\t#         if premium_cleaned is None or 10000 <= premium_cleaned < 250000:\\n\\t#             # print(\\\"yes\\\")\\n\\t#             return \\\"Vantage Fleet\\\"\\n\\t#     elif vehicle_count >= 150:\\n\\t#         if premium_cleaned is None or premium_cleaned >= 250000:\\n\\t#             return \\\"Mid Corp\\\"\\n\\t\\n\\t#     return \\\"\\\"\\n\\t\\n\\t# try:\\n\\t  \\n\\t#     Number_of_Notifiable_Vehicles = int(Number_of_Notifiable_Vehicles)\\n\\t#     offering_type = determine_offering_type( Number_of_Notifiable_Vehicles )\\n\\t#     print(offering_type)\\n\\t#     return offering_type\\n\\t\\n\\t# except Exception as e:\\n\\t#   print(e)\\n\\t#   return \\\"\\\"\\n\\t\\n\\t \\n\\tdef clean_premium(premium_value):\\n\\t    if premium_value is None:\\n\\t        return None\\n\\t    if isinstance(premium_value, (int, float)):\\n\\t        return float(premium_value)\\n\\t    try:\\n\\t        # Remove currency symbols, commas, and whitespace\\n\\t        # print(premium_value)\\n\\t        # cleaned = re.sub(r\\\"[\\u00a3\\u20ac,]\\\", \\\"\\\", premium_value).strip()\\n\\t        cleaned = premium_value.replace('\\u00a3','').replace('\\u20ac','').replace(' ', '').replace(',', '').strip()\\n\\t        print(cleaned)\\n\\t        return float(cleaned)\\n\\t    except Exception:\\n\\t        return None\\n\\t\\n\\tdef determine_offering_type(vehicle_count, premium_cleaned=None):    \\n\\t\\n\\t    if vehicle_count == 0:\\n\\t        if premium_cleaned is None or premium_cleaned < 10000:\\n\\t            return \\\"Mini Fleet\\\"\\n\\t        \\n\\t        elif 10000 <= premium_cleaned < 250000:\\n\\t            return \\\"Vantage Fleet\\\"\\n\\t        \\n\\t        elif premium_cleaned >= 250000:\\n\\t            return \\\"Mid Corp\\\"\\n\\t\\n\\t    if vehicle_count <= 19:\\n\\t            return \\\"Mini Fleet\\\"\\n\\t            \\n\\t    elif 20 <= vehicle_count <= 149:\\n\\t            return \\\"Vantage Fleet\\\"\\n\\t        \\n\\t    elif vehicle_count >= 150:\\n\\t            return \\\"Mid Corp\\\"\\n\\t\\n\\t\\n\\t\\n\\ttry:\\n\\t    Number_of_Notifiable_Vehicles = int(Number_of_Notifiable_Vehicles)\\n\\texcept:\\n\\t    Number_of_Notifiable_Vehicles = 0\\n\\t\\n\\t\\n\\toffering_type = determine_offering_type( Number_of_Notifiable_Vehicles)\\n\\treturn offering_type\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_offering_type\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Number_of_Notifiable_Vehicles\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Main_Cover_Type_Mapped", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Main_cover_type : {{ \\\\ Main Cover Type \\\\ }}\\n\\nValid Normalized Types:\\n\\n1) COMP \\u2192 includes: \\\"Comp\\\", \\\"COMP\\\", \\\"Comprehensive\\\", \\\"Comprehensive Cover\\\"\\n\\n2) TPFT \\u2192 includes: \\\"TPFT\\\", \\\"Third Party Fire and Theft\\\", \\\"Third Party, Fire and Theft\\\", \\\"Third Party Fire &amp; Theft\\\"\\n\\n3) TPO \\u2192 includes: \\\"TPO\\\", \\\"Third Party Only\\\", \\\"Third Party\\\"\\n\\n4) Laid up (ADFT) \\u2192 includes: \\\"Laid Up (Accidental Damage, Fire, and Theft)\\\", \\\"Laid Up ADFT\\\", \\\"Laid-Up ADFT\\\"\\n\\n5) Laid up (FT Only) \\u2192 includes: \\\"Laid Up (Fire and Theft)\\\", \\\"LUFT\\\", \\\"Laid-Up FT\\\"\\n\\nInstructions:\\n\\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\\n\\nIf matched, return the normalized type exactly as listed above.\\n\\nIf no valid match, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Main_Cover_Type\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Main_Cover_Type\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/ee30279d-751b-4e29-b8ec-77b3ec6f0a63.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type_Mapped@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17178\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_cover_type_mapped(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\t# return previous_line\\n\\t\\n\\tdef contains_only_quotes(s):\\n\\t  return all(c in {'\\\"', \\\"'\\\"} for c in s)\\n\\t\\n\\tprevious_line = previous_line.strip()\\n\\tif previous_line:\\n\\t  if contains_only_quotes(previous_line):\\n\\t    print('1')\\n\\t    return 'COMP'\\n\\t  else :\\n\\t    print('2')\\n\\t    return previous_line\\n\\tprint('3')\\n\\treturn 'COMP'\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_cover_type_mapped\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type_Mapped@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Details", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are an intelligent address extraction assistant.\\n\\nGiven a full address string {{ \\\\ Party Address \\\\ }}, extract the following components:\\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\\nAddress Line 2: Estate, locality, landmark, or additional location detail\\nAddress Line 3: Optional detail like block, zone, village, or area\\nCity: Town or city name\\nState: The state, province, or region\\nCountry: Country name\\nPostcode: postal code (UK format)\\n\\nExtraction Rules:\\nDo not merge unrelated fields across lines\\nDo not confuse postcode with city/state.\\nReturn empty strings if any field is missing for that component \\n{\\n  \\\"Address Line 1\\\": \\\"\\\",\\n  \\\"Address Line 2\\\": \\\"\\\",\\n  \\\"Address Line 3\\\": \\\"\\\",\\n  \\\"City\\\": \\\"\\\",\\n  \\\"State\\\": \\\"\\\",\\n  \\\"Country\\\": \\\"\\\",\\n  \\\"Postcode\\\": \\\"\\\"\\n}\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Party_Address\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Party_Address\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_1", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/2238345c-5492-4faf-ba17-601ae8959748.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17185\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line1(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 1\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line1\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_2", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/857bdb23-fdf4-43eb-82ac-2eebf084190d.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17179\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_addressline2(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 2\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_addressline2\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_3", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/47dd45e5-af16-4bdf-a556-ff74509c151f.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17180\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 3\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Country", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/d23b232c-6268-43cd-a5e4-0dd2c11cedf4.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17181\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_country(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Country\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_country\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_State", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/badcb033-d0ff-482b-bdb4-6ab791ab8584.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17182\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_state(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"State\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_state\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_City", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/1c6b65e4-fd70-4171-b14d-cc939f048810.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17183\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_city(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"City\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_city\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Postcode", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/855cbdd5-e0c9-416f-adbe-9f777482085f.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17184\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_postcode(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\t\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Postcode\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_postcode\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}]}