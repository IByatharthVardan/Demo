{"dev_input": {"input_path": "axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/documents/out/map_records"}, "options": {"provenance_tracking": true, "auto_provenance": false}, "fields": [{"label": "__model_result", "lines": [{"function_id": {"name": "get_raw_extracted_fields", "source": "NATIVE"}, "inputs": [{"arg_name": "INPUT_COL", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "KEYWORD", "data_type_options": ["TEXT"], "value": "INPUT_COL"}, {"arg_name": "fields_to_extract", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "[{\"name\": \"Target_Price\", \"prompt\": \"Step 1 \\u2013 Identify Base Premium:\\nLook for phrases like \\u201crenewal terms received\\u201d, \\u201ctarget at the moment\\u201d, \\u201cwe would like terms\\u201d, \\u201clooking for a quote\\u201d \\u2192 mark as Target_Premium.\\n\\nstrictly Ignore values with \\u201clast year was\\u201d, \\u201cexpiry premium\\u201d,\\\"last year paid\\\", \\u201ccurrently paying\\u201d unless a % change is also mentioned.\\n\\nIf % change (e.g., \\u201c10% increase\\u201d) is mentioned with a past premium \\u2192 calculate: base \\u00b1 % change in Step3\\n\\nIf two premiums from different insurers \\u2192 use the lower one.\\nIf no valid target \\u2192 return \\\" \\\".\\n\\nStep 2 \\u2013 Adjust for IPT:\\nIf \\u201cincluding IPT\\u201d \\u2192 divide by 1.12.\\nIf \\u201c+ IPT\\u201d, \\u201cexcluding IPT\\u201d, or \\u201cplus IPT\\u201d \\u2192 use as-is.\\nIgnore commission.\\n\\nStep 3 \\u2013 Apply % Change:\\nIf phrases like \\u201c10% increase\\u201d or \\\"additional premium\\\" or \\u201cindication is\\u2026\\u201d appear \\u2192 apply change.\\n\\nOutput:\\nCalculated Target Premium: \\u00a3[value]\\n\\nlets think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Target Price \\u2014 the premium or price the client or broker expects to pay for the insurance policy. sometimes it is implied from previous year\\u2019s premium. Just return target price,\\nIf no relevant price reference is available, return \\\"N/A\\\"\", \"model_type\": \"ADVANCED\", \"position\": 0, \"result_data_type\": \"TEXT\"}, {\"name\": \"Agency_Enquiry_Reference\", \"prompt\": \"Task: Extract the Agency Enquiry Reference number from the given document.\\n\\nFollow these Instructions carefully to extract the Agency Enquiry Reference number:\\n\\n#Instructions:\\n\\n1. Read the broker presentation carefully.\\n\\n2. Look for a value labeled \\\"Agency Enquiry Reference\\\" or anything similar (e.g., \\\"Agency Ref\\\", \\\"Enquiry ID\\\", \\\"Reference Code\\\", \\\"Request for quotation\\\").\\n\\n3. This is usually a code or ID used to track the insurance submission.\\n\\n4. If you find it, extract only the value (not the label or surrounding text).\\n\\n5. If it\\u2019s not available anywhere in the document, return an empty string (\\\"\\\").\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Identify the Agency Enquiry Reference from the broker presentation, which is a code or ID used for tracking the insurance submission. Return only the value. If unavailable, return 'N/A'.\", \"model_type\": \"DEFAULT\", \"position\": 1, \"result_data_type\": \"TEXT\"}, {\"name\": \"Broker_Deadline\", \"prompt\": \"Extract the Broker Deadline from the email content.\\u2028This refers to the date by which a quote is expected from the insurer.\\n\\nInstructions\\nStep 1: Search for relevant deadline phrases\\nIdentify dates associated with the following phrases:\\nQuote required by\\nDeadline\\nTarget date\\nQuote deadline\\nQuote expected by\\nNeeded by\\nTerms no later than\\n\\nStep 2: Handle date formats\\nIf day, month, and year are present \\u2192 return in dd/mm/yyyy format.\\u2028Example: \\u201cQuote required by 10 January 2025\\u201d \\u2192 10/01/2025\\nIf only day and month are present (no year) \\u2192 return in dd/mm format.\\u2028Example: \\u201cQuote expected by 19 Jan\\u201d \\u2192 19/01\\nDo not infer the year from the email\\u2019s received date.\\n\\nStep 3: Exclude irrelevant dates\\nIgnore dates associated with:\\nPolicy renewal\\nEffective\\nExpiry\\nDue on\\n\\nOutput Format\\nBroker Deadline Date : <deadline date or \\\"\\\">\\nFull date: Broker Deadline Date : 10/01/2025\\nPartial date: Broker Deadline Date : 10/01\\nNo valid date: Broker Deadline Date : \\\"\\\"\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Identify the Broker Deadline from the broker presentation. This refers to the latest date by which the broker expects a quote or response. Return only the value. If unavailable, return 'N/A'.\", \"model_type\": \"ADVANCED\", \"position\": 2, \"result_data_type\": \"TEXT\"}, {\"name\": \"Product\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 3, \"result_data_type\": \"TEXT\"}, {\"name\": \"Insured\", \"prompt\": \"Extract the name of the insured, which may be referred to as the policyholder, client name, company name, full client name, or trading name. Return only the name of the person or business insured. If unavailable, return ''.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the name of the insured, which may be referred to as the policyholder, client name, company name, full client name, or trading name. Return only the name of the person or business insured. If unavailable, return 'N/A'.\", \"model_type\": \"DEFAULT\", \"position\": 4, \"result_data_type\": \"TEXT\"}, {\"name\": \"Business_Description\", \"prompt\": \"Extract the Business Description of the company from the broker presentation. Look for sections titled **Company Details** , **General Information** or similar. Return only the content that explains **Business Description** or  company's activities or business nature. If no relevant information is found, return:\\nBusiness Description: \\\"\\\"\\nOtherwise, return in the following format:\\nBusiness Description: \\\"<extracted text>\\\"\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Business Description of the company from the broker presentation. Look for sections titled 'Company Details,' 'General Information,' or similar. Return only the content that explains **Business Description** the company's activities or business nature. If no relevant information is found, return:\\nBusiness Description: \\\"N/A\\\"\\nOtherwise, return in the following format:\\nBusiness Description: \\\"<extracted text>\\\"\", \"model_type\": \"DEFAULT\", \"position\": 5, \"result_data_type\": \"TEXT\"}, {\"name\": \"Agency_Name\", \"prompt\": \"Find the Agency Name in the broker presentation document.\\n\\nSteps:\\n\\nStep 1: Look for any prominently displayed branding, logos, or company names on the cover page or header.If an agency name is identified, extract it in the format <Agency Name> : <Value>.\\n\\nStep 2: If the Agency Name not found in Step 1, identify the  risk management or Insurance brokers or Insurer  that prepared the document. And then Extract Broker name in this format <Broker Name>: <Value>\\n\\nStep 3: Do not return the client or insured's name.\\n\\nLet's think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Agency Name from the broker presentation document.\\n\\nInstructions:\\n\\nLook for the name of the brokerage firm or agency responsible for the presentation.\\n\\nIt is usually found:\\n\\nOn the cover page, header, or footer of the presentation.\\n\\nNear the broker contact information or under sections like \\u201cOur Team\\u201d, \\u201cBroker Details\\u201d, or \\u201cPresented by\\u201d.\\n\\nAlongside the agency logo or in the email signature block if present.\\n\\nThe agency name is usually a company name (e.g., Marsh Ltd., Gallagher Insurance, Towergate Partnership).\\n\\nDo not return personal names of broker representatives.\\n\\nOutput:\\nReturn the full Agency Name as a string. If no valid agency name is found, return \\\"N/A\\\"\", \"model_type\": \"ADVANCED\", \"position\": 6, \"result_data_type\": \"TEXT\"}, {\"name\": \"Company_House_Reference_Party\", \"prompt\": \"You are expert in analysing vehicle insurance data. Your task is to extract the **company registration** number of the insured/client from the Broker presentation document.\\n\\nInstructions:\\n\\nStep-1 : Extract the company registration number of the insured/client, which is typically 8 characters long but can be fewer.\\n\\nStep-2 : Look for key phrases indicating a registration number, such as:\\n\\n\\u201cCompany Number\\u201d\\n\\n\\u201cCompany Registration Number\\u201d\\n\\n\\u201cRegistered Number\\u201d\\n\\nor any similar variation\\n\\nExclusions & Constraints:\\n\\nStep-3 : Do not extract the company number found in the broker's details or footer.\\n\\nStep-4 : Only extract the number if it refers specifically to the insured/client.\\n\\nStep-5 : If no such registration number is found for the client, return an empty string: \\\"\\\".\\n\\nJust return the final output company registration number of the insured, otherwise return an empty string: \\\"\\\" without any additional text.\\n\\nLet's think step by step.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Company House Reference of the insured. This is a unique identifier assigned by Companies House in the UK \\u2014 typically an 8-character code, though it can be shorter. Return only value, If no such reference is found , return \\\"\\\"N/A\\\"\\\"\\\"\", \"model_type\": \"ADVANCED\", \"position\": 7, \"result_data_type\": \"TEXT\"}, {\"name\": \"Date_Established\", \"prompt\": \"Extract the Date Established of the insured \\u2014 this refers to the year or full date when the business was founded or incorporated. Look for similar phrases such as:\\n\\nYear business established\\nEstablished Year\\n\\nReturn only the extracted value.\\nIf no establishment date is found, return \\\"\\\"\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Date Established of the insured \\u2014 this refers to the year or full date when the business was founded or incorporated. Return only the value,\\nIf the establishment date cannot be found, return \\\"\\\"N/A\\\"\\\".\", \"model_type\": \"DEFAULT\", \"position\": 8, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address\", \"prompt\": \"Extract the Party Address (also known as the Insured Address/ Correspondence Address / Trading Address) from the document.\\n\\nInstructions:\\nIt is often found under the below section:\\n**Client Details and General Information**, **Client Profile**, **Company Details**\\n\\nIgnore unrelated addresses (e.g., branch, broker, or claimant addresses).\\n\\nReturn the complete address exactly as a string from the document, without omitting or reformatting any part.\\n\\nOutput:\\n\\nReturn the full Party Address as a string. If no valid address is found, return \\\"\\\"\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Insured Address from the document.\\n\\nIt is usually found under the Client Details and General Information or Client Profile section.\\n\\nIgnore other addresses like broker, branch, or claimant addresses.\\n\\nReturn the full address as one line. If not found, return \\\"N/A\\\"\", \"model_type\": \"DEFAULT\", \"position\": 9, \"result_data_type\": \"TEXT\"}, {\"name\": \"Incepts_On\", \"prompt\": \"The inception date may be referred to (case-insensitive) using the following labels only , followed by a date:\\nPolicy Inception Date, Inception Date, Effective Date, Start Date, Period of Insurance, Renewal Date, Renewal On, or Incepts On.\\n\\nApply the following rules strictly:\\n\\nDo not extract any general or standalone date \\u2014 only extract dates that immediately follow a valid label\\n\\nIf multiple \\\"Period of Insurance\\\" date ranges appear, extract the start date from the range that is nearest to the heading **\\\"Motor Fleet\\\"** (or a similar heading). If no such heading is found, default to the latest date range.\\n\\nIf multiple valid labels are present prioritize the Policy Inception Date.\\nExtract only one date per document \\u2014 the most relevant based on the above priority.\\n\\nDo not extract dates labeled as Survey Date, Quotation Date, Deadline Date, Next Renewal Date, Policy Expiry Date, or any general Date without a valid label.\\n\\nIf the date appears without a year (e.g., only DD/MM), return it in DD/MM format only with out extra text.\\n\\nIf the date includes day, month, and year, return in DD/MM/YYYY ormat only with out extra text.\\n\\nIf no valid inception-related date is found, return an empty string: \\\"\\\".\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Inception Date \\u2014 the date the insurance policy is set to begin.\\nIt may also be referred to as \\\"Effective Date\\\", \\\"Start Date\\\", or \\\"Incepts On\\\".\\nDo not return the Renewal Date.\\nIf no relevant start date is found, return \\\"N/A\\\".\", \"model_type\": \"ADVANCED\", \"position\": 10, \"result_data_type\": \"TEXT\"}, {\"name\": \"Expires_On\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"ADVANCED\", \"position\": 11, \"result_data_type\": \"TEXT\"}, {\"name\": \"Main_Cover_Type\", \"prompt\": \"Extract the Cover basis (also referred to as Cover Type) from the document using the following rules:\\n\\n**Valid_cover_types** includes: \\n- \\\"Comprehensive(COMP)\\\" (also treat \\\"Comp\\\", \\\"COMP\\\", \\\"Comprehensive\\\" as equivalent to this)\\n- \\\"Third Party Fire and Theft(TPFT)\\\" (include variations like \\\"TPFT\\\", \\\"Third Party Fire & Theft\\\")\\n- \\\"Third Party Only(TPO)\\\" (include \\\"TPO\\\", \\\"Third Party\\\")\\n- \\\"Laid up ADFT\\\"\\n- \\\"Laid up FT\\\"\\n\\nIf a \\\"Claims Experience\\\" section is found, extract the Cover Type from the most recent period mentioned in that section.\\n\\u2023 Format: <period range>:<cover type>\\n\\nIf the section is not found, but cover types are listed for each vehicle group, extract them.\\n\\u2023 Format: <vehicle group>:<cover type> (comma-separated if multiple)\\n\\nIf neither is found, but a standalone Cover Type is mentioned (not in a section or group), extract the most recent or most relevant one.\\n\\u2023 Format: AD Cover:<cover type>\\n\\nReturn only the final output. No explanations.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Main Cover Type from the input. This refers to the level of motor insurance cover requested or provided (e.g., 'Comprehensive', 'Third Party Only', 'TPFT'). This information is usually found under headers like 'Cover Basis', 'Cover', or similar. Return only the cover type. If no valid cover type is found, return 'N/A'\", \"model_type\": \"DEFAULT\", \"position\": 12, \"result_data_type\": \"TEXT\"}, {\"name\": \"Risk_Postcode\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 13, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_Accident_Damage\", \"prompt\": \"Extract the Accidental Damage Excess value (also referred to as ADFT or AD) from the document using the following steps: \\n\\nSteps :\\nStep 1: Check for accidental damage excess values, also known as ADFT or AD, which are listed for each vehicle group. Extract them in this format: <vehicle group>:<excess value> (comma-separated if there are multiple).\\n\\nStep 2: If excess values not found in Step 1, but a standalone Accidental Damage Excess value is mentioned (not in a section or group), extract the most recent or most relevant one in this Format: AD Excess:<excess value>\\n\\nLet's think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Accidental Damage Excess value (also referred to as ADFT or AD) from the document using the following rules:\\n\\nIf a \\\"Claims Experience\\\" section is found, extract the Accidental Damage Excess value from the most recent period mentioned in that section.\\n\\u2023 Format: <period range>:<excess value>\\n\\nIf the section is not found, but excess values are listed for each vehicle group, extract them.\\n\\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nIf neither is found, but a standalone Accidental Damage Excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\\n\\u2023 Format: AD Excess:<excess value>\\n\\n\\nReturn only the final output. No explanations.\", \"model_type\": \"ADVANCED\", \"position\": 14, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_Fire\", \"prompt\": \"Extract the Fire excess (\\u00a3) value (also referred to as ADFT or FT) from the document using the following steps: \\n\\nSteps :\\nStep 1: Check for Fire & theft excess values (also referred to as ADFT or FT) which are listed for each vehicle group, extract them in this Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nStep 2:  If excess values not found in Step 1, but a standalone Fire & theft excess value (also referred to as ADFT or FT) is mentioned (not in a section or group), extract the most recent or most relevant one in this Format: FT Excess:<excess value>\\n\\nLet's think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Fire & theft excess (\\u00a3)  value (also referred to as ADFT or FT) from the document using the following rules:\\n\\nIf a \\\"Claims Experience\\\" section is found, extract the Fire & theft excess Excess value from the most recent period mentioned in that section.\\n\\u2023 Format: <period range>:<excess value>\\n\\nIf the section is not found, but Fire & theft excess values are listed for each vehicle group, extract them.\\n\\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nIf neither is found, but a standalone Fire & theft excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\\n\\u2023 Format: FT Excess:<excess value>\\n\\n\\nReturn only the final output. No explanations.\", \"model_type\": \"ADVANCED\", \"position\": 15, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_Theft\", \"prompt\": \"Extract the Theft excess (\\u00a3) value (also referred to as ADFT or FT) from the document using the following steps: \\n\\nSteps :\\nStep 1: Check for Fire & theft excess values (also referred to as ADFT or FT) which are listed for each vehicle group, extract them in this Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nStep 2:  If excess values not found in Step 1, but a standalone Fire & theft excess value (also referred to as ADFT or FT) is mentioned (not in a section or group), extract the most recent or most relevant one in this Format: FT Excess:<excess value>\\n\\nLet's think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Theft excess (\\u00a3)  value (also referred to as ADFT or FT) from the document using the following rules:\\n\\nIf a \\\"Claims Experience\\\" section is found, extract the Fire & theft excess Excess value from the most recent period mentioned in that section.\\n\\u2023 Format: <period range>:<excess value>\\n\\nIf the section is not found, but Fire & Theft excess  values are listed for each vehicle group, extract them.\\n\\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nIf neither is found, but a standalone Theft Excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\\n\\u2023 Format: Theft Excess:<excess value>\\n\\n\\nReturn only the final output. No explanations.\", \"model_type\": \"ADVANCED\", \"position\": 16, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_Type_WS\", \"prompt\": \"Extract the **Windscreen excess (\\u00a3)** value (also referred to as ADFTWS or WS or Glass Excess) from the document using the following steps:\\n\\nSteps :\\nStep 1: Check for Windscreen excess values (also referred to as ADFTWS or WS or Glass Excess) which are listed for each vehicle group, extract them in this Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nStep 2:  If excess values not found in Step 1, but a standalone Windscreen Excess value (also referred to as ADFTWS or WS or Glass Excess) is mentioned (not in a section or group), extract the most recent or most relevant one in this Format:WS Excess:<excess value>\\n\\nLet's think step by step\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the **Windscreen excess (\\u00a3)** value (also referred to as ADFTWS or WS) from the document using the following rules:\\n\\nIf a \\\"Claims Experience\\\" section is found, extract the Windscreen excess value from the most recent period mentioned in that section.\\n\\u2023 Format: <period range>:<excess value>\\n\\nIf the section is not found, but Windscreen excess values are listed for each vehicle group, extract them.\\n\\u2023 Format: <vehicle group>:<excess value> (comma-separated if multiple)\\n\\nIf neither is found, but a standalone Windscreen Excess value is mentioned (not in a section or group), extract the most recent or most relevant one.\\n\\u2023 Format:WS Excess:<excess value>\\n\\n\\nReturn only the final output. No explanations.\", \"model_type\": \"ADVANCED\", \"position\": 17, \"result_data_type\": \"TEXT\"}, {\"name\": \"Agency_address\", \"prompt\": \"You are an expert in Insurance underwriting. Your task is to extract the correct Agency Address from the OCR-processed Broker Presentation.\\n\\nFollow the instructions carefully:\\n\\n1) The Agency Address refers to the address of the insurance broker, intermediary, or agent responsible for managing or placing the insurance policy.\\n\\n2) This address is typically associated with organisations such as Gallagher, UBT, Arthur J. Gallagher, etc.\\n\\n3) Look for addresses that are directly linked to broker personnel (e.g., account managers, account directors, insurance advisors) or company names known to be brokers/intermediaries.\\n\\n4) Also consider any address that follows the keywords \\\"Produced by\\\" or \\\"Prepared by\\\" on the first page of the document.\\n\\n5) Exclude all addresses related to the insured party. For clarity, this includes any address listed as or associated with:\\n\\nPolicyholder\\n\\nClient (business or trading)\\n\\nInsured\\n\\nCorrespondence\\n\\nReturn the complete address exactly as it appears in the document, without omitting or reformatting any part.\\n\\nIf no agency/broker address is identified, return an empty string: \\\"\\\"\\n\\nOutput Format:\\nA single string containing the agency\\u2019s physical address, or \\\"\\\" if not found.\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Agency Address, which refers to the full address of the insurance agency or broker involved in the policy.\\nIf no address details are found, return \\\"N/A\\\".\", \"model_type\": \"ADVANCED\", \"position\": 18, \"result_data_type\": \"TEXT\"}, {\"name\": \"Effective_From\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 19, \"result_data_type\": \"TEXT\"}, {\"name\": \"Effective_To\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 20, \"result_data_type\": \"TEXT\"}, {\"name\": \"Holding_Broker\", \"prompt\": \"Task: Extract the value associated with the Holding Broker from the given text.\\n\\nRules:\\n1. Only extract the value if it is explicitly labeled as one of the following (case-insensitive):\\n   - \\\"Holding Broker\\\"\\n   - \\\"Current Broker\\\"\\n\\n2. Return the value exactly as written after the label (e.g., after \\\"Holding Broker:\\\").\\n\\n3. Do not infer, guess, or extract any value unless one of the exact labels above is found.\\n\\n4. If none of the specified labels are present, return an empty string \\\"\\\".\\n\\n5. Do not Extract Holding Broker from the label like Broker name, Holding Insurers.\\n\\nOutput format:\\n\\nAlways return result as JSON:\\n\\n{\\n  \\\"holding_broker\\\": \\\"<name or blank>\\\",\\n  \\\"source_text\\\": \\\"<the phrase that triggered your decision>\\\"\\n}\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the value associated with \\\"Holding Broker\\\" from the given text. Only return the value if it is explicitly labeled as \\\"Holding Broker\\\" (case-insensitive). Do not infer or guess the broker name if the label is not clearly mentioned. Return \\\"N/A\\\" if \\\"Holding Broker\\\" is not found\", \"model_type\": \"ADVANCED\", \"position\": 21, \"result_data_type\": \"TEXT\"}, {\"name\": \"Is_Holding_Broker\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 22, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Details\", \"prompt\": \"Driver Details\", \"prompt_type\": \"basic\", \"values\": {}, \"data_type\": \"OBJECT_LIST\", \"prompt_schema\": [{\"name\": \"Driver Name\", \"description\": \"Extract only the valid driver names, do not extract irrelevant text as driver's name. Extract all driver names from the entire document.\"}, {\"name\": \"Driver DOB\", \"description\": \"-->If the date is already in dd/mm/yyyy format, keep it as is.\\n-->If only the year is provided (e.g., 1990), default to 01/01/yyyy.\\n-->If month and year are provided (e.g., March 1990), default to 01/mm/yyyy.\\n-->Ensure all output DOBs are returned in dd/mm/yyyy format.\"}, {\"name\": \"Licence Date\", \"description\": \"1. If the date is already in **dd/mm/yyyy** format, keep it unchanged.\\n2. If only the **year** is given (e.g., \\\"1990\\\"), return the DOB as **01/01/1990**.\\n3. If **month and year** are provided (e.g., \\\"March 1990\\\" or \\\"03/1990\\\"), return the DOB as **01/03/1990**.\\n4. If the date is written in a textual format like \\\"2nd March 1990\\\" or \\\"March 2, 1990\\\", convert it to **02/03/1990**.\\n5. Return all DOBs in **dd/mm/yyyy** format with **leading zeros** for day and month if needed.\\n\\nExamples:\\n- \\\"1990\\\" \\u2192 \\\"01/01/1990\\\"\\n- \\\"March 1990\\\" \\u2192 \\\"01/03/1990\\\"\\n- \\\"2nd March 1990\\\" \\u2192 \\\"02/03/1990\\\"\\n- \\\"02/03/1990\\\" \\u2192 \\\"02/03/1990\\\"\\n- \\\"Mar 1990\\\" \\u2192 \\\"01/03/1990\\\"\"}, {\"name\": \"Conviction Code\", \"description\": \"Extract all the conviction codes for each driver, such as 'SP-30', 'IN 10', or 'TS10' and give them as a comma separated list.\"}, {\"name\": \"Driver Claims\", \"description\": \"Extract the claim details of the drivers if they are mentioned. Do not consider Reason for referral or notice as Driver claims.\"}], \"description\": \"Your task is to scan every page of the Broker presentation thoroughly and extract all driver-related details or related terms like Primary Driver, Secondary Driver, Additional Driver, Listed Driver, Young Driver, Convicted Driver etc.\\n\\nAnalyze the details under all headers sections and extract all the **Driver** related details.\\n\\nInstructions:\\nStep 1: Identify Driver Sections\\n-->Analyze the context under each heading and check if driver related information(Ex : Driver names, Driver claims) is present.\\nStep 2: Extract the following information for each driver\\n-->Driver Name \\u2013 Full name of the driver (Ex:'Williams').\\n-->Driver Date of Birth (DOB) \\u2013 The driver's date of birth in the format it appears.\\n-->Driver Licence Date \\u2013 Date when the license obtained. This is not the same as \\\"Date of conviction\\\".\\n-->Driver Claims - Extract the claim for the driver if mentioned.\\nStep 3: Match and Group Details\\nEnsure that for every driver found, the corresponding Name, DOB, and Licence Date are correctly grouped.\\nLet's think step by step.\", \"model_type\": \"ADVANCED\", \"position\": 24, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Age\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 26, \"result_data_type\": \"TEXT\"}, {\"name\": \"Todays_Date\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 23, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Licence_Tenure\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 28, \"result_data_type\": \"TEXT\"}, {\"name\": \"Vehicle_Category_Info_and_Registration_Numbers\", \"prompt\": \"Your task is to thoroughly scan each and every page of the document and extract structured information for each vehicle group.\\n\\nEach vehicle group will have:\\n\\n--> A Vehicle Group Name\\n--> A Cover Basis (e.g., Comprehensive, TPO, TPFT, etc.)\\n--> One or more Vehicle Registration Numbers, which may include:\\n        -->Alphanumeric registration numbers (e.g., \\\"TN01AB1234\\\", \\\"MH12XY9999\\\")\\n        -->Unregistered vehicles (e.g., \\u201cUNREGISTERED VEHICLE\\u201d, \\u201cTBA\\u201d, \\u201cN/A\\u201d, etc.)\\n        -->Include Serial/chassis number \\n        -->Include the vehicle registration number for excluded drivers.\\n--> Keep duplicate Vehicle Registration numbers as well. Do not change the order of Vehicle Registrations\\u2014maintain the same order as in the document.\\n\\nOutput Format : \\n\\nEx : 1) Vehicle group Name : <Vehicle group Name>\\n          -- Cover Basis : <Cover Basis or N/A>\\n          -- Registration Numbers : <Alphanumeric registration numbers or N/A>\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Scan each and every page of the document and extract cover basis type along with the alphanumeric vehicle registration numbers which includes unregistered vehicle numbers as well present under the vehicle group.\\n\\nOutput Format : \\n\\nEx : 1) Vehicle group Name : <Vehicle group Name>\\n          -- Cover Basis : <Cover Basis Type>\\n          -- Registration Numbers : <Alphanumeric                      registration numbers or N/A>\", \"model_type\": \"ADVANCED\", \"position\": 32, \"result_data_type\": \"TEXT\"}, {\"name\": \"Vehicle_Registration_Numbers_And_Cover_Basis\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 33, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Merged_Data\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 29, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Type\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 30, \"result_data_type\": \"TEXT\"}, {\"name\": \"Unique__Values__Cover__Basis\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 34, \"result_data_type\": \"TEXT\"}, {\"name\": \"Cover_Basis_Mapping\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 35, \"result_data_type\": \"TEXT\"}, {\"name\": \"Vehicle_Schedule_Table\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 36, \"result_data_type\": \"TEXT\"}, {\"name\": \"Number_of_Notifiable_Vehicles\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 37, \"result_data_type\": \"TEXT\"}, {\"name\": \"Offering_Type_BP\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 38, \"result_data_type\": \"TEXT\"}, {\"name\": \"Transaction_Type\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 40, \"result_data_type\": \"TEXT\"}, {\"name\": \"Agency_Contact\", \"prompt\": \"Extract the Agency Contact \\u2014 the name of the person who submitted the broker presentation.\\n\\nInstructions:\\n\\nSearch the presentation for the sender\\u2019s full name, typically found on the cover page, in a \\u201cPrepared by\\u201d \\u201cContact\\u201d, \\\"presenated by\\\", \\\"Produced by\\\" or \\u201cSubmitted by\\u201d section, or near the footer/header. Look for labels like Contact, Broker Contact, Point of Contact, or Prepared by.\\n\\nReturn only the full name (e.g., \\\"John Smith\\\" or \\\"Emma-Jane Clarke\\\").\\n\\nIf only a first or last name is present, return it as-is.\\n\\nIf no valid name is found, return \\\"\\\".\", \"prompt_type\": \"advanced\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"Extract the Agency Contact \\u2014 this is the name of the person who sent the email.\\n\\nInstructions:\\n\\nLook for the sender\\u2019s name in the email body, especially near the signature section at the end of the email.\\n\\nReturn only the full name of the person (e.g., John Smith).\\n\\nDo not return any email addresses, phone numbers, or job titles.\\n\\nIf no name is found, return \\\"N/A\\\"\", \"model_type\": \"DEFAULT\", \"position\": 39, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Party_Table\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 31, \"result_data_type\": \"TEXT\"}, {\"name\": \"Business_Category\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 41, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Name_And_Driver_DOB\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 25, \"result_data_type\": \"TEXT\"}, {\"name\": \"Driver_Name_And_Licence_Date_Info\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 27, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Country\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 47, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_City\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 49, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_State\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 48, \"result_data_type\": \"TEXT\"}, {\"name\": \"Main_Cover_Type_Mapped\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 42, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_2\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 45, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_3\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 46, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Postcode\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 50, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Line_1\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 44, \"result_data_type\": \"TEXT\"}, {\"name\": \"Party_Address_Details\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 43, \"result_data_type\": \"TEXT\"}, {\"name\": \"Excess_List\", \"prompt\": \"Excess List\", \"prompt_type\": \"basic\", \"values\": {}, \"data_type\": \"OBJECT_LIST\", \"prompt_schema\": [{\"name\": \"Period\", \"description\": \"\"}, {\"name\": \"AD Excess\", \"description\": \"If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value. If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value.\\n\\nIf ADFT is not found, return the AD ( Accident and Damage) excess value.\\n\\nIf neither is available, return '0'\"}, {\"name\": \"Fire Excess\", \"description\": \"If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.  If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value.\\n\\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\\n\\nIf neither is available, return '0'\"}, {\"name\": \"Theft Excess\", \"description\": \"If an ADFT (Accidental Damage, Fire, and Theft) excess is available, return only that value.      If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value.\\n\\nIf ADFT is not found, return the FT (Fire & Theft) excess value.\\n\\nIf neither is available, return '0'\"}, {\"name\": \"WS Excess\", \"description\": \"Wind screen excess value , If an ADFTWS (Accidental Damage, Fire, and Theft and WS) excess is available, return only that value. If an WS (wind storm) excess is available, return only that value. If data is not available, return '0'\"}, {\"name\": \"Cover On Policy\", \"description\": \"The cover type may appear as one of the following:\\n\\nComprehensive or Comp\\nThird Party\\nTPO (Third Party Only)\\nTPFT (Third Party, Fire and Theft)\\n\\nReturn the exact label as it appears in the document.\\n\\nIf multiple cover types are mentioned, return all distinct types.\\n\\nIf no cover type is found, or if you see some relevent text like \\\"Not Insured\\\", return \\\"\\\", don't return irrelevent data\"}], \"description\": \"Task: Extract Excess Details and Cover Information for each valid Period from the document.\\n\\nInstructions:\\nIdentify and extract rows where Period represents a valid policy period \\u2014 typically expressed as either a range of years (e.g., \\u201c2020\\u20132021\\u201d) or a date range (e.g., \\u201c01/01/2021 \\u2013 31/12/2021\\u201d).\\n\\nField Extraction:\\nLook for the following fields (column names may vary slightly):\\n* Period\\n* Accident Damage (AD) Excess \\u2013 may appear as ADFT, ADFTWS, or similar variants\\n* Fire Excess  \\n* Theft Excess\\n* WS Excess - ADFTWS, WS\\n* Cover in Period\\n\\nInclusion Criteria:\\n* Include a row only if both Period and Cover in Period are present.\\n* Do not exclude rows if any of the excess fields are missing \\u2014 for such cases, output those fields as empty strings ('').\\n\\nData Cleaning:\\n* Remove any currency symbols (e.g., \\u00a3) from the excess values.\\n* Remove any thousands separators (e.g., 1,000 \\u2192 1000) if present.\", \"model_type\": \"ADVANCED\", \"position\": 51, \"result_data_type\": \"TEXT\"}, {\"name\": \"Unique_Values_in_Cover_On_Policy\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 52, \"result_data_type\": \"TEXT\"}, {\"name\": \"cover_mapping\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 53, \"result_data_type\": \"TEXT\"}, {\"name\": \"CCE_Data\", \"prompt\": \"CCE Data\", \"prompt_type\": \"basic\", \"values\": {}, \"data_type\": \"OBJECT_LIST\", \"prompt_schema\": [{\"name\": \"Period\", \"description\": \"\"}, {\"name\": \"Vehicle Years Earned\", \"description\": \"\"}, {\"name\": \"Claim Count\", \"description\": \"This may be labeled as Total no. of accidents & claims\"}, {\"name\": \"Incurreds Paid AD WS\", \"description\": \"These may be labeled under \\\"Claims paid (incl. payments on o/s claims\\\" and it is claims paid related to Accidental Damage and Windscreen (AD WS)\"}, {\"name\": \"Incurreds Paid FT\", \"description\": \"Extract the claims paid amount related to Fire and Theft (FT) for each year from the CCE table.\\n\\nIf there is a column labeled \\\"AD including FT\\\" or similar, use that value \\u2014 it already includes FT.\\n\\nIf there is a column labeled ADFT (Accidental Damage, Fire & Theft), use that.\\n\\nIf neither of the above is found, then look for and use the FT value. It might be written as:\\nFT\\nF&T\\nF.&T.\\nF&T (in AD).                                                                             \\nAD including FT\"}, {\"name\": \"Incurreds Paid TP\", \"description\": \"claims paid related to Third Party (TP), which may appear as TP or \\\"Claims Paid TP\\\"\"}, {\"name\": \"Incurreds Outstanding NO\", \"description\": \"claims outstanding incurred amount related to Non-Owned (NO) claims, Look for column headers labeled as \\\"NO\\\", \\\"No\\\",  \\\"Non-Owned\\\", or similar\"}, {\"name\": \"Incurreds Outstanding AD WS\", \"description\": \"outstanding claims related to Accidental Damage and Windscreen (AD WS)\"}, {\"name\": \"Incurreds Outstanding FT\", \"description\": \"outstanding claims related to Fire and Theft, which may appear as FT or F&T\"}, {\"name\": \"Incurreds Outstanding TP\", \"description\": \"outstanding claims related to Third Party (TP)\"}, {\"name\": \"Total Incurred\", \"description\": \"total incurred amount for each year , which may appear as \\\"Total Paid and Outstanding\\\"\"}, {\"name\": \"Insurer\", \"description\": \"If the text contains phrases like \\\"Not Insured with\\\", leave the insurer value empty for that row.\\n\\nIf no insurer is mentioned for a given period, use the default insurer mentioned in the header of that page\\n\\nOtherwise, extract the insurer name mentioned for that period.\"}], \"description\": \"Task: Extract insurance data for each valid Period from the CCE document.\\n\\nInstructions:\\nIdentify and extract rows where Period represents a valid policy period \\u2014 typically expressed as either a range of years (e.g., \\u201c2020\\u20132021\\u201d) or a date range (e.g., \\u201c01/01/2021 \\u2013 31/12/2021\\u201d).\\n\\nGuidelines:\\nOnly extract rows where Period matches a valid policy period format (year range or date range).\\nIgnore summary rows, totals, or headings that don\\u2019t match this format.\\nSkip rows where the Period is valid but no relevant data is associated (i.e., all required fields are blank, zero, or marked as N/A).\\n\\nClean numeric fields by:\\nRemoving currency symbols (e.g., \\u00a3)\\nRemoving thousands separators (e.g., commas)\\n\\nIf a single field in the document combines multiple categories (e.g.:\\n\\u201cIncurreds - Paid: AD & WS and FT\\u201d\\n\\u201cIncurreds - Outstanding: AD & WS and FT\\u201d),\\nthen duplicate the value into each corresponding field in the output (e.g., populate both AD & WS and FT fields with the same value).\", \"model_type\": \"ADVANCED\", \"position\": 54, \"result_data_type\": \"TEXT\"}, {\"name\": \"Policy_Dates\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 55, \"result_data_type\": \"TEXT\"}, {\"name\": \"Period\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 56, \"result_data_type\": \"TEXT\"}, {\"name\": \"CCE_Table\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 58, \"result_data_type\": \"TEXT\"}, {\"name\": \"Year\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 57, \"result_data_type\": \"TEXT\"}, {\"name\": \"Trade_Descriptions\", \"prompt\": \"\", \"prompt_type\": \"udf\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 59, \"result_data_type\": \"TEXT\"}, {\"name\": \"AXA_Trade_Description\", \"prompt\": \"\", \"prompt_type\": \"derived\", \"values\": {}, \"data_type\": \"TEXT\", \"prompt_schema\": null, \"description\": \"\", \"model_type\": \"DEFAULT\", \"position\": 60, \"result_data_type\": \"TEXT\"}]"}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}]}]}, {"label": "Target_Price", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Target_Price\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Extract only the final target premium value.\\nIf no valid target premium value is found, return \\\"\\\".\\nDo not include any label text like \\\"target premium\\\" or \\\"client is looking for\\\".\\nReturn only the clean value.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Target_Price@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/ba0622b7-a03a-41ac-9bdc-22a5d14f390b.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Target_Price@1\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17104\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(previous_line, context = {}, keys = {}, **kwargs):\\n\\treturn previous_line.replace(\\\"\\u00a3\\\",\\\"\\\").replace(\\\",\\\",\\\"\\\")\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Target_Price@1\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Agency_Enquiry_Reference", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Agency_Enquiry_Reference\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Broker_Deadline", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Broker_Deadline\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return only date without extra information\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Broker_Deadline@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/790e1de7-663a-4492-bf8d-2b4ca898cc2a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Broker_Deadline@1\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17105\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef business_logic_for_broker_deadline(previous_line, context = {}, keys = {}, **kwargs):\\n\\tfrom datetime import datetime, timedelta\\n\\t\\n\\tdef add_calendar_days(start_date, days):\\n\\t    \\\"\\\"\\\"Add calendar days (including weekends) to a given date.\\\"\\\"\\\"\\n\\t    return start_date + timedelta(days=days)\\n\\t\\n\\tdef add_weekdays(start_date, days):\\n\\t    \\\"\\\"\\\"Add weekdays to a given date, skipping weekends.\\\"\\\"\\\"\\n\\t    while days > 0:\\n\\t        start_date += timedelta(days=1)\\n\\t        if start_date.weekday() < 5:  # Weekdays: Mon-Fri = 0-4\\n\\t            days -= 1\\n\\t    return start_date\\n\\t\\n\\tdef process_date(input_str):\\n\\t    today = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)\\n\\t\\n\\t    # Try to parse dd/mm/yyyy\\n\\t    try:\\n\\t        parsed_date = datetime.strptime(input_str, \\\"%d/%m/%Y\\\")\\n\\t    except ValueError:\\n\\t        # If year not present, try dd/mm check\\n\\t        try:\\n\\t            try:\\n\\t                parsed_date = datetime.strptime(input_str, \\\"%d/%m\\\")\\n\\t                final_date = add_calendar_days(today, 5)\\n\\t                return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t            except:\\n\\t                final_date = add_calendar_days(today, 5)\\n\\t                return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t        except ValueError:\\n\\t            final_date = add_calendar_days(today, 5)\\n\\t            return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t            \\n\\t    # Compare dates\\n\\t    base_date = parsed_date if parsed_date >= today else today\\n\\t\\n\\t    return base_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t\\n\\tresult = process_date(previous_line) \\n\\treturn result\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"business_logic_for_broker_deadline\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Broker_Deadline@1\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Product", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/2c24c6b8-abf4-4493-910b-666160d2faa7.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17106\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_product_name(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"Fleet\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_product_name\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Insured", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Insured\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Business_Description", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Business_Description\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the extracted text, return only the clean **Business Description**.\\n\\n- Preserve the complete business activity description as written.\\n- Remove any preceding labels such as \\\"Trade:\\\", \\\"Business Description:\\\", or \\\"Nature of Business:\\\"\\n- Remove trailing punctuation, line breaks, or filler text.\\n\\nIf no business description is found, return \\\"\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Business_Description@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Agency_Name", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Agency_Name\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"From the extracted text, return only the clean **Agency Name** or **Broker Name**.\\n\\nIf no agency or broker name is found, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Agency_Name@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Company_House_Reference_Party", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Company_House_Reference_Party\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return the final output company registration number of the insured, otherwise return an empty string: \\\"\\\" without any additional text.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Company_House_Reference_Party@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Date_Established", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Date_Established\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are an expert in document analysis and date extraction.\\nYour task is to extract and normalize a date from the given text.\\nInstructions:\\nInterpret all date formats strictly as day/month/year (DD/MM/YYYY), regardless of how the date appears in the text. The first number is always the day, second is the month, third is the year.\\nNormalize and return the date in the format: DD/MM/YYYY (zero-padded).\\nIf only a year is present (e.g. \\\"2020\\\"), return it as 01/01/YYYY.\\nIf a month and year are present (e.g. \\\"March 2020\\\" or \\\"03/2020\\\"), return it as 01/MM/YYYY.\\nIf a full day, month, and year are present, return the exact date in DD/MM/YYYY format.\\nReturn only the extracted value (no label or explanation in output).\\nIf no valid establishment date is found, return exactly: \\\"\\\" (empty string, without quotes).\\nExamples:\\nExample 1:\\nText: The business was founded in 2021.\\nOutput: 01/01/2021\\nExample 2:\\nText: Established: March 2020.\\nOutput: 01/03/2020\\nExample 3:\\nText: Policy effective from 5/11/2023 for one year.\\nOutput: 05/11/2023\\nExample 4:\\nText: Driver's licence issue date: 14-6-90, valid for 10 years.\\nOutput: 14/06/1990\\nExample 5:\\nText: Vehicle registration expires on 01.12.2025.\\nOutput: 01/12/2025\\nExample 6:\\nText: Renewal date: \\\"\\\"\\nOutput: \\\"\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Date_Established@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Party_Address\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Clean and return **only the address details**. This means:\\n- Preserve the physical address lines.\\n- Format it as a single clean string separated by commas.\\n- If no valid address is present, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Party_Address@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Incepts_On", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Incepts_On\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Check Format: If date is already in the dd/mm/yyyy format, return it as is.\\nStandardize Date: If the date is in a different valid format (e.g., yyyy-mm-dd, mm/dd/yyyy, dd-mm-yyyy, etc.), convert it to dd/mm/yyyy. return cleaned date without any extra text and quotations.\\nInvalid Dates: If input_date is missing, empty, or not a valid date, return an empty string \\\"\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Incepts_On@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Expires_On", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/e4029531-0ec8-43e0-994d-7649b8017e17.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Incepts_On\",\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17107\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(Incepts_On, context = {}, keys = {}, **kwargs):\\n\\tfrom datetime import datetime, timedelta\\n\\t\\n\\tdef add_one_year_minus_one_day(date_str):\\n\\t    # Parse the input date (DD/MM/YYYY)\\n\\t    input_date = datetime.strptime(date_str, \\\"%d/%m/%Y\\\")\\n\\t    try:\\n\\t        # Try to add one year directly\\n\\t        one_year_later = input_date.replace(year=input_date.year + 1)\\n\\t    except ValueError:\\n\\t        # Handle Feb 29 (leap year issue) and other invalid dates\\n\\t        temp_date = input_date + (datetime(input_date.year + 1, 3, 1) - datetime(input_date.year, 3, 1))\\n\\t        one_year_later = temp_date\\n\\t    # Subtract one day\\n\\t    final_date = one_year_later - timedelta(days=1)\\n\\t    # Return formatted date as DD/MM/YYYY with leading zeros\\n\\t    return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t    \\n\\ttry:\\n\\t    expiry_date = add_one_year_minus_one_day(Incepts_On)\\n\\t    return expiry_date\\n\\texcept Exception as e:\\n\\t    return \\\"\\\"\\n\\t\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Main_Cover_Type", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Main_Cover_Type\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"If excess values are given for each vehicle group, return the most common cover type value.\\n\\nIf excess values are given for different periods, return the most recent period cover value .\\n\\nIf a single value is extracted (not linked to group or period), return just the cover type .\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Main_Cover_Type@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/e7f85908-f04b-48fc-b910-71b0ade23999.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type@1\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17108\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_cover_type(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\tdef contains_only_quotes(s):\\n\\t  return all(c in {'\\\"', \\\"'\\\"} for c in s)\\n\\t\\n\\tprevious_line = previous_line.strip()\\n\\tif previous_line:\\n\\t  if contains_only_quotes(previous_line):\\n\\t    print('1')\\n\\t    return 'Comp'\\n\\t  else :\\n\\t    print('2')\\n\\t    return previous_line\\n\\tprint('3')\\n\\treturn 'Comp'\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_cover_type\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type@1\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Risk_Postcode", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"insured_address: {{ \\\\ Party Address \\\\}}\\n\\nExtract the post code from the insured_address. The post code is typically an alphanumeric value located at the end of the address.\\n\\nIf no post code is found, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Party_Address\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Party_Address\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_Accident_Damage", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Excess_Type_Accident_Damage\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"If excess values are given for each vehicle group, return the most common value as:\\nExcess Value: <value>\\n\\nIf excess values are given for different periods, return the most recent period and its value as:\\n<period range>:<value>\\n\\nIf a single excess value is extracted (not linked to group or period), return it directly as:\\nExcess Value: <value>\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Accident_Damage@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return the numerical value if present, otherwise return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Accident_Damage@1"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_Fire", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Excess_Type_Fire\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"If excess values are given for each vehicle group, return the most common value as:\\nExcess Value: <value>\\n\\nIf excess values are given for different periods, return the most recent period and its value as:\\n<period range>:<value>\\n\\nIf a single excess value is extracted (not linked to group or period), return it directly as:\\nExcess Value: <value>\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Fire@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return the numerical value if present, otherwise return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Fire@1"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_Theft", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Excess_Type_Theft\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"If excess values are given for each vehicle group, return the most common value as:\\nExcess Value: <value>\\n\\nIf excess values are given for different periods, return the most recent period and its value as:\\n<period range>:<value>\\n\\nIf a single excess value is extracted (not linked to group or period), return it directly as:\\nExcess Value: <value>\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Theft@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return the numerical value if present, otherwise return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_Theft@1"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Excess_Type_WS", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Excess_Type_WS\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"If excess values are given for each vehicle group, return the most common value as:\\nExcess Value: <value>\\n\\nIf excess values are given for different periods, return the most recent period and its value as:\\n<period range>:<value>\\n\\nIf a single excess value is extracted (not linked to group or period), return it directly as:\\nExcess Value: <value>\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_WS@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Just return the numerical value if present, otherwise return \\\"0\\\"\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Excess_Type_WS@1"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Agency_address", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Agency_address\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Clean and return **only the address details**. This means:\\n- Preserve the physical address lines.\\n- Format it as a single clean string separated by commas.\\n- If no valid address is present, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LINE", "data_type_options": ["TEXT"], "value": "Agency_address@0"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Effective_From", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/0182c889-86c6-494a-9d8f-018bf62925b3.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Incepts_On\",\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17109\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_effective_date(Incepts_On, context = {}, keys = {}, **kwargs):\\n\\tif Incepts_On:\\n\\t  return Incepts_On\\n\\telse:\\n\\t  return ''\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_effective_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Incepts_On\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Effective_To", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/1a7ac13a-713e-4590-affb-306b5b7c217d.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Expires_On\",\"data_type\":\"FIELD\",\"value\":\"Expires_On\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17110\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_expiry_date(Expires_On, context = {}, keys = {}, **kwargs):\\n\\tif Expires_On:\\n\\t  return Expires_On\\n\\telse:\\n\\t  return ''\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_expiry_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Expires_On\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Holding_Broker", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Holding_Broker\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/03044fce-dff9-4831-8523-fca98f39bc89.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Holding_Broker@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17111\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef return_holding_broker(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef extract_holding_broker_from_text(text: str) -> str:\\n\\t    brace_stack = []\\n\\t    start_idx = -1\\n\\t    end_idx = -1\\n\\t\\n\\t    # Step 1: Find the first complete {...} block\\n\\t    for i, ch in enumerate(text):\\n\\t        if ch == '{':\\n\\t            if not brace_stack:\\n\\t                start_idx = i\\n\\t            brace_stack.append('{')\\n\\t        elif ch == '}':\\n\\t            if brace_stack:\\n\\t                brace_stack.pop()\\n\\t                if not brace_stack:\\n\\t                    end_idx = i + 1  # Include the closing brace\\n\\t                    break\\n\\t\\n\\t    # Step 2: If we found a full JSON block\\n\\t    if start_idx != -1 and end_idx != -1:\\n\\t        json_str = text[start_idx:end_idx]\\n\\t\\n\\t        try:\\n\\t            data = json.loads(json_str)\\n\\t            holding_broker = data.get('holding_broker')  \\n\\t            return holding_broker\\n\\t        except:\\n\\t            return ''\\n\\t\\n\\t    return ''\\n\\t\\n\\treturn extract_holding_broker_from_text(previous_line)\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"return_holding_broker\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Holding_Broker@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Is_Holding_Broker", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"holding_broker: \\\\ Holding Broker \\\\\\nagency_name: \\\\ Agency Name \\\\\\n\\nComparare `holding_broker` and `agency_name` to determine if they represent the same organization.\\n\\nRules:\\n1. If `holding_broker` is an empty string, return: {\\\"holding_broker\\\": \\\"\\\", \\\"basis\\\": \\\"Holding broker is empty\\\"}.\\n\\n2. If the two names refer to the same or a similar entity \\u2014 for example, when they differ only by abbreviations, suffix variations (e.g., \\\"Ltd\\\" vs \\\"Limited\\\", \\\"Corp\\\" vs \\\"Corporation\\\"), or extra generic words (e.g., \\\"Group\\\", \\\"Financial\\\") \\u2014 return:\\n{\\\"holding_broker\\\": \\\"Yes\\\", \\\"basis\\\": \\\"Names are similar after normalization\\\"}\\n\\n3. If they are different entities, return: {\\\"holding_broker\\\": \\\"No\\\", \\\"basis\\\": \\\"Names are different after normalization\\\"}.\\n\\nSteps:\\n- Normalize both names: lowercase, remove legal suffixes (like ltd, corp, inc), and special characters.\\n- Then compare using fuzzy similarity or normalized string match.\\n\\nReturn output strictly in JSON format with keys:\\n- `holding_broker`: \\\"Yes\\\", \\\"No\\\", or \\\"\\\"\\n- `basis`: explanation of the decision\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Agency_Name\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"Holding_Broker\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Agency_Name\"}, {\"data_type\": \"FIELD\", \"value\": \"Holding_Broker\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/cf5c549d-3664-4dd0-a578-144b87c10f37.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Is_Holding_Broker@0\"},{\"name\":\"Holding_Broker\",\"data_type\":\"FIELD\",\"value\":\"Holding_Broker\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17112\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_return_holding_broker_value(previous_line, Holding_Broker, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\t\\n\\tprint(Holding_Broker)\\n\\tif Holding_Broker =='':\\n\\t  return ''\\n\\t# return previous_line\\n\\t\\n\\t\\n\\t\\n\\timport json\\n\\t\\n\\tdef extract_holding_broker_from_text(text: str) -> str:\\n\\t    brace_stack = []\\n\\t    start_idx = -1\\n\\t    end_idx = -1\\n\\t\\n\\t    # Step 1: Find the first complete {...} block\\n\\t    for i, ch in enumerate(text):\\n\\t        if ch == '{':\\n\\t            if not brace_stack:\\n\\t                start_idx = i\\n\\t            brace_stack.append('{')\\n\\t        elif ch == '}':\\n\\t            if brace_stack:\\n\\t                brace_stack.pop()\\n\\t                if not brace_stack:\\n\\t                    end_idx = i + 1  # Include the closing brace\\n\\t                    break\\n\\t\\n\\t    # Step 2: If we found a full JSON block\\n\\t    if start_idx != -1 and end_idx != -1:\\n\\t        json_str = text[start_idx:end_idx]\\n\\t\\n\\t        try:\\n\\t            data = json.loads(json_str)\\n\\t            holding_broker = data.get('holding_broker')  \\n\\t            print(holding_broker)\\n\\t            return holding_broker\\n\\t        except:\\n\\t            return ''\\n\\t\\n\\t    return ''\\n\\t\\n\\treturn extract_holding_broker_from_text(previous_line)\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_return_holding_broker_value\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Is_Holding_Broker@0\"},{\"data_type\":\"FIELD\",\"value\":\"Holding_Broker\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Todays_Date", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/9c2bd03c-1d35-4890-ac2a-530f8571ca51.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17115\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_todays_date(context = {}, keys = {}, **kwargs):\\n\\tfrom datetime import date\\n\\ttoday = str(date.today())\\n\\tprint(today)\\n\\treturn today\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_todays_date\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Driver_Details", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Driver_Details\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/8410296b-4bd9-429c-9e4c-dacaea295a83.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Driver_Details@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17113\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_cleaned_df(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json, re, ast\\n\\timport traceback\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\tcolumns_order = [\\n\\t         \\\"Driver Name\\\",\\n\\t         \\\"Driver DOB\\\",\\n\\t         \\\"Licence Date\\\",\\n\\t         \\\"Conviction Code\\\",\\n\\t          \\\"Driver Claims\\\"\\n\\t    ]\\n\\t\\n\\t\\n\\tdef get_df_with_regex_match(previous_line, columns_order):\\n\\t    parsed, inner_content = None, None\\n\\t    df = pd.DataFrame(columns=columns_order)\\n\\t    try:\\n\\t        match = re.search(r\\\"```(?:\\\\w+)?\\\\s*([\\\\s\\\\S]*?)\\\\s*```\\\", previous_line)\\n\\t        if match:\\n\\t            inner_content = match.group(1).strip()\\n\\t    \\n\\t            # Step 2: Try to parse it as JSON\\n\\t            try:\\n\\t                parsed = json.loads(inner_content)\\n\\t                print(parsed)\\n\\t            except json.JSONDecodeError:\\n\\t                # If JSON parsing fails, fallback to literal_eval\\n\\t                try:\\n\\t                    parsed = ast.literal_eval(inner_content)\\n\\t                except Exception as e:\\n\\t                    print(\\\"Parsing failed:\\\", e)\\n\\t                    parsed = None\\n\\t          \\n\\t        if parsed:\\n\\t            df = convert_to_dataframe(parsed)\\n\\t            return True, df \\n\\t        else:\\n\\t            return False, df \\n\\t    except Exception as e:\\n\\t      return False, pd.DataFrame(columns=columns_order)\\n\\t\\n\\tdef parse_markdown_format(previous_line, columns_order):\\n\\t    try:\\n\\t        lines = [line.strip() for line in previous_line.strip().split('\\\\n') if line.strip().startswith('|') and '---' not in line]\\n\\t        list_of_lists = [ [cell.strip() for cell in line.strip('|').split('|')] for line in lines ]\\n\\t        if list_of_lists:\\n\\t            df = convert_to_dataframe(list_of_lists)\\n\\t            return True, df\\n\\t        else:\\n\\t            return False, pd.DataFrame(columns=columns_order)\\n\\t    except:\\n\\t        return False, pd.DataFrame(columns=columns_order)\\n\\t\\n\\ttry:\\n\\t    \\n\\t    df = pd.DataFrame(columns=columns_order)\\n\\t    \\n\\t    flg, df = get_df_with_regex_match(previous_line, columns_order)\\n\\t    \\n\\t    if not flg:\\n\\t        flg, df = parse_markdown_format(previous_line, columns_order)\\n\\t\\n\\t    if not flg:\\n\\t      try:\\n\\t          data = json.loads(previous_line)\\n\\t          df = convert_to_dataframe(data)\\n\\t      except Exception as e:\\n\\t          data = ast.literal_eval(previous_line)\\n\\t          df = convert_to_dataframe(data)\\n\\t\\n\\t    \\n\\t    df.fillna(\\\"\\\", inplace=True)\\n\\t    \\n\\t    if len(df.columns.tolist()) > 0:\\n\\t        # df[\\\"Conviction Code\\\"] = df[\\\"Conviction Code\\\"].replace([\\\"No\\\", \\\"no\\\"], \\\"\\\")\\n\\t        df[\\\"Conviction Code\\\"] = df[\\\"Conviction Code\\\"].astype(str).str.strip().replace([\\\"no\\\", \\\"No\\\"], \\\"\\\")\\n\\t        df[\\\"Licence Date\\\"] = df[\\\"Licence Date\\\"].apply(\\n\\t    lambda x: f\\\"01/01/{x.strip()}\\\" if re.fullmatch(r\\\"\\\\s*(19|20)\\\\d{2}\\\\s*\\\", str(x)) else x)\\n\\t        df.replace(to_replace=[\\\"N/A\\\", \\\"null\\\"], value=\\\"\\\", inplace=True)\\n\\t        df = df[columns_order]\\n\\t        df = [df.columns.tolist()] + df.values.tolist()        \\n\\t        return df\\n\\t    else:\\n\\t        return  [columns_order]\\n\\t      \\n\\t      \\n\\texcept Exception as e:\\n\\t    return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_cleaned_df\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Driver_Details@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Driver_Name_And_Driver_DOB", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/f6e45c6b-7e14-4576-8264-8ed8f49e8278.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Driver_Details\",\"data_type\":\"FIELD\",\"value\":\"Driver_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17128\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_driver_name_and_dob(Driver_Details, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assumed as header\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t\\n\\t\\n\\tcolumns = ['Driver Name', 'Driver DOB']\\n\\ttry:\\n\\t  table = json.loads(Driver_Details)\\n\\t  df = convert_to_dataframe(table)\\n\\t  return [columns] + df[columns].values.tolist()\\n\\texcept:\\n\\t  return Driver_Details\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_driver_name_and_dob\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Driver_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Driver_Age", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are given the  \\\\ Driver Name And Driver DOB \\\\ table containing two columns: 'Driver Name' and 'Driver DOB'.\\n\\nYour task is to calculate the age of each driver using the Driver DOB and \\\\ Todays Date \\\\\\n\\nThe age should be calculated in complete years.\\nIf Driver DOB is missing, empty, or invalid, the corresponding Age must be left blank (empty string).\\n\\nReturn the output strictly as a table with exactly two columns:\\nOutput Format:\\n[[\\\"Driver Name\\\", \\\"Age\\\"],[],[]]\\nStrictly return a **table formatted output** in a structured list of list format as specified above.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Todays_Date\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"Driver_Name_And_Driver_DOB\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Todays_Date\"}, {\"data_type\": \"FIELD\", \"value\": \"Driver_Name_And_Driver_DOB\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/dccd92d3-5547-47c2-8bd5-b2ab25535090.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Driver_Age@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17114\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef refine_result(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\tcolumns = ['Driver Name', 'Age']\\n\\t\\n\\ttry:\\n\\t  table = json.loads(previous_line)\\n\\t  df = convert_to_dataframe(table)\\n\\t  return [columns] + df[columns].values.tolist()\\n\\t  \\n\\texcept Exception as e:\\n\\t  print(e)\\n\\t  return [columns]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"refine_result\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Driver_Age@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Driver_Name_And_Licence_Date_Info", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/19ff786d-3fe2-4acc-9898-81d4eba68895.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Driver_Details\",\"data_type\":\"FIELD\",\"value\":\"Driver_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17129\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_licence_tenure_and_driver_name(Driver_Details, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assumed as header\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t\\n\\t\\n\\tcolumns = ['Driver Name', 'Licence Date']\\n\\ttry:\\n\\t  table = json.loads(Driver_Details)\\n\\t  df = convert_to_dataframe(table)\\n\\t  return [columns] + df[columns].values.tolist()\\n\\texcept:\\n\\t  return Driver_Details\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_licence_tenure_and_driver_name\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Driver_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Driver_Licence_Tenure", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are given the \\\\ Driver Name And Licence Date Info \\\\ table containing two columns: 'Driver Name' and 'Driver Licence date'.\\n\\nYour task is to calculate the Licence tenure of each driver using the \\\"Licence date\\\" and \\\"\\\\ Todays Date \\\\\\\"\\n\\nThe Licence Tenure should be calculated in complete years.\\nIf Licence date is missing, empty, or invalid, the corresponding Licence Tenure must be left blank (empty string).\\n\\nReturn the output strictly as a table with exactly two columns:\\nOutput Format:\\n[[\\\"Driver Name\\\", \\\"Licence Tenure\\\"],[],[]]\\nStrictly return a **table formatted output** in a structured list of list format as specified above.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Todays_Date\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"Driver_Name_And_Licence_Date_Info\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Todays_Date\"}, {\"data_type\": \"FIELD\", \"value\": \"Driver_Name_And_Licence_Date_Info\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/df889ffe-9806-4d29-8914-05a986f84061.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Driver_Licence_Tenure@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17116\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\tcolumns = ['Driver Name', 'Licence Tenure']\\n\\t\\n\\ttry:\\n\\t  table = json.loads(previous_line)\\n\\t  df = convert_to_dataframe(table)\\n\\t  try:\\n\\t    df['Licence Tenure'] = df['Licence Tenure'].apply(lambda x: '5+' if x > 5 else x)\\n\\t  except:\\n\\t    df['Licence Tenure'] = df['Licence Tenure'].apply(lambda x: '5+' if str(x).replace('.', '', 1).isdigit() and float(x) > 5 else x)\\n\\t  print(df)\\n\\t  return [columns] + df[columns].values.tolist()\\n\\t  \\n\\texcept Exception as e:\\n\\t  print(e)\\n\\t  return [columns]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Driver_Licence_Tenure@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Driver_Merged_Data", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/b9e26847-7ac1-4ffa-b865-008cc23ff129.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Driver_Age\",\"data_type\":\"FIELD\",\"value\":\"Driver_Age\"},{\"name\":\"Driver_Licence_Tenure\",\"data_type\":\"FIELD\",\"value\":\"Driver_Licence_Tenure\"},{\"name\":\"Driver_Details\",\"data_type\":\"FIELD\",\"value\":\"Driver_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17118\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef merge_driver_age_licence_tenure(Driver_Age, Driver_Licence_Tenure, Driver_Details, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assumed as header\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t\\n\\ttry:\\n\\t  print(\\\"yes\\\", Driver_Licence_Tenure)\\n\\t  merged_df = []\\n\\t\\n\\t  try:\\n\\t      Driver_Details = json.loads(Driver_Details)\\n\\t      Driver_Details = convert_to_dataframe(Driver_Details)\\n\\t      merged_df = Driver_Details.copy()\\n\\t  except Exception as e:\\n\\t      \\n\\t      print(\\\"no driver details \\\", e)\\n\\t\\n\\t  # try:\\n\\t  #     Conviction_Code = json.loads(Conviction_Code)\\n\\t  #     Conviction_Code = convert_to_dataframe(Conviction_Code)\\n\\t  #     print(Conviction_Code)\\n\\t  # except Exception as e:\\n\\t  #     print(\\\"no driver details \\\", e)\\n\\t\\n\\t  try:\\n\\t      Driver_Age = json.loads(Driver_Age)\\n\\t      Driver_Age = convert_to_dataframe(Driver_Age)\\n\\t  except Exception as e:\\n\\t      print(\\\"no driver conviction details \\\", e)\\n\\t\\n\\t  try:\\n\\t      Driver_Licence_Tenure = json.loads(Driver_Licence_Tenure)\\n\\t      Driver_Licence_Tenure = convert_to_dataframe(Driver_Licence_Tenure)\\n\\t     \\n\\t  except Exception as e:\\n\\t      print(\\\"no driver licence details \\\", e)\\n\\t\\n\\t  try:\\n\\t      merged_df = pd.merge(Driver_Details, Driver_Age,  on='Driver Name', how='outer')\\n\\t  except Exception as e:\\n\\t      merged_df = Driver_Details.copy()\\n\\t      print(\\\"merging issue  \\\", e)\\n\\t\\n\\t  try:\\n\\t      \\n\\t      merged_df = pd.merge(merged_df, Driver_Licence_Tenure,  on='Driver Name', how='outer')\\n\\t  except Exception as e:\\n\\t      print(\\\"merging issue  \\\", e)\\n\\t\\n\\t  # try:\\n\\t  #     # print(\\\"before\\\", merged_df.columns)\\n\\t  #     if Conviction_Code.empty:\\n\\t  #       print(\\\"yes\\\")\\n\\t  #     else:\\n\\t  #       merged_df.drop(columns=['Conviction Code'], inplace=True)\\n\\t  #       merged_df = pd.merge(merged_df, Conviction_Code, on='Driver Name', how='outer')\\n\\t  #     # print(\\\"after\\\", merged_df.columns)\\n\\t  # except Exception as e:\\n\\t\\n\\t      # merged_df_all.fillna('', inplace=True)\\n\\t      # merged_Df = [merged_df_all.columns.tolist()] + merged_df_all.values.tolist()\\n\\t      print(\\\"merging issue in conviction details\\\", e)\\n\\t      # return merged_f\\n\\t      \\n\\t\\n\\t  merged_df.fillna('', inplace=True)\\n\\t\\n\\t  if len(merged_df.columns.tolist()) > 0:\\n\\t      merged_df = [merged_df.columns.tolist()] + merged_df.values.tolist()\\n\\t      return merged_df\\n\\t  else:\\n\\t      return [[\\\"Driver Name\\\",\\t\\\"Driver DOB\\\",\\t\\\"Licence Date\\\",\\t\\\"Age\\\",\\t\\\"Licence Tenure\\\",\\t\\\"Conviction Code\\\"]]\\n\\t\\n\\texcept:\\n\\t  return [[\\\"Driver Name\\\",\\t\\\"Driver DOB\\\",\\t\\\"Licence Date\\\",\\t\\\"Age\\\",\\t\\\"Licence Tenure\\\",\\t\\\"Conviction Code\\\"]]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"merge_driver_age_licence_tenure\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Driver_Age\"},{\"data_type\":\"FIELD\",\"value\":\"Driver_Licence_Tenure\"},{\"data_type\":\"FIELD\",\"value\":\"Driver_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Driver_Type", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/aad6e786-106b-4f9f-8db7-6c02f28c2500.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Driver_Merged_Data\",\"data_type\":\"FIELD\",\"value\":\"Driver_Merged_Data\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17119\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_driver_type(Driver_Merged_Data, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef classify_driver(row):\\n\\t    try:\\n\\t        age = int(row[\\\"Age\\\"])\\n\\t        conviction_code = str(row[\\\"Conviction Code\\\"]).strip()\\n\\t        \\n\\t        if age < 25:\\n\\t            return \\\"Young Driver\\\"\\n\\t        elif age >= 25 and str(conviction_code).strip() not in [\\\"\\\", None,\\\"N/A\\\",\\\"null\\\"]:\\n\\t            return \\\"Convicted Driver\\\"\\n\\t        else:\\n\\t            return \\\"\\\"\\n\\t    except:\\n\\t        return \\\"\\\"  # Fallback in case of data issues\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\tcolumns = ['Driver Name', 'Driver Type']\\n\\t\\n\\ttry:\\n\\t  table = json.loads(Driver_Merged_Data)\\n\\t  df = convert_to_dataframe(table)\\n\\t  df[\\\"Driver Type\\\"] = df.apply(classify_driver, axis=1)\\n\\t  return [columns] + df[columns].values.tolist()\\n\\t  \\n\\texcept Exception as e:\\n\\t  print(e)\\n\\t  return [columns]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_driver_type\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Driver_Merged_Data\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Driver_Party_Table", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/a6ee1af0-9b2b-426e-99a7-b48159dfe31e.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Driver_Merged_Data\",\"data_type\":\"FIELD\",\"value\":\"Driver_Merged_Data\"},{\"name\":\"Driver_Type\",\"data_type\":\"FIELD\",\"value\":\"Driver_Type\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17126\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef form_driver_party_table(Driver_Merged_Data, Driver_Type, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\timport numpy as np\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assumed as header\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t\\n\\tcolumns_order = [ 'Driver Name' , 'Driver D.O.B', \\\\\\n\\t                        'Drivers Licence - Date obtained', \\\\\\n\\t                        'Driver: Years Appropriate Licence Held', \\\\\\n\\t                        'Conviction Details' , 'Driver Type', 'Driver Claims']\\n\\t\\n\\ttry:\\n\\t  Driver_Data_Merged = json.loads(Driver_Merged_Data)\\n\\t  Drive_Type = json.loads(Driver_Type)\\n\\t\\n\\t  merged_df = []\\n\\t\\n\\t  try:\\n\\t      Driver_Data_Merged = convert_to_dataframe(Driver_Data_Merged)\\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t  try:\\n\\t      Drive_Type = convert_to_dataframe(Drive_Type)\\n\\t  except Exception as e:\\n\\t      merged_df = Driver_Data_Merged.copy()\\n\\t      print(e)\\n\\t\\n\\t  # print(Driver_Data_Merged.columns)\\n\\t\\n\\t  try:\\n\\t      merged_df = pd.merge(Driver_Data_Merged, Drive_Type,  on='Driver Name', how='outer')\\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t  \\n\\t  try:\\n\\t      \\n\\t      rename_dict = {\\n\\t        'Driver Name': 'Driver Name',\\n\\t        'Driver DOB' : 'Driver D.O.B',\\n\\t        'Licence Date': 'Drivers Licence - Date obtained',\\n\\t        'Licence Tenure':'Driver: Years Appropriate Licence Held',\\n\\t        'Conviction Code': 'Conviction Details',\\n\\t        'Driver Type': 'Driver Type'\\n\\t      }\\n\\t\\n\\t      safe_rename_dict = {k: v for k, v in rename_dict.items() if k in merged_df.columns}\\n\\t\\n\\t      merged_df.rename(columns=safe_rename_dict, inplace=True)\\n\\t      \\n\\t      columns_order = [ 'Driver Name' , 'Driver D.O.B', \\\\\\n\\t                        'Drivers Licence - Date obtained', \\\\\\n\\t                        'Driver: Years Appropriate Licence Held', \\\\\\n\\t                        'Conviction Details' , 'Driver Type', 'Driver Claims']\\n\\t\\n\\t      for col in columns_order:\\n\\t          if col not in merged_df.columns:\\n\\t              merged_df[col] = ''\\n\\t     \\n\\t      existing_columns = [col for col in columns_order if col in merged_df.columns]           \\n\\t                  \\n\\t      merged_df.replace('N/A', '', inplace=True)\\n\\t      merged_df.replace('null', '', inplace=True)\\n\\t      merged_df = merged_df.fillna('')\\n\\t      merged_df = merged_df[existing_columns]\\n\\t  \\n\\t  except Exception as e:\\n\\t      print(\\\"Exception in renaming \\\", e)\\n\\t      if len(merged_df.columns.tolist()) > 0:\\n\\t          merged_df = [merged_df.columns.tolist()] + merged_df.values.tolist()\\n\\t          return merged_df\\n\\t      else:\\n\\t          return [columns_order]\\n\\t  \\n\\t  if len(merged_df.columns.tolist()) > 0:\\n\\t\\n\\t      merged_df = merged_df.replace({None: np.nan, \\\"\\\": np.nan})\\n\\t      merged_df = merged_df.dropna(how='all')\\n\\t      merged_df = merged_df.where(pd.notna(merged_df), \\\"\\\")\\n\\t      merged_df = [merged_df.columns.tolist()] + merged_df.values.tolist()\\n\\t      return merged_df\\n\\t  else:\\n\\t      return [columns_order]\\n\\texcept:\\n\\t  return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"form_driver_party_table\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Driver_Merged_Data\"},{\"data_type\":\"FIELD\",\"value\":\"Driver_Type\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Vehicle_Category_Info_and_Registration_Numbers", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Vehicle_Category_Info_and_Registration_Numbers\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Vehicle_Registration_Numbers_And_Cover_Basis", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Extract a table with two columns: ['Vehicle Registration', 'Cover Basis'] from \\\\ Vehicle Category Info and Registration Numbers \\\\\\n\\t1\\tFind valid vehicle registration numbers and their cover types.\\n\\t2\\tConvert all vehicle registration numbers to UPPERCASE. Keep Cover Basis as is.\\n\\t3\\tIf cover type is missing for a valid reg number, use an empty string (\\\"\\\").\\n\\t4\\tRemove rows where vehicle registration is: \\\"To be confirmed (TBC)\\\", \\\"TO BE ADVISED from\\\", \\\"UNREG\\\" or Similar meaning, or not a vehicle registration number,  \\\"N/A\\\", Empty (\\\"\\\").\\n\\t5\\tIf 'Cover Basis' is \\\"N/A\\\", replace it with an empty string (\\\"\\\").\\nReturn format:\\u2028[[\\\"Vehicle Registration\\\", \\\"Cover Basis\\\"], [\\\"AB12 XYZ\\\", \\\"TPO\\\"]]\\u2028If no valid rows, return [] only.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Vehicle_Category_Info_and_Registration_Numbers\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Vehicle_Category_Info_and_Registration_Numbers\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/cf069a5b-04a9-4493-81de-749c224bfb74.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Vehicle_Registration_Numbers_And_Cover_Basis@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17117\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef clean_llm_result(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\tcolumns_order = ['Vehicle Registration', 'Cover Basis']\\n\\ttry:\\n\\t  previous_line = json.loads(previous_line)\\n\\t  if previous_line:\\n\\t      df = convert_to_dataframe(previous_line)\\n\\t      if len(df.columns.tolist()) > 0:\\n\\t          return [df.columns.tolist()] + df.values.tolist()\\n\\t      else:\\n\\t        return [columns_order]\\n\\t  else:\\n\\t      return [columns_order]\\n\\texcept:\\n\\t  return [columns_order]\\n\\t  \""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"clean_llm_result\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Vehicle_Registration_Numbers_And_Cover_Basis@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Unique__Values__Cover__Basis", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/2ac46dc8-de85-467a-b112-bfa25e201f9a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Vehicle_Registration_Numbers_And_Cover_Basis\",\"data_type\":\"FIELD\",\"value\":\"Vehicle_Registration_Numbers_And_Cover_Basis\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17120\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_unique_values_from_cover_basis_col(Vehicle_Registration_Numbers_And_Cover_Basis, context = {}, keys = {}, **kwargs):\\n\\t# # Import Python packages\\n\\t# import json\\n\\t\\n\\t# list_of_dct = json.loads(Vehicle_Registration_Numbers_And_Cover_Basis)\\n\\t# unique_cover_basis_set = set(item['Cover Basis'] for item in list_of_dct)\\n\\t# unique_cover_basis_list = list(unique_cover_basis_set)\\n\\t# unique_cover_basis_list_without_na = [item for item in unique_cover_basis_list if item != 'N/A']\\n\\t# return unique_cover_basis_list_without_na\\n\\t\\n\\t# # Import Python packages\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\t# list_of_dct = json.loads(Vehicle_Registration_Numbers_And_Cover_Basis)\\n\\t# # print(list_of_dct)\\n\\t\\n\\t# try:\\n\\t#     unique_cover_basis_set = set(item['Cover Vehicle'] for item in list_of_dct)\\n\\t#     unique_cover_basis_list = list(unique_cover_basis_set)\\n\\t#     unique_cover_basis_list_without_na = [item for item in unique_cover_basis_list if item != 'N/A']\\n\\t#     return unique_cover_basis_list_without_na\\n\\t\\n\\t# except Exception as e:\\n\\t#     print(\\\"in ex\\\", e)\\n\\t#     # print(type(list_of_dct))\\n\\t#     unique_first_col = list(set(row[0] for row in list_of_dct))\\n\\t#     if 'Cover Vehicle' in unique_first_col:\\n\\t#         unique_first_col.remove('Cover Vehicle')\\n\\t\\n\\t#     return unique_first_col\\n\\t    \\n\\t\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t\\n\\tVehicle_Registration_Numbers_And_Cover_Basis = json.loads(Vehicle_Registration_Numbers_And_Cover_Basis)\\n\\t\\n\\tif Vehicle_Registration_Numbers_And_Cover_Basis in ['',None,'N/A', '[]', []]:\\n\\t  return \\\"None\\\"\\n\\t\\n\\tVehicle_Registration_Numbers_And_Cover_Basis = convert_to_dataframe(Vehicle_Registration_Numbers_And_Cover_Basis)\\n\\tunique_vals = Vehicle_Registration_Numbers_And_Cover_Basis['Cover Basis'].unique().tolist()\\n\\tunique_vals = [each_val for each_val in unique_vals if each_val not in ['N/A', \\\"\\\", None, \\\"null\\\"]]\\n\\tif unique_vals:\\n\\t    return unique_vals\\n\\telse:\\n\\t    return \\\"None\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_unique_values_from_cover_basis_col\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Vehicle_Registration_Numbers_And_Cover_Basis\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Cover_Basis_Mapping", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"For each value in the list {{\\\\ Unique_Values_Cover_Basis \\\\}}, generate a dictionary mapping where each value is normalised to one of the standard cover basis categories. You may receive values in full form (e.g., \\\"Third Party, Fire and Theft\\\"), as acronyms (e.g., \\\"TPFT\\\", \\\"TPO\\\", \\\"Comp\\\"), or as variations of known phrases (e.g., \\\"Comprehensive Cover\\\", \\\"Laid Up - Fire &amp; Theft\\\"). Use the following mapping rules: \\\"Third Party, Fire and Theft\\\" or similar \\u2192 TPFT, \\\"Comprehensive\\\" or similar \\u2192 Comp, \\\"Third Party Only\\\" or similar \\u2192 TPO, \\\"Laid Up (Accidental Damage, Fire, and Theft)\\\" or similar \\u2192 Laid Up (ADFT), \\\"Laid Up (Fire and Theft)\\\" , LUFT or similar \\u2192 Laid up (FT Only). Direct acronyms like TPO, TPFT, Comp should map to themselves exclude LUFT, Since LUFT -&gt; Laid up (FT Only). If a value is irrelevant or does not match any known category, map it to an empty string \\\"\\\" Return the output as a dictionary like this: {\\u201coriginal value\\u201d: mapped category, }\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Unique__Values__Cover__Basis\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Unique__Values__Cover__Basis\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/779eba7d-8f72-474b-831c-a54526201e57.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Cover_Basis_Mapping@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17121\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef refine_result(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\ttry:\\n\\t    if previous_line not in [\\\"\\\", None, \\\"[]\\\", \\\" \\\", \\\"N/A\\\", \\\"null\\\"]:\\n\\t        result = previous_line\\n\\t    else:\\n\\t        result = \\\"{}\\\"\\n\\t\\n\\texcept Exception as e:\\n\\t    print(e)\\n\\t    result = \\\"{}\\\"\\n\\t\\n\\treturn result  # Ensure this is inside a function\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"refine_result\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Cover_Basis_Mapping@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Vehicle_Schedule_Table", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/49a293e1-4694-44ff-87b0-52eaa930a355.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Vehicle_Registration_Numbers_And_Cover_Basis\",\"data_type\":\"FIELD\",\"value\":\"Vehicle_Registration_Numbers_And_Cover_Basis\"},{\"name\":\"Unique__Values__Cover__Basis\",\"data_type\":\"FIELD\",\"value\":\"Unique__Values__Cover__Basis\"},{\"name\":\"Cover_Basis_Mapping\",\"data_type\":\"FIELD\",\"value\":\"Cover_Basis_Mapping\"},{\"name\":\"Effective_From\",\"data_type\":\"FIELD\",\"value\":\"Effective_From\"},{\"name\":\"Effective_To\",\"data_type\":\"FIELD\",\"value\":\"Effective_To\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17122\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef prepare_vehicle_schedule_table(Vehicle_Registration_Numbers_And_Cover_Basis, Unique__Values__Cover__Basis, Cover_Basis_Mapping, Effective_From, Effective_To, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\timport numpy as np\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t\\n\\tcolumns_order = ['Effective From', \\\\\\n\\t                    'Effective To', \\\\\\n\\t                    'Vehicle Registration', \\\\\\n\\t                    'Cover - Vehicle', \\\\\\n\\t                    'Cover - Vehicle - Mapped']\\n\\t\\n\\tif Vehicle_Registration_Numbers_And_Cover_Basis == \\\"[]\\\":\\n\\t  return [columns_order]\\n\\t\\n\\ttry:\\n\\t    vehicle_num_and_cover_type_table = json.loads(Vehicle_Registration_Numbers_And_Cover_Basis)\\n\\t    vehicle_num_and_cover_type_table_df = convert_to_dataframe(vehicle_num_and_cover_type_table)\\n\\t\\n\\t\\n\\t    vehicle_num_and_cover_type_table_df.rename(columns={\\n\\t        'Cover Basis' : 'Cover - Vehicle',\\n\\t        'Vehicle Registration Number' : 'Vehicle Registration' \\n\\t      }, inplace=True)\\n\\t\\n\\t    try:\\n\\t        Unique__Values__Cover__Basis = json.loads(Unique__Values__Cover__Basis)\\n\\t    except:\\n\\t        Unique__Values__Cover__Basis = eval(Unique__Values__Cover__Basis)\\n\\t\\n\\t\\n\\t    if Unique__Values__Cover__Basis:\\n\\t      try:\\n\\t        Cover_Basis_Mapping_dct = json.loads(Cover_Basis_Mapping)\\n\\t        vehicle_num_and_cover_type_table_df['Cover - Vehicle - Mapped'] = vehicle_num_and_cover_type_table_df['Cover - Vehicle'].replace(Cover_Basis_Mapping_dct)\\n\\t      except:\\n\\t        vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df.copy()\\n\\t\\n\\t    vehicle_num_and_cover_type_table_df['Effective From'] = Effective_From\\n\\t    try:\\n\\t      vehicle_num_and_cover_type_table_df['Effective To'] = Effective_To\\n\\t    except:\\n\\t      vehicle_num_and_cover_type_table_df['Effective To'] = ''\\n\\t\\n\\t    for col in columns_order:\\n\\t        if col not in vehicle_num_and_cover_type_table_df.columns:\\n\\t            vehicle_num_and_cover_type_table_df[col] = ''\\n\\t\\n\\t    \\n\\t    invalid_values = [\\\"\\\", \\\"n/a\\\", \\\"null\\\", \\\"none\\\", \\\"nan\\\"]\\n\\t    vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df[~vehicle_num_and_cover_type_table_df[\\\"Vehicle Registration\\\"].astype(str).str.strip().str.lower().isin([str(i).lower() for i in invalid_values])]\\n\\t\\n\\t    # if vehicle_num_and_cover_type_table_df.empty and ((Effective_From not in ['','N/A']) or (Effective_To not in ['','N/A'])):\\n\\t    #   vehicle_num_and_cover_type_table_df.loc[0] = {'Effective From': Effective_From, 'Effective To': Effective_To}\\n\\t\\n\\t    vehicle_num_and_cover_type_table_df.fillna('', inplace=True)\\n\\t    \\n\\t    if len(vehicle_num_and_cover_type_table_df.columns.tolist()) > 0:\\n\\t        vehicle_num_and_cover_type_table_df = vehicle_num_and_cover_type_table_df[columns_order]\\n\\t        vehicle_num_and_cover_type_table_df = [vehicle_num_and_cover_type_table_df.columns.tolist()] + vehicle_num_and_cover_type_table_df.values.tolist()\\n\\t        return vehicle_num_and_cover_type_table_df\\n\\t    else:\\n\\t        return [columns_order]\\n\\texcept:\\n\\t    return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"prepare_vehicle_schedule_table\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Vehicle_Registration_Numbers_And_Cover_Basis\"},{\"data_type\":\"FIELD\",\"value\":\"Unique__Values__Cover__Basis\"},{\"data_type\":\"FIELD\",\"value\":\"Cover_Basis_Mapping\"},{\"data_type\":\"FIELD\",\"value\":\"Effective_From\"},{\"data_type\":\"FIELD\",\"value\":\"Effective_To\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Number_of_Notifiable_Vehicles", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/fe1f071f-6e83-44f5-b5c9-e772c187a1f4.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Vehicle_Schedule_Table\",\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Table\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17123\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_number_of_notifiable_vehicles_count(Vehicle_Schedule_Table, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame( data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\ttry:\\n\\t  if Vehicle_Schedule_Table == \\\"[]\\\" or Vehicle_Schedule_Table == 'n/a':\\n\\t    return \\\"0\\\"\\n\\t  else:\\n\\t    Vehicle_Schedule_Table = json.loads(Vehicle_Schedule_Table)\\n\\t    Vehicle_Schedule_Table = convert_to_dataframe(Vehicle_Schedule_Table)\\n\\t    return len(Vehicle_Schedule_Table['Vehicle Registration'])\\n\\texcept:\\n\\t  return \\\"0\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_number_of_notifiable_vehicles_count\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Vehicle_Schedule_Table\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Offering_Type_BP", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/2107d0d7-54a4-4668-8699-67ebac36fc4c.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Target_Price\",\"data_type\":\"FIELD\",\"value\":\"Target_Price\"},{\"name\":\"Number_of_Notifiable_Vehicles\",\"data_type\":\"FIELD\",\"value\":\"Number_of_Notifiable_Vehicles\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17124\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_offering_type(Target_Price, Number_of_Notifiable_Vehicles, context = {}, keys = {}, **kwargs):\\n\\t# def clean_premium(premium_value):\\n\\t\\n\\t#     if premium_value is None:\\n\\t#         return None\\n\\t\\n\\t#     if isinstance(premium_value, (int, float)):\\n\\t#         return float(premium_value)\\n\\t\\n\\t#     try:\\n\\t#         # Remove currency symbols, commas, and whitespace\\n\\t#         cleaned = re.sub(r\\\"[\\u00a3\\u20ac,]\\\", \\\"\\\", premium_value).strip()\\n\\t#         return float(cleaned)\\n\\t#     except Exception:\\n\\t#         return None\\n\\t\\n\\t# def determine_offering_type(vehicle_count, premium_cleaned=None):\\n\\t\\n\\t#     if vehicle_count is None:\\n\\t#         return \\\"Unknown\\\"\\n\\t#     if vehicle_count <= 19:\\n\\t#         if premium_cleaned is None or premium_cleaned < 10000:\\n\\t#             return \\\"Mini Fleet\\\"\\n\\t#     elif 20 <= vehicle_count <= 149:\\n\\t#         if premium_cleaned is None or 10000 <= premium_cleaned < 250000:\\n\\t#             return \\\"Vantage Fleet\\\"\\n\\t#     elif vehicle_count >= 150:\\n\\t#         if premium_cleaned is None or premium_cleaned >= 250000:\\n\\t#             return \\\"Mid Corp\\\"\\n\\t\\n\\t#     return \\\"Unknown\\\"\\n\\t\\n\\t# try:\\n\\t#   Number_of_Notifiable_Vehicles = int(Number_of_Notifiable_Vehicles)\\n\\t# except:\\n\\t#   return \\\"\\\"\\n\\t\\n\\t# try:\\n\\t#   premium_cleaned = clean_premium(Target_Price)\\n\\t#   print(premium_cleaned)\\n\\t# except:\\n\\t#   premium_cleaned = None\\n\\t\\n\\t# offering_type = determine_offering_type( Number_of_Notifiable_Vehicles, premium_cleaned )\\n\\t# # print(offering_type)\\n\\t# return offering_type\\n\\t\\n\\t\\n\\t\\n\\tdef clean_premium(premium_value):\\n\\t    if premium_value is None:\\n\\t        return None\\n\\t    if isinstance(premium_value, (int, float)):\\n\\t        return float(premium_value)\\n\\t    try:\\n\\t        # Remove currency symbols, commas, and whitespace\\n\\t        # print(premium_value)\\n\\t        # cleaned = re.sub(r\\\"[\\u00a3\\u20ac,]\\\", \\\"\\\", premium_value).strip()\\n\\t        cleaned = premium_value.replace('\\u00a3','').replace('\\u20ac','').replace(' ', '').replace(',', '').strip()\\n\\t        print(cleaned)\\n\\t        return float(cleaned)\\n\\t    except Exception:\\n\\t        return None\\n\\t\\n\\tdef determine_offering_type(vehicle_count, premium_cleaned=None):    \\n\\t\\n\\t    if vehicle_count == 0:\\n\\t        if premium_cleaned is None or premium_cleaned < 10000:\\n\\t            return \\\"Mini Fleet\\\"\\n\\t        \\n\\t        elif 10000 <= premium_cleaned < 250000:\\n\\t            return \\\"Vantage Fleet\\\"\\n\\t        \\n\\t        elif premium_cleaned >= 250000:\\n\\t            return \\\"Mid Corp\\\"\\n\\t\\n\\t    if vehicle_count <= 19:\\n\\t            return \\\"Mini Fleet\\\"\\n\\t            \\n\\t    elif 20 <= vehicle_count <= 149:\\n\\t            return \\\"Vantage Fleet\\\"\\n\\t        \\n\\t    elif vehicle_count >= 150:\\n\\t            return \\\"Mid Corp\\\"\\n\\t\\n\\t\\n\\ttry:\\n\\t    Number_of_Notifiable_Vehicles = int(Number_of_Notifiable_Vehicles)\\n\\texcept:\\n\\t    Number_of_Notifiable_Vehicles = 0\\n\\t\\n\\ttry:\\n\\t    premium_cleaned = clean_premium(Target_Price)\\n\\texcept:\\n\\t    premium_cleaned = None\\n\\t\\n\\toffering_type = determine_offering_type( Number_of_Notifiable_Vehicles, premium_cleaned )\\n\\treturn offering_type\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_offering_type\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Target_Price\"},{\"data_type\":\"FIELD\",\"value\":\"Number_of_Notifiable_Vehicles\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Agency_Contact", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Agency_Contact\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Transaction_Type", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/c9b628be-d85a-482f-ab1f-34b4b50f9493.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17125\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_transaction_type(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"New Business\\\"\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_transaction_type\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Business_Category", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/55ec4135-5714-49d3-bfe9-0d3dfe969918.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17127\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_business_category(context = {}, keys = {}, **kwargs):\\n\\treturn \\\"Mid Market\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_business_category\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Main_Cover_Type_Mapped", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"Main_cover_type : {{ \\\\ Main Cover Type \\\\ }}\\n\\nValid Normalized Types:\\n\\n1) COMP \\u2192 includes: \\\"Comp\\\", \\\"COMP\\\", \\\"Comprehensive\\\", \\\"Comprehensive Cover\\\"\\n\\n2) TPFT \\u2192 includes: \\\"TPFT\\\", \\\"Third Party Fire and Theft\\\", \\\"Third Party, Fire and Theft\\\", \\\"Third Party Fire &amp; Theft\\\"\\n\\n3) TPO \\u2192 includes: \\\"TPO\\\", \\\"Third Party Only\\\", \\\"Third Party\\\"\\n\\n4) Laid up (ADFT) \\u2192 includes: \\\"Laid Up (Accidental Damage, Fire, and Theft)\\\", \\\"Laid Up ADFT\\\", \\\"Laid-Up ADFT\\\"\\n\\n5) Laid up (FT Only) \\u2192 includes: \\\"Laid Up (Fire and Theft)\\\", \\\"LUFT\\\", \\\"Laid-Up FT\\\"\\n\\nInstructions:\\n\\nMatch the Main_cover_type with the above Valid Normalized types (case-insensitive, ignore minor formatting differences).\\n\\nIf matched, return the normalized type exactly as listed above.\\n\\nIf no valid match, return \\\"\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Main_Cover_Type\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Main_Cover_Type\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/3a5f3ff5-a60f-4c90-b596-3d47b60fbe0b.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type_Mapped@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17133\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef check_cover_type_mapped(previous_line, context = {}, keys = {}, **kwargs):\\n\\t# Import Python packages\\n\\t# import json\\n\\t\\n\\t# Log statements using print()\\n\\t# print(\\\"This will appear in the logs\\\")\\n\\t\\n\\t# Return the cleaned output\\n\\t# return previous_line\\n\\t\\n\\tdef contains_only_quotes(s):\\n\\t  return all(c in {'\\\"', \\\"'\\\"} for c in s)\\n\\t\\n\\tprevious_line = previous_line.strip()\\n\\tif previous_line:\\n\\t  if contains_only_quotes(previous_line):\\n\\t    print('1')\\n\\t    return 'COMP'\\n\\t  else :\\n\\t    print('2')\\n\\t    return previous_line\\n\\tprint('3')\\n\\treturn 'COMP'\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"check_cover_type_mapped\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Main_Cover_Type_Mapped@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Details", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are an intelligent address extraction assistant.\\n\\nGiven a full address string {{\\\\ Party Address \\\\}}, extract the following components:\\nAddress Line 1: Only the building number/name and street/road name. (Exclude landmarks, estates, zones, or locality info.)\\nAddress Line 2: Estate, locality, landmark, or additional location detail\\nAddress Line 3: Optional detail like block, zone, village, or area\\nCity: Town or city name\\nState: The state, province, or region\\nCountry: Country name\\nPostcode: postal code (UK format)\\n\\nExtraction Rules:\\nDo not merge unrelated fields across lines\\nDo not confuse postcode with city/state.\\nReturn empty strings if any field is missing for that component \\n{\\n  \\\"Address Line 1\\\": \\\"\\\",\\n  \\\"Address Line 2\\\": \\\"\\\",\\n  \\\"Address Line 3\\\": \\\"\\\",\\n  \\\"City\\\": \\\"\\\",\\n  \\\"State\\\": \\\"\\\",\\n  \\\"Country\\\": \\\"\\\",\\n  \\\"Postcode\\\": \\\"\\\"\\n}\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Party_Address\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Party_Address\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/3dddb9d8-5662-4543-805a-c4a33588b243.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Party_Address_Details@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17138\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef clean(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\ttry:\\n\\t  previous_line = eval(previous_line)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  previous_line = json.loads(previous_line)\\n\\t  # print(type(previous_line))\\n\\t\\n\\treturn previous_line\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"clean\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Party_Address_Details@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_1", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/7af9cd06-d675-4ea4-a766-9c765f0873c6.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17137\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line1(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 1\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line1\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_2", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/865ac791-779e-441c-b734-9fe437b1d881.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17134\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line2(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\tval = get_value(Party_Address_Details, \\\"Address Line 2\\\")\\n\\treturn val\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line2\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Line_3", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/73423744-ed04-4388-b16a-cdd3f4202c6a.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17135\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_address_line3(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"Address Line 3\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_address_line3\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Country", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/dc38f47d-eff0-490d-83bc-111d636a0e8f.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17130\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_country(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"Country\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_country\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_State", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/f1088674-f05c-4844-8d29-af2e01dae470.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17132\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_state(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"State\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_state\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_City", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/fdef8073-dd77-49fb-a70e-57799ac74d39.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17131\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_city(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"City\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_city\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Party_Address_Postcode", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/cc021052-59e5-4e58-9bf3-fa662f16aca3.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Party_Address_Details\",\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17136\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef get_postcode(Party_Address_Details, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tdef get_value(data, key):\\n\\t    if isinstance(data, dict):\\n\\t        return data.get(key, \\\"\\\")\\n\\t    return \\\"\\\"\\n\\t\\n\\ttry:\\n\\t  Party_Address_Details = eval(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\texcept:\\n\\t  Party_Address_Details = json.loads(Party_Address_Details)\\n\\t  # print(type(previous_line))\\n\\t\\n\\ttry:\\n\\t  val = get_value(Party_Address_Details, \\\"Postcode\\\")\\n\\t  return val\\n\\texcept:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"get_postcode\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Party_Address_Details\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Excess_List", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"Excess_List\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Unique_Values_in_Cover_On_Policy", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/4091bb1f-578e-42b5-857f-34cdf520a1f5.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Excess_List\",\"data_type\":\"FIELD\",\"value\":\"Excess_List\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17139\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(Excess_List, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            return pd.DataFrame(data[1:] , columns= data[0])\\n\\t        else:\\n\\t            raise ValueError(\\\"The list must contain either all dictionaries or all lists.\\\")\\n\\t    else:\\n\\t        raise TypeError(\\\"Input data is not a list.\\\")\\n\\t\\n\\t\\n\\t\\n\\ttable = json.loads(Excess_List)\\n\\t\\n\\tif Excess_List in ['',None,'N/A', '[]', []]:\\n\\t  return \\\"None\\\"\\n\\t\\n\\tExcess_List = convert_to_dataframe(table)\\n\\tunique_vals = Excess_List['Cover On Policy'].unique().tolist()\\n\\tunique_vals = [each_val for each_val in unique_vals if each_val not in ['N/A', \\\"\\\", None, \\\"null\\\"]]\\n\\tif unique_vals:\\n\\t    return unique_vals\\n\\telse:\\n\\t    return \\\"None\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Excess_List\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "cover_mapping", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"For each row in the list {{ \\\\ Unique Values in Cover On Policy \\\\ }}, generate a dictionary mapping with the original value mapped to a category based on cover types.\\n\\n**Valid_cover_types**: \\n- \\\"Comprehensive(COMP)\\\" (also treat \\\"Comp\\\", \\\"COMP\\\", \\\"Comprehensive\\\" as equivalent to this)\\n- \\\"Third Party Fire and Theft(TPFT)\\\" (include variations like \\\"TPFT\\\", \\\"Third Party Fire &amp; Theft\\\")\\n- \\\"Third Party Only(TPO)\\\" (include \\\"TPO\\\", \\\"Third Party\\\")\\n- \\\"Laid up ADFT\\\"\\n- \\\"Laid up FT\\\"\\n- \\\"Mixed Cover\\\"\\n\\n**Mapping Rules**:\\n1) If all values in a row (after normalization) are Comprehensive(COMP) \\u2192 map to \\\"All Comprehensive\\\"\\n(This must include variations like \\u201cComp\\u201d, \\u201cCOMP\\u201d, \\u201cComprehensive\\u201d as meaning \\\"Comprehensive(COMP)\\\")\\n\\n2) If all values in a row are Third Party Fire and Theft(TPFT) \\u2192 map to \\\"All Third Party Fire and Theft\\\"\\n\\n3) If values are Third Party Only(TPO) \\u2192 map to \\\"All Third Party Only\\\"\\n\\n4) If the row contains Comprehensive(COMP) (or its variations) along with other valid cover types \\u2192 map to \\\"Mixed cover including Comprehensive\\\"\\n\\n5) If the row contains more than one valid cover type present in Valid_cover_types excluding Comprehensive(COMP) \\u2192 map to \\\"Mixed cover excluding Comprehensive\\\"\\n\\n6) If any value in the row is not part of the Valid_cover_types or their known variations, map the entire row to \\\"\\\" (empty string). For example, the text \\\"Insurance company\\\" is not present in Valid_cover_types, so map it to \\\"\\\" (empty string).\\n\\nExample Output Format :\\n\\nInput : [\\n             \\\"TPO, TPFT\\\",\\n             \\\"Comp, TPFT\\\",\\n             \\\"Comp, Comp\\\", \\n              \\\"Any Insurance company\\\"\\n             ]\\n\\nOutput : \\n {\\n\\\"TPO, TPFT\\\": \\\"Mixed cover excluding Comprehensive\\\",\\n\\\"Comp, TPFT\\\": \\\"Mixed cover including Comprehensive\\\",\\n\\\"Comp, Comp\\\": \\\"All Comprehensive\\\",\\n \\\"Any Insurance company\\\": \\\"\\\" \\n}\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Unique_Values_in_Cover_On_Policy\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Unique_Values_in_Cover_On_Policy\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "CCE_Data", "lines": [{"function_id": {"name": "get_extracted_field_value", "source": "NATIVE"}, "inputs": [{"arg_name": "fields", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "FIELD", "data_type_options": ["TEXT"], "value": "__model_result"}, {"arg_name": "field", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "\"CCE_Data\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Policy_Dates", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"CCE_Data: { \\\\ CCE Data \\\\}\\u2028\\nPolicy_Inception_Date: { \\\\ Incepts On \\\\}\\n\\nEach row in CCE_Data has a **Period** value. It can be a full date range 01/01/2023 - 31/12/2023, a year range 2020-2021 or 05/2020 - 06/2020 or a single year 2020.\\n\\nIf only years are present, use the day and month from the Policy_Inception_Date to build full dates. if month and year is present use date from the Policy_Inception_date to build full dates.\\u2028\\nFor example, if Policy_Inception_Date is 15/06/2019 and Period is 2020-2021, the result should be 15/06/2020 and 15/06/2021.\\n\\nIf only 2020 is given, return 15/06/2020 as the start date and 15/06/2021 (exactly one year ahead as end date) . If the Period has full dates, keep them unchanged.\\n\\nIf Period is 11/2020 - 10/2021 use the date from the Policy_Inception_Date and result should be 15/11/2020 and 15/10/2021.\\n\\nIf Period is 24/10/17-23/10/18 then the result should be 24/10/2017 and 24/10/2018\\n\\nReturn a table with:\\u2028Period, Policy Period Start Date, Policy Period End Date, Used Inception Date (Yes/No) \\u2014 where \\u201cUsed Inception Date\\u201d indicates whether the Policy_Inception_Date was used to construct the full dates or not.\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"OBJECT_LIST\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Incepts_On\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"CCE_Data\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Incepts_On\"}, {\"data_type\": \"FIELD\", \"value\": \"CCE_Data\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"OBJECT_LIST\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/b9d3cef2-e5ae-4bd1-a985-ccffaa59f814.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"Policy_Dates@0\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17140\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef business_logic_for_policy_period_end_date(previous_line, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\timport pandas as pd\\n\\tfrom datetime import datetime, timedelta\\n\\t\\n\\t# Custom function\\n\\tdef add_one_year_minus_one_day(date_str):\\n\\t    try:\\n\\t        input_date = datetime.strptime(date_str, \\\"%d/%m/%Y\\\")\\n\\t        try:\\n\\t            one_year_later = input_date.replace(year=input_date.year + 1)\\n\\t        except ValueError:\\n\\t            temp_date = input_date + (datetime(input_date.year + 1, 3, 1) - datetime(input_date.year, 3, 1))\\n\\t            one_year_later = temp_date\\n\\t        final_date = one_year_later - timedelta(days=1)\\n\\t        return final_date.strftime(\\\"%d/%m/%Y\\\")\\n\\t    except Exception as e:\\n\\t        print(e)\\n\\t        return ''\\n\\t\\n\\t\\n\\tdef convert_to_df(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assu  med as header\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\t\\n\\t\\n\\ttry:\\n\\t    previous_line = eval(previous_line)\\n\\t    dates_df = convert_to_df(previous_line)\\n\\texcept:\\n\\t  try:\\n\\t      previous_line = json.loads(previous_line)\\n\\t      dates_df = convert_to_df(previous_line)\\n\\t  except:\\n\\t      return previous_line\\n\\t\\n\\ttry:\\n\\t\\n\\t    # Iterate row-wise\\n\\t    for index, row in dates_df.iterrows():\\n\\t        start_date = row['Policy Period Start Date']\\n\\t        \\n\\t        # Only update Policy Period End Date if Used Inception Date is 'Yes'\\n\\t        if str(row.get('Used Inception Date', '')).strip().lower() == 'yes':\\n\\t            dates_df.at[index, 'Policy Period End Date'] = add_one_year_minus_one_day(start_date)\\n\\t            print(\\\"Applied for \\\", row[\\\"Period\\\"])\\n\\t\\n\\t    # Clean up Period column after the loop\\n\\t    dates_df['Period'] = dates_df['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t\\n\\t    # Convert to list format for output\\n\\t    final_df = [dates_df.columns.tolist()] + dates_df.values.tolist()\\n\\t    return final_df\\n\\t\\n\\t    # print(dates_df.columns)\\n\\t    # Iterate row-wise\\n\\t    # for index, row in dates_df.iterrows():\\n\\t    #     start_date = row['Policy Period Start Date']\\n\\t    #     dates_df.at[index, 'Policy Period End Date'] = add_one_year_minus_one_day(start_date)\\n\\t    #     dates_df['Period'] = dates_df['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t\\n\\t    #     final_df = [dates_df.columns.tolist()] + dates_df.values.tolist()\\n\\t    # return final_df\\n\\t\\n\\texcept:\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"business_logic_for_policy_period_end_date\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"Policy_Dates@0\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "Period", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/8d11abe7-9070-41c2-88df-5fddb986d73d.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Policy_Dates\",\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17141\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(Policy_Dates, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\t\\n\\tdef convert_to_df(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data)\\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assu  med as header\\n\\t            print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\t\\n\\ttry:\\n\\t    try:\\n\\t        Policy_Dates = eval(Policy_Dates)    \\n\\t    except:\\n\\t        Policy_Dates = json.loads(Policy_Dates)   \\n\\t\\n\\t    Policy_Dates = convert_to_df(Policy_Dates)\\n\\t    Policy_Dates = Policy_Dates.astype(str)\\n\\t    print(Policy_Dates.columns)\\n\\t    CCE_Policy_start_dates_List = Policy_Dates[['Policy Period Start Date']].values.tolist()\\n\\t    filtered_vals = [each_val for each_val in CCE_Policy_start_dates_List if each_val not in [\\\"N/A\\\",\\\"\\\",None,\\\"null\\\"]]\\n\\t    if len(filtered_vals)>=1:\\n\\t      return [[\\\"Policy Period Start Date\\\"]] + CCE_Policy_start_dates_List\\n\\t    else:\\n\\t      CCE_Period_List = Policy_Dates[['Period']].values.tolist()\\n\\t      return [\\\"Policy Period Start Date\\\"] + [CCE_Period_List]\\n\\texcept Exception as e:\\n\\t    print(e)\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Year", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"claims_period: {{ \\\\ Period \\\\}}\\nYou are given a list called claim_periods.\\n\\nYou are given a list called claim_periods.\\nEach item in the list is a period, which may be:\\nin full year format like \\\"31/01/2023\\\"\\nOr in year format like \\\"2023\\\"\\n\\nYour task is:\\n1. Extract the **starting year** for each row as mentioned.\\n2. Sort the periods by starting year in **descending** order.\\n3. Give a **Year** to each period starting from 1 (most recent = 1).\\n\\nIgnore any periods that don\\u2019t contain a valid year.\\nReturn the final output as a table with two columns: 'Policy Period Start Date' , 'Year'\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Period\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Period\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}, {"label": "CCE_Table", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/acd3646b-c0c8-4609-b8b3-bc1fb7f0a952.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"Excess_List\",\"data_type\":\"FIELD\",\"value\":\"Excess_List\"},{\"name\":\"cover_mapping\",\"data_type\":\"FIELD\",\"value\":\"cover_mapping\"},{\"name\":\"CCE_Data\",\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"name\":\"Policy_Dates\",\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"},{\"name\":\"Year\",\"data_type\":\"FIELD\",\"value\":\"Year\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17142\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef from_CCE_Table(Excess_List, cover_mapping, CCE_Data, Policy_Dates, Year, context = {}, keys = {}, **kwargs):\\n\\timport pandas as pd\\n\\timport json\\n\\timport numpy as np\\n\\t\\n\\tdef convert_to_dataframe(data):\\n\\t    if isinstance(data, list):\\n\\t        if all(isinstance(item, dict) for item in data):\\n\\t            # List of dictionaries\\n\\t            return pd.DataFrame(data)\\n\\t        \\n\\t        elif all(isinstance(item, list) for item in data):\\n\\t            # List of lists\\n\\t            # First row is assumed as header\\n\\t            # print(\\\"yes\\\")\\n\\t            return pd.DataFrame(data[1:], columns=data[0])\\n\\t        else:\\n\\t            return pd.DataFrame(data)\\n\\ttry:\\n\\t  try:\\n\\t      try:\\n\\t          Excess_List = json.loads(Excess_List)\\n\\t      except:\\n\\t          Excess_List = eval(Excess_List)\\n\\t\\n\\t      Excess_List = convert_to_dataframe(Excess_List)\\n\\t      if \\\"Period\\\" in Excess_List.columns:\\n\\t          Excess_List[\\\"Period\\\"] = Excess_List[\\\"Period\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      \\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t\\n\\t  try:\\n\\t      try:\\n\\t          CCE_Data = json.loads(CCE_Data)\\n\\t      except:\\n\\t          CCE_Data = eval(CCE_Data)\\n\\t\\n\\t      CCE_Data = convert_to_dataframe(CCE_Data)\\n\\t      if \\\"Period\\\" in CCE_Data.columns:\\n\\t          CCE_Data[\\\"Period\\\"] = CCE_Data[\\\"Period\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      \\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t\\n\\t  try:\\n\\t      try:\\n\\t          Policy_Dates = json.loads(Policy_Dates)\\n\\t      except:\\n\\t          Policy_Dates = eval(Policy_Dates)\\n\\t\\n\\t      Policy_Dates = convert_to_dataframe(Policy_Dates)\\n\\t      if \\\"Period\\\" in Policy_Dates.columns:\\n\\t          Policy_Dates[\\\"Period\\\"] = Policy_Dates[\\\"Period\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      if \\\"Policy Period Start Date\\\" in Policy_Dates.columns:\\n\\t          Policy_Dates[\\\"Policy Period Start Date\\\"] = Policy_Dates[\\\"Policy Period Start Date\\\"].str.replace(\\\" \\\", \\\"\\\", regex=False)\\n\\t      \\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t\\n\\t  try:\\n\\t      try:\\n\\t          Year = json.loads(Year)\\n\\t      except:\\n\\t          Year = eval(Year)\\n\\t      Year = convert_to_dataframe(Year)\\n\\t  except Exception as e:\\n\\t      print(e)\\n\\t\\n\\t\\n\\t  ## Merging the data to form final CCE table\\n\\t  try:\\n\\t      CCE_Data['Period'] = CCE_Data['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t      Excess_List['Period'] = Excess_List['Period'].astype(str).str.replace(r'[^0-9]', '', regex=True)\\n\\t      merged_df1 = pd.merge(CCE_Data, Excess_List,  on='Period', how='inner')\\n\\t  except:\\n\\t      merged_df1 = CCE_Data.copy()\\n\\t      \\n\\t      print(\\\"Exception in merging claims info\\\")\\n\\t  \\n\\t  # print(merged_df1)\\n\\t  \\n\\t  # merged_df = [merged_df1.columns.tolist()] + merged_df1.values.tolist()\\n\\t  # return merged_df\\n\\t  \\n\\t  try:\\n\\t      merged_df2 = pd.merge(merged_df1, Policy_Dates,  on='Period', how='inner')\\n\\t  except Exception as e:\\n\\t      merged_df2 = merged_df1.copy()\\n\\t      print(\\\"Exception in merging policy info\\\")\\n\\t\\n\\t  # merged_df = [merged_df2.columns.tolist()] + merged_df2.values.tolist()\\n\\t  # return merged_df\\n\\t  \\n\\t  # print(merged_df2['Period'])\\n\\t  # print(Insurer_Data['Period'])\\n\\t  \\n\\t  try:\\n\\t      merged_df3 = pd.merge(merged_df2, Insurer_Data,  on='Period', how='inner')\\n\\t  except:\\n\\t      merged_df3 = merged_df2.copy()\\n\\t      print(\\\"Exception in merging all details\\\")\\n\\t  # print(merged_df3['Period'])\\n\\t  try:    \\n\\t      merged_df = pd.merge(merged_df3, Year,  on='Policy Period Start Date', how='inner')\\n\\t  except:\\n\\t      merged_df = merged_df3.copy()\\n\\t      print(\\\"Exception in merging Year info\\\")\\n\\t  \\n\\t  \\n\\t  try:\\n\\t    cover_mapping = json.loads(cover_mapping)\\n\\t    merged_df['Cover on Policy - Mapped'] = merged_df['Cover On Policy'].map(cover_mapping)\\n\\t  except Exception as e:\\n\\t    print(e)\\n\\t    merged_df = merged_df.copy()\\n\\t\\n\\t  rename_dict = {\\n\\t      'AD Excess': 'Excess: AD',\\n\\t      'Theft Excess': 'Excess: Theft',\\n\\t      'Fire Excess': 'Excess: Fire',\\n\\t      'WS Excess': 'Excess: WS',\\n\\t      'Cover On Policy': 'Cover on Policy',\\n\\t      'Vehicle Years Earned': 'Vehicle Years Earned',\\n\\t      'Claim Count': 'Claim Count: All',\\n\\t      # 'no of claims windscreen': 'Claim Count: WS',\\n\\t      'Incurreds Paid AD WS': 'Incurreds - Paid: AD&WS',\\n\\t      'Incurreds Paid FT': 'Incurreds - Paid: FT',\\n\\t      'Incurreds Paid TP': 'Incurreds - Paid: TP',\\n\\t      'Incurreds Outstanding AD WS': 'Incurreds - Outstanding: AD&WS',\\n\\t      'Incurreds Outstanding FT': 'Incurreds - Outstanding: FT',\\n\\t      'Incurreds Outstanding TP': 'Incurreds - Outstanding: TP',\\n\\t      'Total Incurred': 'Total Incurred Paid +  Outstanding',\\n\\t      'Policy Period Start Date': 'Policy Year Start Date',\\n\\t      'Policy Period End Date': 'Policy Year End Date'\\n\\t  }\\n\\t\\n\\t  safe_rename_dict = {k: v for k, v in rename_dict.items() if k in merged_df.columns}\\n\\t\\n\\t  merged_df.rename(columns=safe_rename_dict, inplace=True)\\n\\t\\n\\t  try:\\n\\t      merged_df['Claim Count: WS'] = ''\\n\\t  except Exception as e:\\n\\t    print(e)\\n\\t  \\n\\t\\n\\t  columns_order = [ 'Year', 'Policy Year Start Date', \\\\\\n\\t                'Policy Year End Date', \\n\\t                'Insurer', \\n\\t                'Excess: AD',\\\\\\n\\t                'Excess: Fire', \\\\\\n\\t                'Excess: Theft', \\\\\\n\\t                'Excess: WS', \\\\\\n\\t                'Cover on Policy', \\\\\\n\\t                'Cover on Policy - Mapped',\\n\\t                 'Vehicle Years Earned', \\n\\t                'Claim Count: All', \\\\\\n\\t                'Claim Count: WS', \\\\\\n\\t                'Incurreds - Paid: AD&WS', \\\\\\n\\t                'Incurreds - Paid: FT', \\\\\\n\\t                'Incurreds - Paid: TP', \\n\\t                'Incurreds - Outstanding: AD&WS', \\\\\\n\\t                'Incurreds - Outstanding: FT' ,\\n\\t                'Incurreds - Outstanding: TP', \\\\\\n\\t                'Total Incurred Paid +  Outstanding']\\n\\t\\n\\t  # existing_columns = [col for col in columns_order if col in merged_df.columns]           \\n\\t               \\n\\t  # print(merged_df.columns)\\n\\t  merged_df = merged_df.replace({None: np.nan, \\\"\\\": np.nan})\\n\\t  merged_df = merged_df.dropna(how='all')\\n\\t  \\n\\t  merged_df.replace('N/A', '', inplace=True)\\n\\t  merged_df = merged_df.fillna('')\\n\\t\\n\\t  # merged_df = merged_df[existing_columns]\\n\\t\\n\\t  for col in columns_order:\\n\\t    if col not in merged_df.columns:\\n\\t      merged_df[col] = '' \\n\\t\\n\\t  merged_df = merged_df.drop_duplicates()\\n\\t  if len(merged_df.columns.tolist()) > 0:\\n\\t\\n\\t      merged_df = merged_df[columns_order]\\n\\t      merged_df = [merged_df.columns.tolist()] + merged_df.values.tolist()\\n\\t      return merged_df\\n\\t  else:\\n\\t      return [columns_order]\\n\\texcept Exception as e:\\n\\t  print(e)\\n\\t  return [columns_order]\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"from_CCE_Table\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"FIELD\",\"value\":\"Excess_List\"},{\"data_type\":\"FIELD\",\"value\":\"cover_mapping\"},{\"data_type\":\"FIELD\",\"value\":\"CCE_Data\"},{\"data_type\":\"FIELD\",\"value\":\"Policy_Dates\"},{\"data_type\":\"FIELD\",\"value\":\"Year\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "Trade_Descriptions", "lines": [{"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/15ec1038-63d9-49ac-9c28-8d5ce6e0648b.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17143\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(context = {}, keys = {}, **kwargs):\\n\\tdata = [\\n\\t  {\\n\\t    \\\"trade\\\": \\\"General Manufacturing\\\",\\n\\t    \\\"aliases\\\": [\\\"steel\\\", \\\"metal\\\", \\\"samples\\\", \\\"manufacturing of glass\\\", \\\"manufacturing of furniture\\\", \\\"manufacturing\\\", \\\"general manufacturing\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Fleet - Unclassified\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Contractor\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Builders\\\",\\n\\t    \\\"aliases\\\": [\\\"Building Contractors\\\", \\\"house builders\\\", \\\"builders\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Hauliers UK only\\\",\\n\\t    \\\"aliases\\\": [\\\"haulage contractors - uk only\\\", \\\"hauliers uk only\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Electrician\\\",\\n\\t    \\\"aliases\\\": [\\\"Electrical Contractors\\\", \\\"electrical installation\\\", \\\"electrical testing\\\", \\\"electrician\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Plumbing & Heating Engineer\\\",\\n\\t    \\\"aliases\\\": [\\\"plumbing & heating contractors\\\", \\\"gas servicing\\\", \\\"boiler maintenance\\\", \\\"plumber\\\", \\\"heating engineer\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Engineering\\\",\\n\\t    \\\"aliases\\\": [ \\\"engineers\\\", \\\"mechanical engineers\\\", \\\"engineering\\\", \\\"electrical engineers\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Civil engineering\\\",\\n\\t    \\\"aliases\\\": [\\\"civil engineering\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Scaffolding Contractors\\\",\\n\\t    \\\"aliases\\\": [\\\"scaffolders\\\", \\\"scaffolding contractors\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Wholesale (non food and drink)\\\",\\n\\t    \\\"aliases\\\": [\\\"wholesalers of electrical components\\\", \\\"building materials\\\", \\\"wholesale\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Cleaning Contractors\\\",\\n\\t    \\\"aliases\\\": [\\\"domestic cleaners\\\", \\\"office cleaners\\\", \\\"cleaning contractors\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Plant Hire\\\",\\n\\t    \\\"aliases\\\": [\\\"plant hire operator\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Food & Drink Wholesale\\\",\\n\\t    \\\"aliases\\\": [\\\"cash & carry\\\", \\\"beer & wine wholesalers\\\", \\\"food wholesalers\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Retail (non food and drink)\\\",\\n\\t    \\\"aliases\\\": [\\\"department store\\\", \\\"shopping centre\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Property Owners\\\",\\n\\t    \\\"aliases\\\": [\\\"landlords\\\", \\\"commercial property owners\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Telecommunications & IT\\\",\\n\\t    \\\"aliases\\\": [\\\"telecommunications installation\\\", \\\"it installation\\\", \\\"it services\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Double Glazing\\\",\\n\\t    \\\"aliases\\\": [\\\"double glazing manufacture\\\", \\\"double glazing installation\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Landscape Gardener\\\",\\n\\t    \\\"aliases\\\": [\\\"gardening\\\", \\\"landscape gardener\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Other Prof/Sci/Tech\\\",\\n\\t    \\\"aliases\\\": [\\\"laboratory\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Removal Contractor\\\",\\n\\t    \\\"aliases\\\": [\\\"removals and storage\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Security and investigation\\\",\\n\\t    \\\"aliases\\\": [\\\"private detectives\\\", \\\"security guarding\\\", \\\"security services\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Builders Merchant\\\",\\n\\t    \\\"aliases\\\": [\\\"building supplies\\\", \\\"suppliers of aggregates\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Service Engineers\\\",\\n\\t    \\\"aliases\\\": [\\\"mechanical servicing\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Asphalters/Pavers/Engineers\\\",\\n\\t    \\\"aliases\\\": [\\\"road maintenance\\\", \\\"road surfacing\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Flooring and Carpet\\\",\\n\\t    \\\"aliases\\\": [\\\"carpet fitters\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Leisure Industry\\\",\\n\\t    \\\"aliases\\\": [\\\"nightclub\\\", \\\"pub\\\", \\\"leisure centre\\\", \\\"gym\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Social Religious or Charitable\\\",\\n\\t    \\\"aliases\\\": [\\\"charity\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Business Services\\\",\\n\\t    \\\"aliases\\\": [\\\"document storage\\\", \\\"administration\\\", \\\"consultants\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Food & Drink Services\\\",\\n\\t    \\\"aliases\\\": [\\\"food delivery\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Food & Drink Retail\\\",\\n\\t    \\\"aliases\\\": [\\\"restaurant\\\", \\\"pub\\\", \\\"takeaway\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Estate Agent\\\",\\n\\t    \\\"aliases\\\": [\\\"lettings agents\\\", \\\"estate agent\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Furniture Sale and Manufacture\\\",\\n\\t    \\\"aliases\\\": [\\\"furniture retail\\\", \\\"furniture showroom\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Leisure (Hotel, clubs & pubs)\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Shop Fitting\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"NHS Trust\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Import/Export\\\",\\n\\t    \\\"aliases\\\": [\\\"Import\\\", \\\"Export\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Catering\\\",\\n\\t    \\\"aliases\\\": [\\\"licensed catering\\\", \\\"unlicensed catering\\\", \\\"outside catering\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Residential Care\\\",\\n\\t    \\\"aliases\\\": [\\\"care homes\\\", \\\"retirement homes\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Manufacturing Timber/Furniture\\\",\\n\\t    \\\"aliases\\\": [\\\"joinery\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Printers and publishers\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Demolition Contractors\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Housing Association\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Timber Merchant\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Private Ambulance Service\\\",\\n\\t    \\\"aliases\\\": []\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Hauliers Overseas\\\",\\n\\t    \\\"aliases\\\": [\\\"haulage contractors - overseas\\\", \\\"hauliers overseas\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Textiles & Clothing\\\",\\n\\t    \\\"aliases\\\": [\\\"clothing manufacturing\\\", \\\"textile manufacturing\\\", \\\"clothing retail\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Automotive Industry\\\",\\n\\t    \\\"aliases\\\": [\\\"vehicle manufacturing\\\", \\\"vehicle repairs\\\", \\\"vehicle parts manufacturing\\\", \\\"vehicle parts wholesale\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Pharmaceutical\\\",\\n\\t    \\\"aliases\\\": [\\\"pharmacy\\\", \\\"medical laboratories\\\"]\\n\\t  },\\n\\t  {\\n\\t    \\\"trade\\\": \\\"Farmer\\\",\\n\\t    \\\"aliases\\\": [\\\"dairy farmers\\\", \\\"arable farmers\\\", \\\"livestock farmers\\\"]\\n\\t  }\\n\\t]\\n\\t\\n\\treturn data\\n\\t\\n\\t\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{\"metrics_params\": {\"data_type\": \"DICT\", \"value\": \"{\\\"source_id\\\": \\\"Unknown\\\", \\\"source_type\\\": \\\"App\\\", \\\"user_agent\\\": \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\\\"}\"}}"}], "output_type": "TEXT"}]}, {"label": "AXA_Trade_Description", "lines": [{"function_id": {"name": "refine_field_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "prompt", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"You are a domain expert in classifying business descriptions.\\n\\nYou are given:\\n\\nTrades_List: { \\\\ Trade Descriptions \\\\} \\nBusiness_Description: { \\\\ Business Description \\\\}\\n\\nInstructions:\\nFor the business description provided:\\nCompare it against both the trade names and their aliases in Trades_List.\\nDetermine the closest and similar matching **trade**.\\nIf no suitable match is found, return \\\"Fleet - Unclassified\\\".\""}, {"arg_name": "metrics_params", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"source_id\": \"Unknown\", \"source_type\": \"App\", \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36\"}"}, {"arg_name": "proj_uuid", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"0198ef37-d998-7864-878d-539c9c7ddd98\""}, {"arg_name": "cached_index", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "custom_request", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "ANY", "data_type_options": ["TEXT"], "value": "{\"enable_map_reduce_extraction\": true, \"feature_flag_overrides\": {\"enable_dummy_feature_c\": true, \"enable_aihub_secret_manager\": true, \"aihub_enable_classification_validation\": true, \"enable_slas\": true, \"enable_advanced_apps\": true, \"aihub_enable_ocr_confidence_validation\": true, \"enable_text_view_in_converse\": true, \"enable_repo_roles\": true, \"enable_deployment_dashboard\": true, \"enable_multi_step_lite\": true, \"enable_runtime_configuration\": true, \"enable_upgrade_in_progress_banner\": true, \"enable_aihub_review_queues\": true, \"enable_aihub_stp_options\": true, \"aihub_enable_native_excel_processing\": true, \"aihub_enable_reasoning_prompt_suggestion\": true, \"enable_email_integration_data_source\": true, \"enable_aihub_saml_mapping\": true, \"enable_review_dashboard\": true, \"aihub_enable_search_history\": true, \"enable_aihub_deployment_notifications\": true, \"aihub_enable_vision_reasoning\": true, \"aihub_enable_migrate_project\": true, \"enable_app_ux_refresh\": true, \"enable_splitter_instructions\": true, \"enterprise_advanced_ocr\": true, \"aihub_enable_manual_app_ibllm_updates\": true, \"aihub_enable_customize_app\": true, \"enable_discourse_community_forum\": true, \"aihub_enable_app_run_gt_sets\": true, \"aihub_enable_navbar_redesign\": true, \"aihub_enable_extended_ai_runtime_expiration\": true, \"aihub_enable_build_split_by_page\": true, \"aihub_enable_search_in_navbar\": true, \"aihub_enable_build_moderation\": true, \"enable_upgrade_expired_apps\": true, \"aihub_enable_sdlc_workspaces\": true, \"enable_decoupled_chatbots\": true, \"aihub_enable_linked_deployments\": true, \"enable_extraction_value_normalization\": true, \"enable_fine_grain_usage_data\": true, \"enable_original_llm_limits\": true, \"enable_passing_class_names_to_splitter\": true, \"enable_search_acl_ui_v2\": true, \"enable_multistep_build\": true}, \"udf_id\": null, \"confidence_for_reasoning\": true}"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "data_type", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"TEXT\""}, {"arg_name": "previous_line", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "prompt_arg_names", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"Business_Description\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"Trade_Descriptions\\\"\"}]"}, {"arg_name": "prompt_arg_vals", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"FIELD\", \"value\": \"Business_Description\"}, {\"data_type\": \"FIELD\", \"value\": \"Trade_Descriptions\"}]"}, {"arg_name": "prompt_arg_data_types", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "LIST", "data_type_options": ["TEXT"], "value": "[{\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}, {\"data_type\": \"ANY\", \"value\": \"\\\"TEXT\\\"\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/10f626d5-c4bd-4210-a2fa-4aad798e40a1.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@0\"},{\"name\":\"Business_Description\",\"data_type\":\"FIELD\",\"value\":\"Business_Description\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17144\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef clean(previous_line, Business_Description, context = {}, keys = {}, **kwargs):\\n\\tif Business_Description:\\n\\t  if Business_Description == \\\"\\\":\\n\\t      return \\\"\\\"\\n\\t  else:\\n\\t      return previous_line\\n\\telse:\\n\\t    return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"clean\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@0\"},{\"data_type\":\"FIELD\",\"value\":\"Business_Description\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}, {"function_id": {"name": "run_udf_in_lambda_v2", "source": "NATIVE"}, "inputs": [{"arg_name": "absolute_scripts_path", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"axauk/dev-si-fleet/fs/Instabase Drive/aihub/0198ef37-d998-7864-878d-539c9c7ddd98/project/modules/scripts/REFINER/4d3181b6-37c6-44e4-af34-826d3ed13323.json\""}, {"arg_name": "function_args", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "[{\"name\":\"previous_line\",\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@1\"},{\"name\":\"Trade_Descriptions\",\"data_type\":\"FIELD\",\"value\":\"Trade_Descriptions\"}]"}, {"arg_name": "lambda_udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "doc_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "null", "default": "null"}, {"arg_name": "udf_id", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"17145\""}, {"arg_name": "code_arg", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"\\n\\ndef unnamed_custom_function(previous_line, Trade_Descriptions, context = {}, keys = {}, **kwargs):\\n\\timport json\\n\\t\\n\\tprint(repr(previous_line))\\n\\tif previous_line == '\\\"\\\"' or previous_line == '' or previous_line == \\\"\\\":\\n\\t    return \\\"\\\"\\n\\t\\n\\tif previous_line:\\n\\t  try:\\n\\t      Trade_Descriptions = eval(Trade_Descriptions)\\n\\t  except:\\n\\t      try:\\n\\t          Trade_Descriptions = json.loads(Trade_Descriptions)\\n\\t      except:\\n\\t          # return \\\"Fleet - Unclassified\\\"\\n\\t          return \\\"Fleet - Unclassified\\\"\\n\\t\\n\\t  Trade_Descriptions_ls = [item[\\\"trade\\\"].lower() for item in Trade_Descriptions]\\n\\t    \\n\\t  if previous_line.lower() in Trade_Descriptions_ls:\\n\\t      return previous_line\\n\\t  else:\\n\\t      # return \\\"Fleet - Unclassified\\\"\\n\\t      return \\\"Fleet - Unclassified\\\"\\n\\telse:\\n\\t  return \\\"\\\"\""}, {"arg_name": "fn_name", "arg_type": "POSITIONAL_OR_KEYWORD", "data_type": "TEXT", "data_type_options": ["TEXT"], "value": "\"unnamed_custom_function\""}, {"arg_name": "args", "arg_type": "VAR_POSITIONAL", "data_type": "LIST", "value": "[{\"data_type\":\"LINE\",\"value\":\"AXA_Trade_Description@1\"},{\"data_type\":\"FIELD\",\"value\":\"Trade_Descriptions\"}]"}, {"arg_name": "kwargs", "arg_type": "VAR_KEYWORD", "data_type": "DICT", "data_type_options": ["DICT"], "value": "{}"}], "output_type": "TEXT"}]}]}